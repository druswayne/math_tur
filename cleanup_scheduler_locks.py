#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
"""

import os
import sys
from datetime import datetime

def cleanup_file_lock():
    """–û—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª–æ–≤—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É"""
    import platform
    
    if platform.system() == 'Windows':
        lock_file = os.path.join(os.environ.get('TEMP', 'C:\\temp'), 'math_tur_scheduler.lock')
    else:
        lock_file = '/tmp/math_tur_scheduler.lock'
    
    if os.path.exists(lock_file):
        try:
            with open(lock_file, 'r') as f:
                pid = f.read().strip()
            print(f"üìÅ –ù–∞–π–¥–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: PID {pid}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            try:
                os.kill(int(pid), 0)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
                print(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {pid} –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                response = input("–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É? (y/N): ")
                if response.lower() != 'y':
                    print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                    return False
            except OSError:
                print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å")
            
            os.remove(lock_file)
            print("‚úÖ –§–∞–π–ª–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    else:
        print("üìÅ –§–∞–π–ª–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return True

def cleanup_db_locks():
    """–û—á–∏—â–∞–µ—Ç –ë–î –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    try:
        from app import db, SchedulerLock
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        locks = SchedulerLock.query.filter_by(is_active=True).all()
        
        if not locks:
            print("üóÑÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ë–î –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True
        
        print(f"üóÑÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(locks)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ë–î –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫:")
        for lock in locks:
            print(f"   - {lock.lock_name}: PID {lock.worker_pid}, –∏—Å—Ç–µ–∫–∞–µ—Ç {lock.expires_at}")
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        expired_locks = SchedulerLock.query.filter(
            SchedulerLock.expires_at < datetime.now()
        ).all()
        
        if expired_locks:
            print(f"üóÑÔ∏è –£–¥–∞–ª—è–µ–º {len(expired_locks)} –∏—Å—Ç–µ–∫—à–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫...")
            for lock in expired_locks:
                db.session.delete(lock)
            db.session.commit()
            print("‚úÖ –ò—Å—Ç–µ–∫—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        active_locks = SchedulerLock.query.filter_by(is_active=True).all()
        if active_locks:
            response = input("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏? (y/N): ")
            if response.lower() == 'y':
                for lock in active_locks:
                    db.session.delete(lock)
                db.session.commit()
                print("‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
            else:
                print("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ë–î –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {e}")
        return False

def show_lock_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    print("üîç –°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫:")
    print("-" * 40)
    
    # –§–∞–π–ª–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    import platform
    if platform.system() == 'Windows':
        lock_file = os.path.join(os.environ.get('TEMP', 'C:\\temp'), 'math_tur_scheduler.lock')
    else:
        lock_file = '/tmp/math_tur_scheduler.lock'
    if os.path.exists(lock_file):
        try:
            with open(lock_file, 'r') as f:
                pid = f.read().strip()
            print(f"üìÅ –§–∞–π–ª–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: PID {pid}")
        except:
            print("üìÅ –§–∞–π–ª–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è")
    else:
        print("üìÅ –§–∞–π–ª–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ë–î –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    try:
        from app import db, SchedulerLock
        locks = SchedulerLock.query.filter_by(is_active=True).all()
        if locks:
            print(f"üóÑÔ∏è –ë–î –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {len(locks)} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            for lock in locks:
                print(f"   - {lock.lock_name}: PID {lock.worker_pid}, –∏—Å—Ç–µ–∫–∞–µ—Ç {lock.expires_at}")
        else:
            print("üóÑÔ∏è –ë–î –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö")
    except Exception as e:
        print(f"üóÑÔ∏è –ë–î –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: –æ—à–∏–±–∫–∞ - {e}")
    
    print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
    print("=" * 40)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    show_lock_status()
    
    # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª–æ–≤—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    print("1. –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...")
    cleanup_file_lock()
    
    # –û—á–∏—â–∞–µ–º –ë–î –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    print("\n2. –û—á–∏—Å—Ç–∫–∞ –ë–î –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫...")
    cleanup_db_locks()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    print("\n3. –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:")
    show_lock_status()
    
    print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == '__main__':
    main()
