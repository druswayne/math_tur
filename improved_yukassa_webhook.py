#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook'–æ–≤ –ÆKassa —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
https://yookassa.ru/developers/using-api/webhooks
"""

import os
import hmac
import hashlib
import json
from datetime import datetime
from flask import request, jsonify
from yukassa_service import yukassa_service

def verify_yukassa_webhook_signature(body, signature, webhook_secret):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å webhook'–∞ –æ—Ç –ÆKassa —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    
    Args:
        body (str): –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        signature (str): –ü–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-YooKassa-Signature
        webhook_secret (str): –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–µ—Ä–Ω–∞
    """
    try:
        if not webhook_secret:
            print("‚ö†Ô∏è  Webhook secret –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏")
            return True
        
        # –í—ã—á–∏—Å–ª—è–µ–º HMAC-SHA256 –ø–æ–¥–ø–∏—Å—å
        expected_signature = hmac.new(
            webhook_secret.encode('utf-8'),
            body.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π
        return hmac.compare_digest(signature, expected_signature)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∏: {e}")
        return False

def process_yukassa_webhook(webhook_token):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook'–æ–≤ –æ—Ç –ÆKassa —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    
    Args:
        webhook_token (str): –¢–æ–∫–µ–Ω –∏–∑ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    Returns:
        tuple: (response_data, status_code)
    """
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    expected_token = os.environ.get('YUKASSA_WEBHOOK_TOKEN')
    if webhook_token != expected_token:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π webhook —Ç–æ–∫–µ–Ω. –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_token}, –ø–æ–ª—É—á–µ–Ω–æ: {webhook_token}")
        return jsonify({'error': 'Invalid webhook token'}), 403
    
    try:
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        body = request.get_data(as_text=True)
        if not body:
            print("‚ùå –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ webhook'–∞")
            return jsonify({'error': 'Empty request body'}), 400
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
        print("‚ÑπÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        
        # 4. –ü–∞—Ä—Å–∏–Ω–≥ JSON –¥–∞–Ω–Ω—ã—Ö
        try:
            data = json.loads(body)
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return jsonify({'error': 'Invalid JSON'}), 400
        
        # 5. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        if not isinstance(data, dict):
            print("‚ùå –î–∞–Ω–Ω—ã–µ webhook'–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
            return jsonify({'error': 'Invalid data structure'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        event_type = data.get('event')
        object_data = data.get('object')
        
        if not event_type:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'event' –≤ webhook'–µ")
            return jsonify({'error': 'Missing event field'}), 400
        
        if not object_data or not isinstance(object_data, dict):
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—è 'object'")
            return jsonify({'error': 'Missing or invalid object field'}), 400
        
        # 6. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ webhook'–∞
        print(f"üì® –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç –ÆKassa:")
        print(f"   - –°–æ–±—ã—Ç–∏–µ: {event_type}")
        print(f"   - ID –æ–±—ä–µ–∫—Ç–∞: {object_data.get('id')}")
        print(f"   - –°—Ç–∞—Ç—É—Å: {object_data.get('status')}")
        print(f"   - –°—É–º–º–∞: {object_data.get('amount', {}).get('value')} {object_data.get('amount', {}).get('currency')}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        metadata = object_data.get('metadata', {})
        if metadata:
            print(f"   - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}")
            user_id = metadata.get('user_id')
            purchase_id = metadata.get('purchase_id')
            if user_id:
                print(f"   - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            if purchase_id:
                print(f"   - ID –ø–æ–∫—É–ø–∫–∏: {purchase_id}")
        
        # 7. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        if event_type == 'payment.succeeded':
            return handle_payment_succeeded(object_data)
        elif event_type == 'payment.canceled':
            return handle_payment_canceled(object_data)
        elif event_type == 'payment.waiting_for_capture':
            return handle_payment_waiting_for_capture(object_data)
        elif event_type == 'payment.failed':
            return handle_payment_failed(object_data)
        elif event_type == 'payment.pending':
            return handle_payment_pending(object_data)
        else:
            print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")
            return jsonify({'success': True, 'message': 'Event ignored'}), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook'–∞: {e}")
        return jsonify({'error': 'Internal server error'}), 500

def handle_payment_succeeded(payment_data):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è payment.succeeded
    
    Args:
        payment_data (dict): –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
    
    Returns:
        tuple: (response_data, status_code)
    """
    payment_id = payment_data.get('id')
    status = payment_data.get('status')
    
    print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ succeeded
    if status != 'succeeded':
        print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å–æ–±—ã—Ç–∏—è payment.succeeded: {status}")
        return jsonify({'error': 'Unexpected status'}), 400
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    try:
        payment_info = yukassa_service.get_payment_info(payment_id)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ: {e}")
        return jsonify({'error': 'Failed to get payment info'}), 500
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∫—É–ø–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏, —Ç–∞–∫ –∏ –ø–æ–∫—É–ø–∫–∏ —É—á–∏—Ç–µ–ª–µ–π)
    from app import TicketPurchase, TeacherTicketPurchase, User, Teacher, db
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ–±—ã—á–Ω—ã—Ö –ø–æ–∫—É–ø–∫–∞—Ö
    purchase = TicketPurchase.query.filter_by(payment_id=payment_id).first()
    purchase_type = 'user'
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –ø–æ–∫—É–ø–∫–∞—Ö —É—á–∏—Ç–µ–ª–µ–π
    if not purchase:
        purchase = TeacherTicketPurchase.query.filter_by(payment_id=payment_id).first()
        purchase_type = 'teacher'
    
    if not purchase:
        print(f"‚ùå –ü–æ–∫—É–ø–∫–∞ —Å payment_id {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return jsonify({'error': 'Purchase not found'}), 404
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata = payment_data.get('metadata', {})
    if metadata:
        expected_user_id = metadata.get('user_id')
        expected_teacher_id = metadata.get('teacher_id')
        expected_purchase_id = metadata.get('purchase_id')
        
        if purchase_type == 'user' and expected_user_id and str(purchase.user_id) != expected_user_id:
            print(f"‚ö†Ô∏è  –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_user_id}, –Ω–∞–π–¥–µ–Ω–æ {purchase.user_id}")
        elif purchase_type == 'teacher' and expected_teacher_id and str(purchase.teacher_id) != expected_teacher_id:
            print(f"‚ö†Ô∏è  –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID —É—á–∏—Ç–µ–ª—è: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_teacher_id}, –Ω–∞–π–¥–µ–Ω–æ {purchase.teacher_id}")
        
        if expected_purchase_id and str(purchase.id) != expected_purchase_id:
            print(f"‚ö†Ô∏è  –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID –ø–æ–∫—É–ø–∫–∏: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_purchase_id}, –Ω–∞–π–¥–µ–Ω–æ {purchase.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂
    if purchase.payment_status == 'succeeded':
        print(f"‚ö†Ô∏è  –ü–ª–∞—Ç–µ–∂ {payment_id} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        return jsonify({'success': True, 'message': 'Payment already processed'}), 200
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –∂–µ—Ç–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ —É—á–∏—Ç–µ–ª—é
    if purchase_type == 'user':
        user = User.query.get(purchase.user_id)
        if user:
            old_tickets = user.tickets
            user.tickets += purchase.quantity
            purchase.payment_status = 'succeeded'
            purchase.payment_confirmed_at = datetime.now()
            
            db.session.commit()
            
            print(f"üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ {purchase.quantity} –∂–µ—Ç–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
            print(f"   - –ë—ã–ª–æ: {old_tickets}, —Å—Ç–∞–ª–æ: {user.tickets}")
            
            return jsonify({
                'success': True,
                'message': 'Payment processed successfully',
                'tickets_added': purchase.quantity,
                'user_id': user.id,
                'purchase_type': 'user'
            }), 200
        else:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {purchase.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return jsonify({'error': 'User not found'}), 404
    else:  # purchase_type == 'teacher'
        teacher = Teacher.query.get(purchase.teacher_id)
        if teacher:
            old_tickets = teacher.tickets
            teacher.tickets += purchase.quantity
            purchase.payment_status = 'succeeded'
            purchase.payment_confirmed_at = datetime.now()
            
            db.session.commit()
            
            print(f"üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ {purchase.quantity} –∂–µ—Ç–æ–Ω–æ–≤ —É—á–∏—Ç–µ–ª—é {teacher.id}")
            print(f"   - –ë—ã–ª–æ: {old_tickets}, —Å—Ç–∞–ª–æ: {teacher.tickets}")
            
            return jsonify({
                'success': True,
                'message': 'Payment processed successfully',
                'tickets_added': purchase.quantity,
                'teacher_id': teacher.id,
                'purchase_type': 'teacher'
            }), 200
        else:
            print(f"‚ùå –£—á–∏—Ç–µ–ª—å {purchase.teacher_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return jsonify({'error': 'Teacher not found'}), 404

def handle_payment_canceled(payment_data):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è payment.canceled
    
    Args:
        payment_data (dict): –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
    
    Returns:
        tuple: (response_data, status_code)
    """
    payment_id = payment_data.get('id')
    print(f"‚ùå –ü–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏, —Ç–∞–∫ –∏ –ø–æ–∫—É–ø–∫–∏ —É—á–∏—Ç–µ–ª–µ–π)
    from app import TicketPurchase, TeacherTicketPurchase, db
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ–±—ã—á–Ω—ã—Ö –ø–æ–∫—É–ø–∫–∞—Ö
    purchase = TicketPurchase.query.filter_by(payment_id=payment_id).first()
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –ø–æ–∫—É–ø–∫–∞—Ö —É—á–∏—Ç–µ–ª–µ–π
    if not purchase:
        purchase = TeacherTicketPurchase.query.filter_by(payment_id=payment_id).first()
    
    if purchase:
        purchase.payment_status = 'canceled'
        db.session.commit()
        print(f"üìù –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'canceled'")
    
    return jsonify({'success': True, 'message': 'Payment canceled'}), 200

def handle_payment_waiting_for_capture(payment_data):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è payment.waiting_for_capture
    
    Args:
        payment_data (dict): –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
    
    Returns:
        tuple: (response_data, status_code)
    """
    payment_id = payment_data.get('id')
    print(f"‚è≥ –ü–ª–∞—Ç–µ–∂ {payment_id} –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏, —Ç–∞–∫ –∏ –ø–æ–∫—É–ø–∫–∏ —É—á–∏—Ç–µ–ª–µ–π)
    from app import TicketPurchase, TeacherTicketPurchase, db
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ–±—ã—á–Ω—ã—Ö –ø–æ–∫—É–ø–∫–∞—Ö
    purchase = TicketPurchase.query.filter_by(payment_id=payment_id).first()
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –ø–æ–∫—É–ø–∫–∞—Ö —É—á–∏—Ç–µ–ª–µ–π
    if not purchase:
        purchase = TeacherTicketPurchase.query.filter_by(payment_id=payment_id).first()
    
    if purchase:
        purchase.payment_status = 'waiting_for_capture'
        db.session.commit()
        print(f"üìù –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'waiting_for_capture'")
    
    return jsonify({'success': True, 'message': 'Payment waiting for capture'}), 200

def handle_payment_failed(payment_data):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è payment.failed
    
    Args:
        payment_data (dict): –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
    
    Returns:
        tuple: (response_data, status_code)
    """
    payment_id = payment_data.get('id')
    print(f"üí• –ü–ª–∞—Ç–µ–∂ {payment_id} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏, —Ç–∞–∫ –∏ –ø–æ–∫—É–ø–∫–∏ —É—á–∏—Ç–µ–ª–µ–π)
    from app import TicketPurchase, TeacherTicketPurchase, db
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ–±—ã—á–Ω—ã—Ö –ø–æ–∫—É–ø–∫–∞—Ö
    purchase = TicketPurchase.query.filter_by(payment_id=payment_id).first()
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –ø–æ–∫—É–ø–∫–∞—Ö —É—á–∏—Ç–µ–ª–µ–π
    if not purchase:
        purchase = TeacherTicketPurchase.query.filter_by(payment_id=payment_id).first()
    
    if purchase:
        purchase.payment_status = 'failed'
        db.session.commit()
        print(f"üìù –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'failed'")
    
    return jsonify({'success': True, 'message': 'Payment failed'}), 200

def handle_payment_pending(payment_data):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è payment.pending
    
    Args:
        payment_data (dict): –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
    
    Returns:
        tuple: (response_data, status_code)
    """
    payment_id = payment_data.get('id')
    print(f"‚è∞ –ü–ª–∞—Ç–µ–∂ {payment_id} –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏, —Ç–∞–∫ –∏ –ø–æ–∫—É–ø–∫–∏ —É—á–∏—Ç–µ–ª–µ–π)
    from app import TicketPurchase, TeacherTicketPurchase, db
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ–±—ã—á–Ω—ã—Ö –ø–æ–∫—É–ø–∫–∞—Ö
    purchase = TicketPurchase.query.filter_by(payment_id=payment_id).first()
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –ø–æ–∫—É–ø–∫–∞—Ö —É—á–∏—Ç–µ–ª–µ–π
    if not purchase:
        purchase = TeacherTicketPurchase.query.filter_by(payment_id=payment_id).first()
    
    if purchase:
        purchase.payment_status = 'pending'
        db.session.commit()
        print(f"üìù –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'pending'")
    
    return jsonify({'success': True, 'message': 'Payment pending'}), 200

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
"""
@app.route('/webhook/yukassa/<webhook_token>', methods=['POST'])
def yukassa_webhook(webhook_token):
    return process_yukassa_webhook(webhook_token)
"""
