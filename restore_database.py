#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
python restore_database.py restore backup_school_tournaments_20250828_002103.zip
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–µ–∫–∞–ø–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ psql
"""

import os
import sys
import zipfile
import logging
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class DatabaseRestoreService:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.backup_dir = Path("backups")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ë–î
        self.db_host = "193.47.42.117"
        self.db_port = "5432"
        self.db_name = "school_tournaments"
        self.db_user = "admin"
        self.db_password = "S3cureP@ssw0rd!"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SSH
        self.ssh_host = os.environ.get('SSH_HOST', self.db_host)
        self.ssh_user = os.environ.get('SSH_USER', 'root')
        self.ssh_password = os.environ.get('SSH_PASSWORD')
        self.ssh_key_path = os.environ.get('SSH_KEY_PATH')
    
    def list_available_backups(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ–∫–∞–ø–æ–≤"""
        if not self.backup_dir.exists():
            logger.error("‚ùå –ü–∞–ø–∫–∞ backups –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return []
        
        backup_files = list(self.backup_dir.glob("backup_*.zip"))
        backup_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
        
        if not backup_files:
            logger.info("üì≠ –ë–µ–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []
        
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(backup_files)} –±–µ–∫–∞–ø–æ–≤:")
        for i, backup_file in enumerate(backup_files[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            stat = backup_file.stat()
            size_mb = stat.st_size / (1024 * 1024)
            created_at = datetime.fromtimestamp(stat.st_mtime).strftime('%d.%m.%Y %H:%M:%S')
            logger.info(f"  {i}. {backup_file.name} ({size_mb:.2f} MB) - {created_at}")
        
        return backup_files
    
    def extract_backup(self, backup_path):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç SQL —Ñ–∞–π–ª –∏–∑ ZIP –∞—Ä—Ö–∏–≤–∞"""
        try:
            with zipfile.ZipFile(backup_path, 'r') as zipf:
                # –ò—â–µ–º SQL —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤–µ
                sql_files = [f for f in zipf.namelist() if f.endswith('.sql')]
                if not sql_files:
                    logger.error("‚ùå SQL —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ")
                    return None
                
                sql_filename = sql_files[0]
                extracted_path = self.backup_dir / f"temp_{sql_filename}"
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª
                with zipf.open(sql_filename) as source, open(extracted_path, 'wb') as target:
                    target.write(source.read())
                
                logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω SQL —Ñ–∞–π–ª: {extracted_path}")
                return extracted_path
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –±–µ–∫–∞–ø–∞: {e}")
            return None
    
    def restore_database_via_ssh(self, sql_file_path):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SSH"""
        try:
            import paramiko
            
            logger.info("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ SSH...")
            
            # –°–æ–∑–¥–∞–µ–º SSH –∫–ª–∏–µ–Ω—Ç
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
            if self.ssh_key_path and os.path.exists(self.ssh_key_path):
                ssh.connect(
                    self.ssh_host,
                    username=self.ssh_user,
                    key_filename=self.ssh_key_path
                )
            else:
                ssh.connect(
                    self.ssh_host,
                    username=self.ssh_user,
                    password=self.ssh_password
                )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º SQL —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            remote_sql_path = f"/tmp/restore_{datetime.now().strftime('%Y%m%d_%H%M%S')}.sql"
            logger.info(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ SQL —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {remote_sql_path}")
            
            sftp = ssh.open_sftp()
            sftp.put(str(sql_file_path), remote_sql_path)
            sftp.close()
            
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
            restore_command = f"""
                export PGPASSWORD='{self.db_password}'
                psql -h {self.db_host} -p {self.db_port} -U {self.db_user} -d {self.db_name} -f {remote_sql_path}
            """
            
            logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
            logger.warning("‚ö†Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ!")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ? (yes/no): ").lower().strip()
            if confirm != 'yes':
                logger.info("‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞
                ssh.exec_command(f"rm -f {remote_sql_path}")
                ssh.close()
                return False
            
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            stdin, stdout, stderr = ssh.exec_command(restore_command)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            exit_status = stdout.channel.recv_exit_status()
            
            if exit_status != 0:
                error_output = stderr.read().decode('utf-8')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {error_output}")
                return False
            
            # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã
            output = stdout.read().decode('utf-8')
            logger.info("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìä –í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: {output}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞
            ssh.exec_command(f"rm -f {remote_sql_path}")
            ssh.close()
            
            return True
            
        except ImportError:
            logger.error("‚ùå –ú–æ–¥—É–ª—å paramiko –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install paramiko")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ SSH: {e}")
            return False
    
    def cleanup_temp_files(self, temp_file_path):
        """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        try:
            if temp_file_path and temp_file_path.exists():
                temp_file_path.unlink()
                logger.info(f"üßπ –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file_path}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
    
    def restore_from_backup(self, backup_filename=None):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±–µ–∫–∞–ø–∞"""
        try:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            if not backup_filename:
                backup_files = self.list_available_backups()
                if not backup_files:
                    return False
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –±–µ–∫–∞–ø–∞
                try:
                    choice = int(input(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –±–µ–∫–∞–ø–∞ (1-{min(len(backup_files), 10)}): ")) - 1
                    if 0 <= choice < len(backup_files):
                        backup_path = backup_files[choice]
                    else:
                        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±–µ–∫–∞–ø–∞")
                        return False
                except ValueError:
                    logger.error("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
                    return False
            else:
                backup_path = self.backup_dir / backup_filename
                if not backup_path.exists():
                    logger.error(f"‚ùå –§–∞–π–ª –±–µ–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_path}")
                    return False
            
            logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±–µ–∫–∞–ø–∞: {backup_path.name}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º SQL —Ñ–∞–π–ª
            sql_file_path = self.extract_backup(backup_path)
            if not sql_file_path:
                return False
            
            try:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ë–î
                success = self.restore_database_via_ssh(sql_file_path)
                return success
            finally:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                self.cleanup_temp_files(sql_file_path)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            return False

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python restore_database.py list                    - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø–æ–≤")
        print("  python restore_database.py restore                 - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞")
        print("  python restore_database.py restore <filename>      - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        print("  python restore_database.py help                    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
        sys.exit(1)
    
    command = sys.argv[1]
    restore_service = DatabaseRestoreService()
    
    if command == "list":
        restore_service.list_available_backups()
        sys.exit(0)
        
    elif command == "restore":
        backup_filename = sys.argv[2] if len(sys.argv) > 2 else None
        success = restore_service.restore_from_backup(backup_filename)
        sys.exit(0 if success else 1)
        
    elif command == "help":
        print("–°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–µ–∫–∞–ø–∞")
        print("\n–ö–æ–º–∞–Ω–¥—ã:")
        print("  list     - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ–∫–∞–ø–æ–≤")
        print("  restore  - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–µ–∫–∞–ø–∞")
        print("  help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
        print("\n–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python restore_database.py list")
        print("  python restore_database.py restore")
        print("  python restore_database.py restore backup_school_tournaments_20241201_020000.zip")
        sys.exit(0)
        
    else:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'python restore_database.py help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
        sys.exit(1)

if __name__ == "__main__":
    main()
