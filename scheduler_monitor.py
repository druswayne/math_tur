#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import os
import time
import psutil
from datetime import datetime

def check_scheduler_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    print(f"üïê {datetime.now().strftime('%H:%M:%S')} - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    lock_file = '/tmp/math_tur_scheduler.lock'
    if os.path.exists(lock_file):
        try:
            with open(lock_file, 'r') as f:
                pid = int(f.read().strip())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            if psutil.pid_exists(pid):
                process = psutil.Process(pid)
                print(f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω: PID {pid}, CPU: {process.cpu_percent():.1f}%")
                return True
            else:
                print(f"‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ù–ï –∞–∫—Ç–∏–≤–µ–Ω: PID {pid} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    else:
        print("‚ùå –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def check_gunicorn_workers():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ—Ä–∫–µ—Ä—ã Gunicorn"""
    workers = []
    
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if 'gunicorn' in proc.info['name'] and 'worker' in ' '.join(proc.info['cmdline']):
                workers.append({
                    'pid': proc.info['pid'],
                    'cpu': proc.cpu_percent(),
                    'memory': proc.memory_percent()
                })
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass
    
    print(f"üë∑ –ù–∞–π–¥–µ–Ω–æ {len(workers)} –≤–æ—Ä–∫–µ—Ä–æ–≤ Gunicorn:")
    for worker in workers:
        print(f"   PID {worker['pid']}: CPU {worker['cpu']:.1f}%, Memory {worker['memory']:.1f}%")
    
    return workers

def check_db_locks():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ë–î –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    try:
        from app import db, SchedulerLock
        locks = SchedulerLock.query.filter_by(is_active=True).all()
        
        if locks:
            print(f"üóÑÔ∏è –ë–î –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {len(locks)} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            for lock in locks:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                if psutil.pid_exists(lock.worker_pid):
                    status = "‚úÖ –∞–∫—Ç–∏–≤–µ–Ω"
                else:
                    status = "‚ùå –ø—Ä–æ—Ü–µ—Å—Å –º–µ—Ä—Ç–≤"
                print(f"   {lock.lock_name}: PID {lock.worker_pid} ({status}), –∏—Å—Ç–µ–∫–∞–µ—Ç {lock.expires_at}")
        else:
            print("üóÑÔ∏è –ë–î –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            
    except Exception as e:
        print(f"üóÑÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {e}")

def monitor_scheduler():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    print("=" * 60)
    
    try:
        while True:
            # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω (–¥–ª—è Unix/Linux)
            if os.name != 'nt':
                os.system('clear')
            
            print("üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê")
            print("=" * 60)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            scheduler_active = check_scheduler_status()
            print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Ä–∫–µ—Ä—ã
            workers = check_gunicorn_workers()
            print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            use_db_lock = os.environ.get('USE_DB_LOCK', 'false').lower() == 'true'
            if use_db_lock:
                check_db_locks()
                print()
            
            # –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            if scheduler_active:
                print("üü¢ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            else:
                print("üî¥ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ù–ï –∞–∫—Ç–∏–≤–µ–Ω!")
                print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            
            print("=" * 60)
            print(f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            
            time.sleep(10)
            
    except KeyboardInterrupt:
        print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    monitor_scheduler()
