#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ Flask-Limiter –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import os
import sys
import time
import psutil
import gc
import threading
from datetime import datetime, timedelta
from flask import Flask, request
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
import json

class RateLimiterMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ Flask-Limiter"""
    
    def __init__(self, app, limiter):
        self.app = app
        self.limiter = limiter
        self.monitoring = False
        self.metrics = {
            'memory_usage': [],
            'unique_ips': [],
            'requests_per_second': [],
            'rate_limit_exceeded': 0,
            'start_time': datetime.now()
        }
        
    def start_monitoring(self, interval=5):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.monitoring = True
        self.monitor_thread = threading.Thread(target=self._monitor_loop, args=(interval,), daemon=True)
        self.monitor_thread.start()
        print(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫)")
        
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.monitoring = False
        print("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    def _monitor_loop(self, interval):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.monitoring:
            try:
                self._collect_metrics()
                time.sleep(interval)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                
    def _collect_metrics(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏"""
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        process = psutil.Process(os.getpid())
        memory_mb = process.memory_info().rss / 1024 / 1024
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        unique_ips = self._get_unique_ips_count()
        
        # –ó–∞–ø—Ä–æ—Å—ã –≤ —Å–µ–∫—É–Ω–¥—É (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        requests_per_second = self._get_requests_per_second()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        timestamp = datetime.now()
        self.metrics['memory_usage'].append({
            'timestamp': timestamp.isoformat(),
            'memory_mb': memory_mb
        })
        
        if unique_ips is not None:
            self.metrics['unique_ips'].append({
                'timestamp': timestamp.isoformat(),
                'count': unique_ips
            })
            
        self.metrics['requests_per_second'].append({
            'timestamp': timestamp.isoformat(),
            'rps': requests_per_second
        })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
        self._check_thresholds(memory_mb, unique_ips)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (—Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π)
        for key in ['memory_usage', 'unique_ips', 'requests_per_second']:
            if len(self.metrics[key]) > 1000:
                self.metrics[key] = self.metrics[key][-1000:]
                
    def _get_unique_ips_count(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ storage
            if hasattr(self.limiter, 'storage') and hasattr(self.limiter.storage, 'storage'):
                return len(self.limiter.storage.storage)
        except:
            pass
        return None
        
    def _get_requests_per_second(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
        return len(self.metrics['requests_per_second']) / max(1, (datetime.now() - self.metrics['start_time']).total_seconds())
        
    def _check_thresholds(self, memory_mb, unique_ips):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ä–æ–≥–∏ –∏ –≤—ã–¥–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        warnings = []
        
        if memory_mb > 500:
            warnings.append(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü–∞–º—è—Ç—å {memory_mb:.2f} –ú–ë > 500 –ú–ë")
        elif memory_mb > 100:
            warnings.append(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü–∞–º—è—Ç—å {memory_mb:.2f} –ú–ë > 100 –ú–ë")
            
        if unique_ips and unique_ips > 50000:
            warnings.append(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP {unique_ips:,} > 50,000")
        elif unique_ips and unique_ips > 10000:
            warnings.append(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP {unique_ips:,} > 10,000")
            
        for warning in warnings:
            print(f"[{datetime.now().strftime('%H:%M:%S')}] {warning}")
            
    def get_current_stats(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not self.metrics['memory_usage']:
            return None
            
        latest_memory = self.metrics['memory_usage'][-1]
        latest_ips = self.metrics['unique_ips'][-1] if self.metrics['unique_ips'] else None
        latest_rps = self.metrics['requests_per_second'][-1] if self.metrics['requests_per_second'] else None
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã
        memory_trend = self._calculate_trend('memory_usage', 'memory_mb')
        ips_trend = self._calculate_trend('unique_ips', 'count') if self.metrics['unique_ips'] else None
        
        return {
            'current_memory_mb': latest_memory['memory_mb'],
            'memory_trend': memory_trend,
            'unique_ips': latest_ips['count'] if latest_ips else None,
            'ips_trend': ips_trend,
            'requests_per_second': latest_rps['rps'] if latest_rps else None,
            'rate_limit_exceeded': self.metrics['rate_limit_exceeded'],
            'uptime_seconds': (datetime.now() - self.metrics['start_time']).total_seconds()
        }
        
    def _calculate_trend(self, metric_key, value_key):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥ –º–µ—Ç—Ä–∏–∫–∏"""
        if len(self.metrics[metric_key]) < 2:
            return 0
            
        recent = self.metrics[metric_key][-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π
        if len(recent) < 2:
            return 0
            
        first_value = recent[0][value_key]
        last_value = recent[-1][value_key]
        
        if first_value == 0:
            return 0
            
        return ((last_value - first_value) / first_value) * 100
        
    def print_current_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = self.get_current_stats()
        if not stats:
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        print("\n" + "="*60)
        print("üìä –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê RATE LIMITER")
        print("="*60)
        print(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {stats['current_memory_mb']:.2f} –ú–ë")
        
        if stats['memory_trend'] is not None:
            trend_icon = "üìà" if stats['memory_trend'] > 0 else "üìâ" if stats['memory_trend'] < 0 else "‚û°Ô∏è"
            print(f"   {trend_icon} –¢—Ä–µ–Ω–¥ –ø–∞–º—è—Ç–∏: {stats['memory_trend']:+.2f}%")
            
        if stats['unique_ips'] is not None:
            print(f"üåê –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP: {stats['unique_ips']:,}")
            
        if stats['ips_trend'] is not None:
            trend_icon = "üìà" if stats['ips_trend'] > 0 else "üìâ" if stats['ips_trend'] < 0 else "‚û°Ô∏è"
            print(f"   {trend_icon} –¢—Ä–µ–Ω–¥ IP: {stats['ips_trend']:+.2f}%")
            
        if stats['requests_per_second'] is not None:
            print(f"üöÄ –ó–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫: {stats['requests_per_second']:.2f}")
            
        print(f"üö´ Rate limit exceeded: {stats['rate_limit_exceeded']}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats['uptime_seconds']:.0f} —Å–µ–∫")
        print("="*60)
        
    def save_metrics_to_file(self, filename=None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–∞–π–ª"""
        if filename is None:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"rate_limiter_metrics_{timestamp}.json"
            
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.metrics, f, indent=2, ensure_ascii=False)
            print(f"üíæ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")

def create_test_app():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    app = Flask(__name__)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º rate limiter
    limiter = Limiter(
        get_remote_address,
        app=app,
        default_limits=["100 per minute"],
        strategy="fixed-window",
        key_prefix="test_rate_limit"
    )
    
    @app.route('/test')
    @limiter.limit("10 per minute")
    def test_endpoint():
        return {"message": "test", "timestamp": datetime.now().isoformat()}
        
    @app.route('/stats')
    def stats_endpoint():
        return {"message": "stats endpoint"}
        
    return app, limiter

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ Flask-Limiter")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app, limiter = create_test_app()
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor = RateLimiterMonitor(app, limiter)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor.start_monitoring(interval=5)
    
    try:
        print("\nüìã –ö–æ–º–∞–Ω–¥—ã:")
        print("   'stats' - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("   'save' - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–∞–π–ª")
        print("   'quit' - –≤—ã–π—Ç–∏")
        print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
        
        while True:
            command = input("> ").strip().lower()
            
            if command == 'stats':
                monitor.print_current_stats()
            elif command == 'save':
                monitor.save_metrics_to_file()
            elif command == 'quit':
                break
            else:
                print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: stats, save, quit")
                
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C...")
    finally:
        monitor.stop_monitoring()
        monitor.save_metrics_to_file()
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    main()
