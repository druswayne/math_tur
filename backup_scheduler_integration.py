#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∫–∞–ø–æ–≤ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º APScheduler
–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import os
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ .env —Ñ–∞–π–ª–∞
load_dotenv()

logger = logging.getLogger(__name__)

def create_database_backup():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞ –ë–î
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ APScheduler
    """
    try:
        from remote_backup_service import RemoteBackupService
        
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞ –ë–î...")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∫–∞–ø–æ–≤
        backup_service = RemoteBackupService()
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∫–∞–ø
        success = backup_service.create_backup()
        
        if success:
            logger.info("‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–µ–∫–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞")
            
        return success
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–µ–∫–∞–ø–∞: {e}")
        return False

def add_backup_job_to_scheduler(scheduler, app):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    """
    try:
        from app import add_scheduler_job
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        backup_hour = int(os.environ.get('BACKUP_TIME_HOUR',))
        backup_minute = int(os.environ.get('BACKUP_TIME_MINUTE',))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞ –±–µ–∫–∞–ø–∞
        from app import SchedulerJob
        existing_backup_job = SchedulerJob.query.filter_by(
            job_type='database_backup',
            is_active=True
        ).first()
        
        if existing_backup_job:
            logger.info("üìÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ")
            return True
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (—Å–µ–≥–æ–¥–Ω—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è)
        now = datetime.now()
        first_run = now.replace(hour=backup_hour, minute=backup_minute, second=0, microsecond=0)
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≤—Ç—Ä–∞
        if first_run <= now:
            first_run += timedelta(days=1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        add_scheduler_job(
            create_database_backup,
            first_run,
            None,  # tournament_id –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –±–µ–∫–∞–ø–æ–≤
            'database_backup',
            interval_hours=24  # –ü–æ–≤—Ç–æ—Ä—è—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        )
        
        logger.info(f"üìÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫. –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: {first_run}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –±–µ–∫–∞–ø–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {e}")
        return False

def remove_backup_job_from_scheduler():
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    """
    try:
        from app import SchedulerJob, db
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –±–µ–∫–∞–ø–∞
        backup_jobs = SchedulerJob.query.filter_by(
            job_type='database_backup',
            is_active=True
        ).all()
        
        for job in backup_jobs:
            job.is_active = False
            logger.info(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ –±–µ–∫–∞–ø–∞ {job.job_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        
        db.session.commit()
        logger.info(f"üìÖ –£–¥–∞–ª–µ–Ω–æ {len(backup_jobs)} –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –±–µ–∫–∞–ø–∞: {e}")
        return False

def test_backup_service():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –±–µ–∫–∞–ø–æ–≤
    """
    try:
        from remote_backup_service import RemoteBackupService
        
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∫–∞–ø–æ–≤...")
        
        backup_service = RemoteBackupService()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞
        success = backup_service.create_backup()
        
        if success:
            logger.info("‚úÖ –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∫–∞–ø–æ–≤ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚ùå –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∫–∞–ø–æ–≤ –Ω–µ –ø—Ä–æ—à–µ–ª")
            
        return success
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∫–∞–ø–æ–≤: {e}")
        return False

def get_backup_status():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±–µ–∫–∞–ø–æ–≤
    """
    try:
        from pathlib import Path
        from datetime import datetime
        
        backup_dir = Path("backups")
        if not backup_dir.exists():
            return {"status": "no_backups", "message": "–ü–∞–ø–∫–∞ –±–µ–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –±–µ–∫–∞–ø–æ–≤
        backup_files = list(backup_dir.glob("backup_*.zip"))
        
        if not backup_files:
            return {"status": "no_backups", "message": "–ë–µ–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        backup_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±–µ–∫–∞–ø–∞—Ö
        recent_backups = []
        for backup_file in backup_files[:5]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –±–µ–∫–∞–ø–æ–≤
            stat = backup_file.stat()
            backup_info = {
                "filename": backup_file.name,
                "size_mb": round(stat.st_size / (1024 * 1024), 2),
                "created_at": datetime.fromtimestamp(stat.st_mtime).strftime('%d.%m.%Y %H:%M:%S'),
                "age_hours": round((datetime.now().timestamp() - stat.st_mtime) / 3600, 1)
            }
            recent_backups.append(backup_info)
        
        return {
            "status": "success",
            "total_backups": len(backup_files),
            "recent_backups": recent_backups,
            "backup_dir": str(backup_dir.absolute())
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∫–∞–ø–æ–≤: {e}")
        return {"status": "error", "message": str(e)}

def main():
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∫–∞–ø–∞–º–∏
    """
    import sys
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python backup_scheduler_integration.py test     - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –±–µ–∫–∞–ø–æ–≤")
        print("  python backup_scheduler_integration.py status   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–µ–∫–∞–ø–æ–≤")
        print("  python backup_scheduler_integration.py create   - –°–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø —Å–µ–π—á–∞—Å")
        print("  python backup_scheduler_integration.py add      - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
        print("  python backup_scheduler_integration.py remove   - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command == "test":
        success = test_backup_service()
        sys.exit(0 if success else 1)
        
    elif command == "status":
        status = get_backup_status()
        print(f"–°—Ç–∞—Ç—É—Å –±–µ–∫–∞–ø–æ–≤: {status}")
        sys.exit(0)
        
    elif command == "create":
        success = create_database_backup()
        sys.exit(0 if success else 1)
        
    elif command == "add":
        # –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        print("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é add_backup_job_to_scheduler()")
        sys.exit(0)
        
    elif command == "remove":
        success = remove_backup_job_from_scheduler()
        sys.exit(0 if success else 1)
        
    else:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        sys.exit(1)

if __name__ == "__main__":
    main()
