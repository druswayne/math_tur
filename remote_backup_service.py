#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –±–µ–∫–∞–ø–æ–≤ PostgreSQL
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –ë–î –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è pg_dump
"""

import os
import sys
import time
import zipfile
import logging
from datetime import datetime, timedelta
from pathlib import Path
import subprocess
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('backup_service.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class RemoteBackupService:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∫–∞–ø–æ–≤"""
        self.backup_dir = Path("backups")
        self.backup_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ë–î
        self.db_host = "193.47.42.117"
        self.db_port = "5432"
        self.db_name = "school_tournaments"
        self.db_user = "admin"
        self.db_password = "S3cureP@ssw0rd!"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SSH (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        self.ssh_host = os.environ.get('SSH_HOST', self.db_host)
        self.ssh_user = os.environ.get('SSH_USER', 'root')
        self.ssh_password = os.environ.get('SSH_PASSWORD')
        self.ssh_key_path = os.environ.get('SSH_KEY_PATH')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ email
        self.email_enabled = os.environ.get('BACKUP_EMAIL_ENABLED', 'true').lower() == 'true'
        self.email_recipients = os.environ.get('BACKUP_EMAIL_RECIPIENTS', '').split(',')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—Ç–∞—Ü–∏–∏
        self.keep_days = int(os.environ.get('BACKUP_KEEP_DAYS', '7'))
        self.max_backup_size_mb = int(os.environ.get('BACKUP_MAX_SIZE_MB', '100'))
        
    def create_backup_filename(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –±–µ–∫–∞–ø–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        return f"backup_school_tournaments_{timestamp}.sql"
    
    def create_backup_using_ssh(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–µ–∫–∞–ø —á–µ—Ä–µ–∑ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        try:
            import paramiko
            
            logger.info("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ SSH...")
            
            # –°–æ–∑–¥–∞–µ–º SSH –∫–ª–∏–µ–Ω—Ç
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
            if self.ssh_key_path and os.path.exists(self.ssh_key_path):
                ssh.connect(
                    self.ssh_host,
                    username=self.ssh_user,
                    key_filename=self.ssh_key_path
                )
            else:
                ssh.connect(
                    self.ssh_host,
                    username=self.ssh_user,
                    password=self.ssh_password
                )
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –±–µ–∫–∞–ø–∞
            backup_filename = self.create_backup_filename()
            remote_backup_path = f"/tmp/{backup_filename}"
            
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            pg_dump_command = f"""
                export PGPASSWORD='{self.db_password}'
                pg_dump -h {self.db_host} -p {self.db_port} -U {self.db_user} -d {self.db_name} \
                    --verbose --no-password --clean --if-exists --create > {remote_backup_path}
            """
            
            logger.info("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
            stdin, stdout, stderr = ssh.exec_command(pg_dump_command)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            exit_status = stdout.channel.recv_exit_status()
            
            if exit_status != 0:
                error_output = stderr.read().decode('utf-8')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞: {error_output}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            stdin, stdout, stderr = ssh.exec_command(f"ls -lh {remote_backup_path}")
            file_info = stdout.read().decode('utf-8').strip()
            logger.info(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: {file_info}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞
            local_backup_path = self.backup_dir / backup_filename
            logger.info(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞: {local_backup_path}")
            
            sftp = ssh.open_sftp()
            sftp.get(remote_backup_path, str(local_backup_path))
            sftp.close()
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞
            ssh.exec_command(f"rm -f {remote_backup_path}")
            
            ssh.close()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            file_size_mb = local_backup_path.stat().st_size / (1024 * 1024)
            logger.info(f"‚úÖ –ë–µ–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {local_backup_path} ({file_size_mb:.2f} MB)")
            
            return local_backup_path
            
        except ImportError:
            logger.error("‚ùå –ú–æ–¥—É–ª—å paramiko –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install paramiko")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–µ–∫–∞–ø–∞ —á–µ—Ä–µ–∑ SSH: {e}")
            return None
    
    def create_backup_using_psql(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–µ–∫–∞–ø –∏—Å–ø–æ–ª—å–∑—É—è psql (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ)"""
        try:
            backup_filename = self.create_backup_filename()
            local_backup_path = self.backup_dir / backup_filename
            
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞
            cmd = [
                'pg_dump',
                '-h', self.db_host,
                '-p', self.db_port,
                '-U', self.db_user,
                '-d', self.db_name,
                '--verbose',
                '--clean',
                '--if-exists',
                '--create'
            ]
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env = os.environ.copy()
            env['PGPASSWORD'] = self.db_password
            
            logger.info("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞ —á–µ—Ä–µ–∑ pg_dump...")
            
            with open(local_backup_path, 'w', encoding='utf-8') as f:
                result = subprocess.run(
                    cmd,
                    stdout=f,
                    stderr=subprocess.PIPE,
                    env=env,
                    text=True
                )
            
            if result.returncode != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞: {result.stderr}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size_mb = local_backup_path.stat().st_size / (1024 * 1024)
            logger.info(f"‚úÖ –ë–µ–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {local_backup_path} ({file_size_mb:.2f} MB)")
            
            return local_backup_path
            
        except FileNotFoundError:
            logger.error("‚ùå pg_dump –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL –∫–ª–∏–µ–Ω—Ç.")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–µ–∫–∞–ø–∞: {e}")
            return None
    
    def compress_backup(self, backup_path):
        """–°–∂–∏–º–∞–µ—Ç –±–µ–∫–∞–ø –≤ ZIP –∞—Ä—Ö–∏–≤"""
        try:
            zip_path = backup_path.with_suffix('.zip')
            
            with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                zipf.write(backup_path, backup_path.name)
            
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
            backup_path.unlink()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
            compressed_size_mb = zip_path.stat().st_size / (1024 * 1024)
            logger.info(f"üóúÔ∏è –ë–µ–∫–∞–ø —Å–∂–∞—Ç: {zip_path} ({compressed_size_mb:.2f} MB)")
            
            return zip_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –±–µ–∫–∞–ø–∞: {e}")
            return backup_path
    
    def send_backup_email(self, backup_path):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–µ–∫–∞–ø –Ω–∞ email"""
        if not self.email_enabled or not self.email_recipients:
            logger.info("üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return True
        
        try:
            from flask import Flask
            from flask_mail import Mail, Message
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
            app = Flask(__name__)
            app.config['MAIL_SERVER'] = 'mail.liga-znatokov.by'
            app.config['MAIL_PORT'] = 465
            app.config['MAIL_USE_SSL'] = True
            app.config['MAIL_USE_TLS'] = False
            app.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME')
            app.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD')
            
            mail = Mail(app)
            
            with app.app_context():
                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                subject = f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ë–î - {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                body = f"""
                –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö school_tournaments.
                
                –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
                –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {backup_path.stat().st_size / (1024 * 1024):.2f} MB
                
                –§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –ø–∏—Å—å–º—É.
                """
                
                msg = Message(
                    subject=subject,
                    sender=app.config['MAIL_USERNAME'],
                    recipients=self.email_recipients,
                    body=body
                )
                
                # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª
                with open(backup_path, 'rb') as f:
                    msg.attach(
                        filename=backup_path.name,
                        content_type='application/zip',
                        data=f.read()
                    )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
                mail.send(msg)
                
            logger.info(f"üìß –ë–µ–∫–∞–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {', '.join(self.email_recipients)}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
            return False
    
    def cleanup_old_backups(self):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –±–µ–∫–∞–ø—ã"""
        try:
            cutoff_date = datetime.now() - timedelta(days=self.keep_days)
            deleted_count = 0
            
            for backup_file in self.backup_dir.glob("backup_*.zip"):
                if backup_file.stat().st_mtime < cutoff_date.timestamp():
                    backup_file.unlink()
                    deleted_count += 1
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±–µ–∫–∞–ø: {backup_file.name}")
            
            if deleted_count > 0:
                logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –±–µ–∫–∞–ø–æ–≤")
            else:
                logger.info("üßπ –°—Ç–∞—Ä—ã–µ –±–µ–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –±–µ–∫–∞–ø–æ–≤: {e}")
    
    def validate_backup(self, backup_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–µ–∫–∞–ø–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
            if backup_path.stat().st_size == 0:
                logger.error("‚ùå –ë–µ–∫–∞–ø –ø—É—Å—Ç–æ–π")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size_mb = backup_path.stat().st_size / (1024 * 1024)
            if file_size_mb > self.max_backup_size_mb:
                logger.warning(f"‚ö†Ô∏è –ë–µ–∫–∞–ø —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size_mb:.2f} MB")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π SQL —Ñ–∞–π–ª (–µ—Å–ª–∏ –Ω–µ —Å–∂–∞—Ç)
            if backup_path.suffix == '.sql':
                with open(backup_path, 'r', encoding='utf-8') as f:
                    first_line = f.readline().strip()
                    if not first_line.startswith('--'):
                        logger.warning("‚ö†Ô∏è –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–º SQL –¥–∞–º–ø–æ–º")
            
            logger.info("‚úÖ –ë–µ–∫–∞–ø –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∫–∞–ø–∞: {e}")
            return False
    
    def create_backup(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ë–î...")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø —á–µ—Ä–µ–∑ SSH
        backup_path = self.create_backup_using_ssh()
        
        # –ï—Å–ª–∏ SSH –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ pg_dump
        if not backup_path:
            logger.info("üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø —á–µ—Ä–µ–∑ pg_dump...")
            backup_path = self.create_backup_using_psql()
        
        if not backup_path:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø")
            return False
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –±–µ–∫–∞–ø
        if not self.validate_backup(backup_path):
            backup_path.unlink()
            return False
        
        # –°–∂–∏–º–∞–µ–º –±–µ–∫–∞–ø
        compressed_backup = self.compress_backup(backup_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ email
        email_sent = self.send_backup_email(compressed_backup)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±–µ–∫–∞–ø—ã
        self.cleanup_old_backups()
        
        logger.info("üéâ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    service = RemoteBackupService()
    success = service.create_backup()
    
    if success:
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        sys.exit(0)
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        sys.exit(1)

if __name__ == "__main__":
    main()
