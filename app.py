import psutil
from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, send_file, make_response, send_from_directory
from functools import wraps
import PyPDF2
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter, A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.units import inch
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from sqlalchemy.testing import fails
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timedelta
import os
import logging
from werkzeug.utils import secure_filename
import secrets
from flask_mail import Mail, Message
import re
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.date import DateTrigger
from apscheduler.triggers.interval import IntervalTrigger
import random
from flask import session
from sqlalchemy import func
from sqlalchemy import case
from email_sender import add_to_queue, add_bulk_to_queue, start_email_worker
import multiprocessing
from concurrent.futures import ThreadPoolExecutor
import threading
from s3_utils import upload_file_to_s3, delete_file_from_s3, get_s3_url, get_file_url
import platform
import re
import atexit
import signal
import subprocess
import socket
import uuid
import json
import hashlib
import smtplib
import math
from dotenv import load_dotenv
import time
load_dotenv()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
import os
import time
import platform
from contextlib import contextmanager

# –ò–º–ø–æ—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
if platform.system() != 'Windows':
    import fcntl
else:
    import msvcrt

def get_lock_file_path():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°"""
    if platform.system() == 'Windows':
        return os.path.join(os.environ.get('TEMP', 'C:\\temp'), 'math_tur_scheduler.lock')
    else:
        return '/tmp/math_tur_scheduler.lock'

@contextmanager
def scheduler_lock():
    """–ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    lock_file = get_lock_file_path()
    
    if platform.system() == 'Windows':
        # Windows –≤–µ—Ä—Å–∏—è
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            fd = os.open(lock_file, os.O_CREAT | os.O_RDWR | os.O_TRUNC)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª (Windows)
            msvcrt.locking(fd, msvcrt.LK_NBLCK, 1)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º PID –≤–æ—Ä–∫–µ—Ä–∞
            worker_pid = os.getpid()
            os.write(fd, str(worker_pid).encode())
            os.fsync(fd)
            
            print(f"üîí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤–æ—Ä–∫–µ—Ä–æ–º PID: {worker_pid} (Windows)")
            
            yield True
            
        except (IOError, OSError) as e:
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –≤–æ—Ä–∫–µ—Ä–æ–º
            print(f"üîí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –≤–æ—Ä–∫–µ—Ä–æ–º (Windows)")
            try:
                os.close(fd)
            except:
                pass
            yield False
            
        finally:
            try:
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                msvcrt.locking(fd, msvcrt.LK_UNLCK, 1)
                os.close(fd)
                print(f"üîì –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (Windows)")
            except:
                pass
    else:
        # Unix/Linux –≤–µ—Ä—Å–∏—è
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            fd = os.open(lock_file, os.O_CREAT | os.O_RDWR)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            fcntl.flock(fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
            
            # –ï—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º PID –≤–æ—Ä–∫–µ—Ä–∞
            worker_pid = os.getpid()
            os.write(fd, str(worker_pid).encode())
            os.fsync(fd)
            
            print(f"üîí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤–æ—Ä–∫–µ—Ä–æ–º PID: {worker_pid} (Unix)")
            
            yield True
            
        except IOError:
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –≤–æ—Ä–∫–µ—Ä–æ–º
            print(f"üîí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –≤–æ—Ä–∫–µ—Ä–æ–º (Unix)")
            yield False
            
        finally:
            try:
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                fcntl.flock(fd, fcntl.LOCK_UN)
                os.close(fd)
                print(f"üîì –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (Unix)")
            except:
                pass

def is_scheduler_available():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    lock_file = get_lock_file_path()
    
    if platform.system() == 'Windows':
        # Windows –≤–µ—Ä—Å–∏—è
        try:
            fd = os.open(lock_file, os.O_CREAT | os.O_RDWR)
            msvcrt.locking(fd, msvcrt.LK_NBLCK, 1)
            msvcrt.locking(fd, msvcrt.LK_UNLCK, 1)
            os.close(fd)
            return True
        except (IOError, OSError):
            try:
                os.close(fd)
            except:
                pass
            return False
    else:
        # Unix/Linux –≤–µ—Ä—Å–∏—è
        try:
            fd = os.open(lock_file, os.O_CREAT | os.O_RDWR)
            fcntl.flock(fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
            fcntl.flock(fd, fcntl.LOCK_UN)
            os.close(fd)
            return True
        except IOError:
            return False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –ë–î
@contextmanager
def scheduler_db_lock(lock_name='scheduler_main', timeout_minutes=30):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —á–µ—Ä–µ–∑ –ë–î"""
    worker_pid = os.getpid()
    expires_at = datetime.now() + timedelta(minutes=timeout_minutes)
    
    try:
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        SchedulerLock.query.filter(
            SchedulerLock.expires_at < datetime.now()
        ).delete()
        db.session.commit()
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        lock = SchedulerLock(
            lock_name=lock_name,
            worker_pid=worker_pid,
            server_id=SERVER_ID or 'unknown',
            expires_at=expires_at,
            is_active=True
        )
        
        db.session.add(lock)
        db.session.commit()
        
        print(f"üîí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤–æ—Ä–∫–µ—Ä–æ–º PID: {worker_pid} —á–µ—Ä–µ–∑ –ë–î")
        
        yield True
        
    except Exception as e:
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        print(f"üîí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –≤–æ—Ä–∫–µ—Ä–æ–º (–ë–î): {e}")
        db.session.rollback()
        yield False
        
    finally:
        try:
            # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            SchedulerLock.query.filter_by(
                lock_name=lock_name,
                worker_pid=worker_pid
            ).delete()
            db.session.commit()
            print(f"üîì –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–ë–î)")
        except:
            pass

def acquire_scheduler_lock_db(lock_name='scheduler_main', timeout_minutes=30):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —á–µ—Ä–µ–∑ –ë–î"""
    worker_pid = os.getpid()
    expires_at = datetime.now() + timedelta(minutes=timeout_minutes)
    
    try:
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        SchedulerLock.query.filter(
            SchedulerLock.expires_at < datetime.now()
        ).delete()
        db.session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        existing_lock = SchedulerLock.query.filter_by(
            lock_name=lock_name,
            is_active=True
        ).first()
        
        if existing_lock:
            return False
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        lock = SchedulerLock(
            lock_name=lock_name,
            worker_pid=worker_pid,
            server_id=SERVER_ID or 'unknown',
            expires_at=expires_at,
            is_active=True
        )
        
        db.session.add(lock)
        db.session.commit()
        
        print(f"üîí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤–æ—Ä–∫–µ—Ä–æ–º PID: {worker_pid} —á–µ—Ä–µ–∑ –ë–î")
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        db.session.rollback()
        return False

def release_scheduler_lock_db(lock_name='scheduler_main'):
    """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —á–µ—Ä–µ–∑ –ë–î"""
    worker_pid = os.getpid()
    
    try:
        SchedulerLock.query.filter_by(
            lock_name=lock_name,
            worker_pid=worker_pid
        ).delete()
        db.session.commit()
        print(f"üîì –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–ë–î)")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        db.session.rollback()
        return False
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
# –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ
SERVER_ID = os.environ.get('SERVER_ID')
DEBAG = bool(os.environ.get('DEBAG'))


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
REFERRAL_BONUS_POINTS = 50  # –ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
REFERRAL_BONUS_TICKETS = 0   # –ë–æ–Ω—É—Å–Ω—ã–µ –∂–µ—Ç–æ–Ω—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–æ–Ω—É—Å–æ–≤ —É—á–∏—Ç–µ–ª–µ–π
TEACHER_REFERRAL_BONUS_POINTS = 100  # –ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã —É—á–∏—Ç–µ–ª—é –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
# –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä CPU
CPU_COUNT = multiprocessing.cpu_count()
# –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
thread_pool = ThreadPoolExecutor(max_workers=CPU_COUNT * 2)

app = Flask(__name__)
#app.config['SECRET_KEY'] = os.urandom(32).hex()
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY')
#app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://postgres:1234@localhost:5432/school_tournaments'
app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('SQLALCHEMY_DATABASE_URI')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SQLALCHEMY_ENGINE_OPTIONS'] = {
    'pool_size': 300,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ –¥–ª—è 2000+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    'max_overflow': 200,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–∏–∫–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
    'pool_timeout': 30,  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞
    'pool_recycle': 1800,  # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    'pool_pre_ping': True,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    'echo': False,  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
    'pool_use_lifo': True,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º LIFO –¥–ª—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    'connect_args': {
        'connect_timeout': 10,  # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        'application_name': 'math_tur_app',  # –ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        'options': '-c statement_timeout=30000 -c lock_timeout=10000'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    }
}
app.config['SESSION_PERMANENT'] = True
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(days=3650)  # 10 –ª–µ—Ç - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size
app.config['THREAD_POOL_SIZE'] = CPU_COUNT * 2

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
app.config['MAIL_SERVER'] = 'mail.liga-znatokov.by'
app.config['MAIL_PORT'] = 465
app.config['MAIL_USE_SSL'] = True  # –î–ª—è –ø–æ—Ä—Ç–∞ 465 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SSL, –∞ –Ω–µ TLS
app.config['MAIL_USE_TLS'] = False  # –û—Ç–∫–ª—é—á–∞–µ–º TLS –¥–ª—è –ø–æ—Ä—Ç–∞ 465
app.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME')
app.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø–∏—Å–µ–º
app.config['MAIL_USERNAME_ADMIN'] = os.environ.get('MAIL_USERNAME_ADMIN')
app.config['MAIL_PASSWORD_ADMIN'] = os.environ.get('MAIL_PASSWORD_ADMIN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏
app.config['SESSION_COOKIE_SECURE'] = bool(os.environ.get('SESSION_COOKIE_SECURE'))  # –ö—É–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ HTTPS
app.config['SESSION_COOKIE_HTTPONLY'] = True  # –ó–∞—â–∏—Ç–∞ –æ—Ç XSS
app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'  # –ó–∞—â–∏—Ç–∞ –æ—Ç CSRF
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(days=3650)  # 10 –ª–µ—Ç
app.config['SESSION_COOKIE_NAME'] = 'math_tur_session'  # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∫—É–∫–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è URL (HTTPS)
app.config['PREFERRED_URL_SCHEME'] = 'https'

mail = Mail(app)
# Rate limiting - –∏—Å–ø–æ–ª—å–∑—É–µ–º in-memory storage –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
print("üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è in-memory storage –¥–ª—è rate limiting")
limiter = Limiter(
    get_remote_address,
    app=app,
    default_limits=["200 per hour"],
    strategy="fixed-window",
    key_prefix="rate_limit"
)

def memory_cleanup():
    """–§–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è Flask-Limiter"""
    process = psutil.Process()
    mem_threshold_percent = 80  # —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏ 80% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RAM
    interval_normal = 1200  # 20 –º–∏–Ω—É—Ç
    interval_high = 60     # 1 –º–∏–Ω—É—Ç–∞

    print("üßπ –ü–æ—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")

    while True:
        try:
            # –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ–π –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
            mem_percent = psutil.virtual_memory().percent

            # –í—ã–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            if mem_percent > mem_threshold_percent:
                interval = interval_high
                print(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø–∞–º—è—Ç—å ({mem_percent}%), –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —á–∞—Å—Ç—É—é –æ—á–∏—Å—Ç–∫—É")
            else:
                interval = interval_normal

            mem_before = process.memory_info().rss

            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–ª—é—á–µ–π –ª–∏–º–∏—Ç–æ–≤
            keys_removed = 0
            try:
                keys_removed = limiter._storage.reset()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ rate limiter storage: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—á–∏—Å—Ç–∫–∏

            mem_after = process.memory_info().rss

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏
            with open('1.txt', 'a', encoding='utf-8') as file:
                file.write(
                    f"[MemoryCleaner] Cleared {keys_removed} keys, "
                    f"memory {mem_before//1024//1024} MB -> {mem_after//1024//1024} MB, "
                    f"RAM usage: {mem_percent}%\n"
                )

            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if keys_removed > 0 or mem_percent > 70:
                print(f"üßπ –û—á–∏—â–µ–Ω–æ {keys_removed} –∫–ª—é—á–µ–π, –ø–∞–º—è—Ç—å: {mem_before//1024//1024}MB ‚Üí {mem_after//1024//1024}MB, RAM: {mem_percent}%")

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ memory_cleanup: {e}")
            # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            time.sleep(60)
            continue

        time.sleep(interval)
db = SQLAlchemy(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'
login_manager.login_message = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.'
login_manager.login_message_category = 'info'

def add_logo_to_email_body(body_text):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–≥–æ—Ç–∏–ø —Å–∞–π—Ç–∞ –≤ –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ"""
    logo_html = '''
    
    <br><br>
    <hr style="border: none; border-top: 1px solid #e0e0e0; margin: 20px 0;">
    <div style="text-align: center; padding: 20px 0;">
        <img src="https://liga-znatokov.by/static/static_logo.jpg" alt="–õ–∏–≥–∞ –ó–Ω–∞—Ç–æ–∫–æ–≤" style="max-width: 300px; height: auto;">
    </div>
    '''
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç HTML —Ç–µ–≥–∏, –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫–∞–∫ HTML
    if '<' in body_text and '>' in body_text:
        return body_text + logo_html
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HTML
        html_body = body_text.replace('\n', '<br>')
        return html_body + logo_html

def redirect_if_authenticated(f):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    """
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if current_user.is_authenticated:
            flash('–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.', 'info')
            return redirect(url_for('home'))
        return f(*args, **kwargs)
    return decorated_function

def generate_session_token():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏"""
    return secrets.token_urlsafe(32)

def create_user_session(user_id, device_info=None, user_type='user', teacher_id=None):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É—á–∏—Ç–µ–ª—è"""
    if user_type == 'teacher':
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Å—Å–∏–∏ —É—á–∏—Ç–µ–ª—è
        UserSession.query.filter_by(teacher_id=teacher_id, user_type='teacher').update({'is_active': False})
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —É—á–∏—Ç–µ–ª—è
        session_token = generate_session_token()
        new_session = UserSession(
            teacher_id=teacher_id,
            user_type='teacher',
            is_active=True,
            session_token=session_token,
            device_info=device_info
        )
    else:
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        UserSession.query.filter_by(user_id=user_id, user_type='user').update({'is_active': False})
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session_token = generate_session_token()
        new_session = UserSession(
            user_id=user_id,
            user_type='user',
            is_active=True,
            session_token=session_token,
            device_info=device_info
        )
    
    db.session.add(new_session)
    db.session.commit()
    return session_token

def deactivate_user_session(user_id, user_type='user', teacher_id=None):
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É—á–∏—Ç–µ–ª—è"""
    if user_type == 'teacher':
        UserSession.query.filter_by(teacher_id=teacher_id, user_type='teacher').update({'is_active': False})
    else:
        UserSession.query.filter_by(user_id=user_id, user_type='user').update({'is_active': False})
    db.session.commit()

def is_session_active(user_id, session_token, user_type='user', teacher_id=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É—á–∏—Ç–µ–ª—è"""
    if user_type == 'teacher':
        session = UserSession.query.filter_by(
            teacher_id=teacher_id,
            session_token=session_token,
            user_type='teacher',
            is_active=True
        ).first()
    else:
        session = UserSession.query.filter_by(
            user_id=user_id,
            session_token=session_token,
            user_type='user',
            is_active=True
        ).first()
    return session is not None

def update_session_activity(session_token):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
    session = UserSession.query.filter_by(session_token=session_token).first()
    if session:
        session.update_last_active()
        db.session.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = BackgroundScheduler(timezone='Europe/Moscow')
scheduler.start()
print(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: {scheduler.timezone}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {scheduler.running}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –ø–∏—Å–µ–º
start_email_worker()

# –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤
thread_local = threading.local()

def get_db():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞"""
    if not hasattr(thread_local, 'db'):
        thread_local.db = db.create_scoped_session()
    return thread_local.db

def update_tournament_status():
    now = datetime.now()  # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    tournaments = Tournament.query.filter(Tournament.status != 'finished').all()
    
    for tournament in tournaments:
        if tournament.start_date <= now and now <= tournament.start_date + timedelta(minutes=tournament.duration):
            tournament.status = 'started'
        elif now > tournament.start_date + timedelta(minutes=tournament.duration):
            tournament.status = 'finished'
    
    db.session.commit()



def cleanup_scheduler_jobs():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
    try:
        scheduler.remove_all_jobs()
    except Exception as e:
        pass

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
_cleanup_thread_started = False
_cleanup_thread_lock = threading.Lock()

def start_memory_cleanup_once():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç race conditions"""
    global _cleanup_thread_started
    
    with _cleanup_thread_lock:
        if not _cleanup_thread_started:
            cleanup_thread = threading.Thread(target=memory_cleanup, daemon=True, name="MemoryCleanup")
            cleanup_thread.start()
            _cleanup_thread_started = True
            print("üßπ –ü–æ—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ –∑–∞–ø—É—â–µ–Ω")
        else:
            print("üßπ –ü–æ—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")

@app.before_request
def before_request():

    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º"""
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
    thread_local.db = db.create_scoped_session()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤
    update_tournament_status()


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if current_user.is_authenticated:
        session_token = session.get('session_token')
        user_type = session.get('user_type', 'user')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏
        if user_type == 'teacher':
            # –î–ª—è —É—á–∏—Ç–µ–ª–µ–π
            if not session_token or not is_session_active(None, session_token, 'teacher', current_user.id):
                # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                deactivate_user_session(None, 'teacher', current_user.id)
                session.pop('session_token', None)
                session.pop('user_type', None)
                logout_user()
                flash('–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.', 'error')
                return redirect(url_for('login'))
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if not session_token or not is_session_active(current_user.id, session_token, 'user'):
                # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                deactivate_user_session(current_user.id, 'user')
                session.pop('session_token', None)
                session.pop('user_type', None)
                logout_user()
                flash('–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.', 'error')
                return redirect(url_for('login'))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        update_session_activity(session_token)
        # –î–µ–ª–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π
        session.permanent = True

@app.teardown_request
def teardown_request(exception=None):
    """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if hasattr(thread_local, 'db'):
        thread_local.db.remove()

@app.teardown_appcontext
def shutdown_session(exception=None):
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    db.session.remove()

def run_in_thread(func, *args, **kwargs):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    return thread_pool.submit(func, *args, **kwargs)

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

def update_user_activity_async(user_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    def _update():
        with app.app_context():
            user = User.query.get(user_id)
            if user:
                user.last_activity = datetime.now()
                db.session.commit()
    return run_in_thread(_update)

def start_tournament_job(tournament_id):
    try:
        with app.app_context():
            tournament = Tournament.query.get(tournament_id)
            if tournament:
                tournament.status = 'started'
                db.session.commit()
                
                # –ö—ç—à–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ë–î
                print(f"üöÄ [–ü–õ–ê–ù–ò–†–û–í–©–ò–ö] –ù–∞—á–∏–Ω–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id}")
                tournament_task_cache.cache_tournament_tasks(tournament_id)
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–¥–∞—á–µ –∏–∑ –ë–î –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                job_id = f'start_tournament_{tournament_id}'
                scheduler_job = SchedulerJob.query.filter_by(job_id=job_id).first()
                if scheduler_job:
                    db.session.delete(scheduler_job)
                    db.session.commit()
                    
    except Exception as e:
        db.session.rollback()
        print(f"–û—à–∏–±–∫–∞ –≤ start_tournament_job: {e}")

def update_global_ranks():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –±–∞–ª–∞–Ω—Å–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –±–∞–ª–∞–Ω—Å—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        users = User.query.filter_by(is_admin=False).order_by(User.balance.desc()).all()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–∞
        for rank, user in enumerate(users, 1):
            user.global_rank = rank
        
        db.session.commit()
    except Exception as e:
        db.session.rollback()

def end_tournament_job(tournament_id):
    try:
        with app.app_context():
            tournament = Tournament.query.get(tournament_id)
            if tournament:
                tournament.status = 'finished'
                tournament.is_active = False
                
                # –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã—á–∏—Å–ª—è–µ–º –º–µ—Å—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
                from collections import defaultdict
                participations_by_category = defaultdict(list)
                participations = TournamentParticipation.query.filter_by(tournament_id=tournament_id).all()
                for p in participations:
                    if p.user and p.user.category:
                        participations_by_category[p.user.category].append(p)
                current_time = datetime.now()
                for category, plist in participations_by_category.items():
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score (–±–∞–ª–ª—ã), –∑–∞—Ç–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —É—á–∞—Å—Ç–∏—è (–º–µ–Ω—å—à–µ ‚Äî –≤—ã—à–µ)
                    plist_sorted = sorted(plist, key=lambda p: (-p.score, (p.end_time or current_time) - (p.start_time or current_time)))
                    for rank, participation in enumerate(plist_sorted, 1):
                        participation.place = rank
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ
                        solved_tasks = SolvedTask.query.filter_by(
                            user_id=participation.user_id
                        ).join(Task).filter(
                            Task.tournament_id == tournament_id
                        ).all()
                        
                        if solved_tasks:
                            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º end_time –∫–∞–∫ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
                            if not participation.end_time:
                                last_solved_task = max(solved_tasks, key=lambda x: x.solved_at)
                                participation.end_time = last_solved_task.solved_at
                            
                            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            if participation.start_time and participation.end_time:
                                time_spent = (participation.end_time - participation.start_time).total_seconds()
                                participation.user.total_tournament_time += int(time_spent)
                        else:
                            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –≤—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è = 0
                            # end_time –æ—Å—Ç–∞–µ—Ç—Å—è None
                            pass
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
                update_category_ranks()
                
                db.session.commit()
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à –∑–∞–¥–∞—á —Ç—É—Ä–Ω–∏—Ä–∞
                print(f"üèÅ [–ü–õ–ê–ù–ò–†–û–í–©–ò–ö] –û—á–∏—â–∞–µ–º –∫—ç—à –∑–∞–¥–∞—á —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id}")
                tournament_task_cache.clear_tournament_cache(tournament_id)
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–¥–∞—á–µ –∏–∑ –ë–î –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                job_id = f'end_tournament_{tournament_id}'
                scheduler_job = SchedulerJob.query.filter_by(job_id=job_id).first()
                if scheduler_job:
                    db.session.delete(scheduler_job)
                    db.session.commit()
                    
    except Exception as e:
        db.session.rollback()
        print(f"–û—à–∏–±–∫–∞ –≤ end_tournament_job: {e}")

def add_scheduler_job(job_func, run_date, tournament_id, job_type, interval_hours=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ë–î"""
    job_id = f'{job_type}_tournament_{tournament_id}' if tournament_id else f'{job_type}'
    
    print(f"add_scheduler_job: job_id={job_id}, run_date={run_date}, interval_hours={interval_hours}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–¥–∞—á–∞ –≤ –ë–î
        existing_job = SchedulerJob.query.filter_by(job_id=job_id).first()
        if existing_job:
            # –ó–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
            print(f"–ó–∞–¥–∞—á–∞ {job_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return False
        
        if interval_hours:
            # –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º —Å—Ç–∞—Ä—Ç–æ–º
            print(f"–°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É {job_id} —Å start_date={run_date}, interval_hours={interval_hours}")
            scheduler.add_job(
                job_func,
                trigger=IntervalTrigger(
                    hours=interval_hours,
                    start_date=run_date  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                ),
                args=[tournament_id] if tournament_id else [],
                id=job_id,
                replace_existing=True
            )
        else:
            # –û–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            scheduler.add_job(
                job_func,
                trigger=DateTrigger(run_date=run_date),
                args=[tournament_id] if tournament_id else [],
                id=job_id,
                replace_existing=True
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –≤ –ë–î
        scheduler_job = SchedulerJob(
            job_id=job_id,
            job_type=job_type,
            tournament_id=tournament_id,
            run_date=run_date,
            is_active=True,
            server_id=SERVER_ID
        )
        db.session.add(scheduler_job)
        db.session.commit()
        
        print(f"–ó–∞–¥–∞—á–∞ {job_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –ë–î")
        return True
    except Exception as e:
        db.session.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {e}")
        return False

def remove_scheduler_job(tournament_id, job_type):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –ë–î"""
    job_id = f'{job_type}_tournament_{tournament_id}'
    
    try:
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler.remove_job(job_id)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
        scheduler_job = SchedulerJob.query.filter_by(job_id=job_id).first()
        if scheduler_job:
            db.session.delete(scheduler_job)
            db.session.commit()
            
    except Exception as e:
        db.session.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

# –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á —Ç—É—Ä–Ω–∏—Ä–∞
class TournamentTaskCache:
    """–ö—ç—à –∑–∞–¥–∞—á —Ç—É—Ä–Ω–∏—Ä–∞ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ë–î"""
    
    def __init__(self):
        self._cache = {}  # {tournament_id: {category: [tasks]}}
        self._cache_timestamps = {}  # {tournament_id: timestamp}
    
    def cache_tournament_tasks(self, tournament_id):
        """–ö—ç—à–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é db –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Task
            tasks = db.session.query(Task).filter_by(tournament_id=tournament_id).all()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            tasks_by_category = {}
            for task in tasks:
                if task.category not in tasks_by_category:
                    tasks_by_category[task.category] = []
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏
                task_data = {
                    'id': task.id,
                    'tournament_id': task.tournament_id,
                    'title': task.title,
                    'description': task.description,
                    'image': task.image,
                    'points': task.points,
                    'correct_answer': task.correct_answer,
                    'category': task.category,
                    'topic': task.topic,
                    'solution_text': task.solution_text,
                    'solution_image': task.solution_image,
                    'created_at': task.created_at,
                    'updated_at': task.updated_at
                }
                tasks_by_category[task.category].append(task_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self._cache[tournament_id] = tasks_by_category
            self._cache_timestamps[tournament_id] = datetime.now()
            
            print(f"‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–¥–∞—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id}: {len(tasks)} –∑–∞–¥–∞—á –¥–ª—è {len(tasks_by_category)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id}: {e}")
    
    def get_tournament_tasks(self, tournament_id, category=None, verbose=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ –∫—ç—à–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥, –µ—Å–ª–∏ verbose –Ω–µ —É–∫–∞–∑–∞–Ω
        if verbose is None:
            verbose = CACHE_DEBUG
            
        if tournament_id not in self._cache:
            if verbose:
                print(f"‚ùå [–ö–≠–®] –¢—É—Ä–Ω–∏—Ä {tournament_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ")
            return None
        
        if verbose:
            print(f"‚úÖ [–ö–≠–®] –¢—É—Ä–Ω–∏—Ä {tournament_id} –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ")
        if category:
            task_data_list = self._cache[tournament_id].get(category, [])
            tasks = [CachedTask(task_data) for task_data in task_data_list]
            if verbose:
                print(f"üìã [–ö–≠–®] –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –∏–∑ –∫—ç—à–∞")
            return tasks
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            all_tasks = []
            for category_tasks in self._cache[tournament_id].values():
                all_tasks.extend([CachedTask(task_data) for task_data in category_tasks])
            if verbose:
                print(f"üìã [–ö–≠–®] –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(all_tasks)} –∑–∞–¥–∞—á –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –∫—ç—à–∞")
            return all_tasks
    
    def get_task_by_id(self, tournament_id, task_id, verbose=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É –∏–∑ –∫—ç—à–∞ –ø–æ ID"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥, –µ—Å–ª–∏ verbose –Ω–µ —É–∫–∞–∑–∞–Ω
        if verbose is None:
            verbose = CACHE_DEBUG
            
        if tournament_id not in self._cache:
            if verbose:
                print(f"‚ùå [–ö–≠–®] –¢—É—Ä–Ω–∏—Ä {tournament_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            return None
        
        for category_tasks in self._cache[tournament_id].values():
            for task_data in category_tasks:
                if task_data['id'] == task_id:
                    if verbose:
                        print(f"‚úÖ [–ö–≠–®] –ó–∞–¥–∞—á–∞ {task_id} –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id}")
                    return CachedTask(task_data)
        
        if verbose:
            print(f"‚ùå [–ö–≠–®] –ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id}")
        return None
    
    def clear_tournament_cache(self, tournament_id):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞"""
        if tournament_id in self._cache:
            del self._cache[tournament_id]
        if tournament_id in self._cache_timestamps:
            del self._cache_timestamps[tournament_id]
        print(f"üóëÔ∏è –û—á–∏—â–µ–Ω –∫—ç—à —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id}")
    
    def clear_all_cache(self):
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à"""
        self._cache.clear()
        self._cache_timestamps.clear()
        print("üóëÔ∏è –û—á–∏—â–µ–Ω –≤–µ—Å—å –∫—ç—à –∑–∞–¥–∞—á —Ç—É—Ä–Ω–∏—Ä–æ–≤")
    
    def get_cache_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ"""
        total_tasks = 0
        total_categories = 0
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for tournament_tasks in self._cache.values():
            for category_tasks in tournament_tasks.values():
                total_tasks += len(category_tasks)
            total_categories += len(tournament_tasks)
        
        return {
            'cached_tournaments': list(self._cache.keys()),
            'total_tournaments': len(self._cache),
            'total_tasks': total_tasks,
            'total_categories': total_categories,
            'timestamps': self._cache_timestamps.copy()
        }

class CachedTask:
    """–ö–ª–∞—Å—Å-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    def __init__(self, task_data):
        self.id = task_data['id']
        self.tournament_id = task_data['tournament_id']
        self.title = task_data['title']
        self.description = task_data['description']
        self.image = task_data['image']
        self.points = task_data['points']
        self.correct_answer = task_data['correct_answer']
        self.category = task_data['category']
        self.topic = task_data['topic']
        self.solution_text = task_data['solution_text']
        self.solution_image = task_data['solution_image']
        self.created_at = task_data['created_at']
        self.updated_at = task_data['updated_at']

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
tournament_task_cache = TournamentTaskCache()

# –§–ª–∞–≥ –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫—ç—à–∞
CACHE_DEBUG = False

def set_cache_debug(enabled=True):
    """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—ç—à–∞"""
    global CACHE_DEBUG
    CACHE_DEBUG = enabled
    print(f"üîß [–ö–≠–®] –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}")

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False, index=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    hashed_password = db.Column(db.String(128), nullable=False, index=True)
    phone = db.Column(db.String(20), unique=True, nullable=True)
    student_name = db.Column(db.String(100), nullable=True)  # –§–∞–º–∏–ª–∏—è –∏ –∏–º—è —É—á–∞—â–µ–≥–æ—Å—è
    parent_name = db.Column(db.String(100), nullable=True)
    is_admin = db.Column(db.Boolean, default=False)
    is_active = db.Column(db.Boolean, default=False, index=True)
    is_blocked = db.Column(db.Boolean, default=False, index=True)
    block_reason = db.Column(db.Text, nullable=True)
    email_confirmation_token = db.Column(db.String(100), unique=True, nullable=True, index=True)
    session_token = db.Column(db.String(100), unique=True, nullable=True, index=True)
    temp_password = db.Column(db.String(128), nullable=True)
    reset_password_token = db.Column(db.String(100), unique=True, nullable=True, index=True)
    reset_password_token_expires = db.Column(db.DateTime, nullable=True)
    category = db.Column(db.String(50), nullable=True, index=True)
    category_rank = db.Column(db.Integer, nullable=True, index=True)
    balance = db.Column(db.Integer, default=0)
    tickets = db.Column(db.Integer, default=0)
    tournaments_count = db.Column(db.Integer, default=0)
    total_tournament_time = db.Column(db.Integer, default=0)
    created_at = db.Column(db.DateTime, default=datetime.now, index=True)
    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å —Ç—É—Ä–Ω–∏—Ä–∞–º–∏ —á–µ—Ä–µ–∑ TournamentParticipation
    tournaments = db.relationship('Tournament', 
                                secondary='tournament_participation',
                                back_populates='participants',
                                lazy='dynamic',
                                overlaps="tournament_participations")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å —É—á–∞—Å—Ç–∏—è–º–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
    tournament_participations = db.relationship('TournamentParticipation',
                                             back_populates='user',
                                             cascade='all, delete-orphan',
                                             overlaps="tournaments,participants")
    
    educational_institution_id = db.Column(db.Integer, db.ForeignKey('educational_institutions.id'), nullable=True)
    educational_institution = db.relationship('EducationalInstitution', backref=db.backref('users', lazy=True))

    # –°–≤—è–∑—å —Å —É—á–∏—Ç–µ–ª–µ–º
    teacher_id = db.Column(db.Integer, db.ForeignKey('teachers.id'), nullable=True, index=True)
    teacher = db.relationship('Teacher', backref=db.backref('students', lazy=True))

    def set_password(self, password):
        self.hashed_password = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.hashed_password, password)

    def generate_confirmation_token(self):
        token = secrets.token_urlsafe(32)
        self.email_confirmation_token = token
        db.session.commit()
        return token

class Tournament(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text, nullable=False)
    rules = db.Column(db.Text, nullable=False)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª
    image = db.Column(db.String(200))
    start_date = db.Column(db.DateTime, nullable=False)
    duration = db.Column(db.Integer, nullable=False)  # –≤ –º–∏–Ω—É—Ç–∞—Ö
    is_active = db.Column(db.Boolean, default=False)
    status = db.Column(db.String(20), default='pending')  # pending, started, finished
    created_at = db.Column(db.DateTime, default=datetime.now)
    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è
    participants = db.relationship('User',
                                 secondary='tournament_participation',
                                 back_populates='tournaments',
                                 lazy='dynamic',
                                 overlaps="tournament_participations")
    participations = db.relationship('TournamentParticipation',
                                   back_populates='tournament',
                                   overlaps="participants,tournaments")

class Task(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    tournament_id = db.Column(db.Integer, db.ForeignKey('tournament.id'), nullable=False)
    title = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text, nullable=False)
    image = db.Column(db.String(200))
    points = db.Column(db.Integer, nullable=False)
    correct_answer = db.Column(db.String(200), nullable=False)
    category = db.Column(db.String(10), nullable=False)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    topic = db.Column(db.String(200), nullable=True)  # –¢–µ–º–∞ –∑–∞–¥–∞—á–∏
    solution_text = db.Column(db.Text, nullable=True)  # –¢–µ–∫—Å—Ç —Ä–µ—à–µ–Ω–∏—è
    solution_image = db.Column(db.String(200), nullable=True)  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.now)
    updated_at = db.Column(db.DateTime, nullable=False, default=datetime.now, onupdate=datetime.now)

    tournament = db.relationship('Tournament', backref=db.backref('tasks', lazy=True))

class TicketPurchase(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    quantity = db.Column(db.Integer, nullable=False)
    amount = db.Column(db.Float, nullable=False)
    discount = db.Column(db.Integer, default=0)  # –°–∫–∏–¥–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    purchase_date = db.Column(db.DateTime, default=datetime.now)
    
    # –ü–æ–ª—è –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
    payment_system = db.Column(db.String(20), nullable=True)  # 'yukassa', 'express_pay' –∏–ª–∏ 'bepaid'
    payment_id = db.Column(db.String(100), nullable=True, index=True)  # ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
    payment_status = db.Column(db.String(20), default='pending', index=True)  # pending, waiting_for_capture, succeeded, canceled, failed
    payment_method = db.Column(db.String(50), nullable=True)  # –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (epos, erip)
    currency = db.Column(db.String(3), default='RUB')  # –í–∞–ª—é—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞
    payment_url = db.Column(db.String(500), nullable=True)  # URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
    payment_created_at = db.Column(db.DateTime(), nullable=True)  # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    payment_confirmed_at = db.Column(db.DateTime(), nullable=True)  # –í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    
    user = db.relationship('User', backref=db.backref('ticket_purchases', lazy=True))

class TournamentParticipation(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id', ondelete='CASCADE'), nullable=False)
    tournament_id = db.Column(db.Integer, db.ForeignKey('tournament.id', ondelete='CASCADE'), nullable=False)
    score = db.Column(db.Integer, default=0)
    place = db.Column(db.Integer)
    participation_date = db.Column(db.DateTime, default=datetime.now)
    start_time = db.Column(db.DateTime, default=datetime.now)  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    end_time = db.Column(db.DateTime, nullable=True)  # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    
    user = db.relationship('User', 
                         back_populates='tournament_participations',
                         overlaps="tournaments,participants")
    tournament = db.relationship('Tournament', 
                               back_populates='participations',
                               overlaps="participants,tournaments")

class SolvedTask(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id', ondelete='CASCADE'), nullable=False)
    task_id = db.Column(db.Integer, db.ForeignKey('task.id', ondelete='CASCADE'), nullable=False)
    solved_at = db.Column(db.DateTime, default=datetime.now)
    is_correct = db.Column(db.Boolean, default=False)
    user_answer = db.Column(db.String(200), nullable=True)  # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    user = db.relationship('User', backref=db.backref('solved_tasks', lazy=True, cascade='all, delete-orphan'))
    task = db.relationship('Task', backref=db.backref('solutions', lazy=True, cascade='all, delete-orphan'))

class TicketPackage(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    price = db.Column(db.Float, nullable=False)  # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ 1 –±–∏–ª–µ—Ç
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.now)

class TicketDiscount(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    min_quantity = db.Column(db.Integer, nullable=False)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —Å–∫–∏–¥–∫–∏
    discount = db.Column(db.Integer, nullable=False)  # –°–∫–∏–¥–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.now)

    @staticmethod
    def get_discount_for_quantity(quantity):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–∫–∏–¥–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–æ–≤"""
        discount = TicketDiscount.query.filter(
            TicketDiscount.min_quantity <= quantity,
            TicketDiscount.is_active == True
        ).order_by(TicketDiscount.discount.desc()).first()
        return discount.discount if discount else 0

class Prize(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text, nullable=False)
    image = db.Column(db.String(200))  # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    points_cost = db.Column(db.Integer, nullable=False)  # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –±–∞–ª–ª–∞—Ö
    quantity = db.Column(db.Integer, default=0)  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    is_active = db.Column(db.Boolean, default=True)
    is_unique = db.Column(db.Boolean, default=False)  # –§–ª–∞–≥ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–∞
    is_for_teachers = db.Column(db.Boolean, default=False)  # –§–ª–∞–≥ –ø—Ä–∏–∑–∞ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π
    created_at = db.Column(db.DateTime, default=datetime.now)

class PrizePurchase(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    prize_id = db.Column(db.Integer, db.ForeignKey('prize.id'), nullable=False)
    quantity = db.Column(db.Integer, nullable=False, default=1)
    points_cost = db.Column(db.Integer, nullable=False)
    full_name = db.Column(db.String(100), nullable=False)
    phone = db.Column(db.String(20), nullable=False)
    address = db.Column(db.Text, nullable=False)
    status = db.Column(db.String(20), nullable=False, default='pending')
    season_number = db.Column(db.Integer, nullable=True)  # –ù–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∞ –ø–æ–∫—É–ø–∫–∞
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.now)
    
    user = db.relationship('User', backref=db.backref('prize_purchases', lazy=True))
    prize = db.relationship('Prize', backref=db.backref('purchases', lazy=True))

class TeacherPrizePurchase(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    teacher_id = db.Column(db.Integer, db.ForeignKey('teachers.id'), nullable=False)
    prize_id = db.Column(db.Integer, db.ForeignKey('prize.id'), nullable=False)
    quantity = db.Column(db.Integer, nullable=False, default=1)
    points_cost = db.Column(db.Integer, nullable=False)
    full_name = db.Column(db.String(100), nullable=False)
    phone = db.Column(db.String(20), nullable=False)
    address = db.Column(db.Text, nullable=False)
    status = db.Column(db.String(20), nullable=False, default='pending')
    season_number = db.Column(db.Integer, nullable=True)  # –ù–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∞ –ø–æ–∫—É–ø–∫–∞
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.now)
    
    teacher = db.relationship('Teacher', backref=db.backref('teacher_prize_purchases', lazy=True))
    prize = db.relationship('Prize', backref=db.backref('teacher_purchases', lazy=True))

class CartItem(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    prize_id = db.Column(db.Integer, db.ForeignKey('prize.id'), nullable=False)
    quantity = db.Column(db.Integer, nullable=False, default=1)
    created_at = db.Column(db.DateTime, default=datetime.now)
    
    user = db.relationship('User', backref=db.backref('cart_items', lazy=True))
    prize = db.relationship('Prize', backref=db.backref('cart_items', lazy=True))

class TeacherCartItem(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    teacher_id = db.Column(db.Integer, db.ForeignKey('teachers.id'), nullable=False)
    prize_id = db.Column(db.Integer, db.ForeignKey('prize.id'), nullable=False)
    quantity = db.Column(db.Integer, nullable=False, default=1)
    created_at = db.Column(db.DateTime, default=datetime.now)
    
    teacher = db.relationship('Teacher', backref=db.backref('teacher_cart_items', lazy=True))
    prize = db.relationship('Prize', backref=db.backref('teacher_cart_items', lazy=True))

class ShopSettings(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    is_open = db.Column(db.Boolean, default=True)
    # –ü—Ä–æ—Ü–µ–Ω—Ç –ª—É—á—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    top_users_percentage_1_2 = db.Column(db.Integer, default=100)  # 1-2 –∫–ª–∞—Å—Å—ã
    top_users_percentage_3 = db.Column(db.Integer, default=100)    # 3 –∫–ª–∞—Å—Å
    top_users_percentage_4 = db.Column(db.Integer, default=100)    # 4 –∫–ª–∞—Å—Å
    top_users_percentage_5 = db.Column(db.Integer, default=100)    # 5 –∫–ª–∞—Å—Å
    top_users_percentage_6 = db.Column(db.Integer, default=100)    # 6 –∫–ª–∞—Å—Å
    top_users_percentage_7 = db.Column(db.Integer, default=100)    # 7 –∫–ª–∞—Å—Å
    top_users_percentage_8 = db.Column(db.Integer, default=100)    # 8 –∫–ª–∞—Å—Å
    top_users_percentage_9 = db.Column(db.Integer, default=100)    # 9 –∫–ª–∞—Å—Å
    top_users_percentage_10 = db.Column(db.Integer, default=100)   # 10 –∫–ª–∞—Å—Å
    top_users_percentage_11 = db.Column(db.Integer, default=100)   # 11 –∫–ª–∞—Å—Å
    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)

    @staticmethod
    def get_settings():
        settings = ShopSettings.query.first()
        if not settings:
            settings = ShopSettings()
            db.session.add(settings)
            db.session.commit()
        return settings

    def can_user_shop(self, user):
        if not self.is_open:
            return False
        
        # –î–ª—è —É—á–∏—Ç–µ–ª–µ–π –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∞–≥–∞–∑–∏–Ω—É
        if isinstance(user, Teacher):
            return True
        
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if not hasattr(user, 'category'):
            return False
            
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        category_percentage = getattr(self, f'top_users_percentage_{user.category.replace("-", "_")}')
        
        if category_percentage >= 100:
            return True
            
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
        from sqlalchemy import exists
        category_users_with_tournaments = User.query.filter(
            User.category == user.category,
            User.is_admin == False,
            exists().where(TournamentParticipation.user_id == User.id)
        ).count()
        
        if category_users_with_tournaments == 0:
            return False
            
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫–∏
        allowed_users_count = max(1, int(category_users_with_tournaments * category_percentage / 100))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        user_rank = user.category_rank
        if not user_rank:
            return False
            
        return user_rank <= allowed_users_count

class TournamentSettings(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    is_season_active = db.Column(db.Boolean, default=True)
    allow_category_change = db.Column(db.Boolean, default=True)  # –†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    closed_season_message = db.Column(db.Text, nullable=True)
    current_season_number = db.Column(db.Integer, default=1)  # –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
    updated_at = db.Column(db.DateTime, default=datetime.now)

    @staticmethod
    def get_settings():
        settings = TournamentSettings.query.first()
        if not settings:
            settings = TournamentSettings()
            db.session.add(settings)
            db.session.commit()
        return settings

@login_manager.user_loader
def load_user(user_id):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ID —É—á–∏—Ç–µ–ª–µ–º (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 't')
    if user_id.startswith('t'):
        teacher_id = int(user_id[1:])  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 't'
        return Teacher.query.get(teacher_id)
    else:
        return User.query.get(int(user_id))

def create_admin_user():
    admin = User.query.filter_by(username='admin').first()
    if not admin:
        admin = User(
            username='admin',
            email='admin@school-tournaments.ru',
            phone='+375000000000',  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            student_name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —É—á–∞—â–µ–≥–æ—Å—è
            parent_name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è
            category='11',  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—É—é
            is_admin=True,
            is_active=True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_active=True –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        )
        admin.set_password('admin123')
        db.session.add(admin)
        db.session.commit()

def send_admin_mass_email(subject, message, recipient_email):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ email"""
    try:
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø–∏—Å–µ–º
        admin_mail_config = {
            'MAIL_SERVER': app.config['MAIL_SERVER'],
            'MAIL_PORT': app.config['MAIL_PORT'],
            'MAIL_USE_SSL': app.config['MAIL_USE_SSL'],
            'MAIL_USE_TLS': app.config['MAIL_USE_TLS'],
            'MAIL_USERNAME': app.config['MAIL_USERNAME_ADMIN'],
            'MAIL_PASSWORD': app.config['MAIL_PASSWORD_ADMIN']
        }
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
        msg = Message(subject,
                     sender=admin_mail_config['MAIL_USERNAME'],
                     recipients=[recipient_email])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫ —Ç–µ–∫—Å—Ç—É –ø–∏—Å—å–º–∞
        html_message = add_logo_to_email_body(message)
        msg.html = html_message
        msg.body = message  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        add_to_queue(app, mail, msg, admin_mail_config)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_email}: {e}")
        raise e

def send_admin_mass_email_with_attachment(subject, message, recipient_email, attachment_filename=None, attachment_data=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º"""
    try:
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø–∏—Å–µ–º
        admin_mail_config = {
            'MAIL_SERVER': app.config['MAIL_SERVER'],
            'MAIL_PORT': app.config['MAIL_PORT'],
            'MAIL_USE_SSL': app.config['MAIL_USE_SSL'],
            'MAIL_USE_TLS': app.config['MAIL_USE_TLS'],
            'MAIL_USERNAME': app.config['MAIL_USERNAME_ADMIN'],
            'MAIL_PASSWORD': app.config['MAIL_PASSWORD_ADMIN']
        }
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
        msg = Message(subject,
                     sender=admin_mail_config['MAIL_USERNAME'],
                     recipients=[recipient_email])
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
        if attachment_filename and attachment_data:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ base64 –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ HTML
            import base64
            base64_image = base64.b64encode(attachment_data).decode('utf-8')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
            file_extension = attachment_filename.lower().split('.')[-1]
            mime_type_map = {
                'jpg': 'image/jpeg',
                'jpeg': 'image/jpeg',
                'png': 'image/png',
                'gif': 'image/gif'
            }
            mime_type = mime_type_map.get(file_extension, 'image/jpeg')
            
            # –°–æ–∑–¥–∞–µ–º HTML-–≤–µ—Ä—Å–∏—é —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            html_message = f"""
{message}
<br><br>
<div style="text-align: center; margin: 20px 0;">
    <img src="data:{mime_type};base64,{base64_image}" 
         style="max-width: 100%; height: auto; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);" 
         alt="–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ">
</div>
<br><br>
{add_logo_to_email_body('')}
            """
            
            # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            text_message = f"""
{message}

[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ –ø–∏—Å—å–º—É: {attachment_filename}]

---
–≠—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Å–∞–π—Ç–∞ –õ–∏–≥–∞ –ó–Ω–∞—Ç–æ–∫–æ–≤
            """
            
            msg.html = html_message
            msg.body = text_message
            
            # –¢–∞–∫–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            msg.attach(attachment_filename, mime_type, attachment_data)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é
            html_message = add_logo_to_email_body(message)
            msg.html = html_message
            msg.body = message
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        add_to_queue(app, mail, msg, admin_mail_config)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_email}: {e}")
        raise e

def send_feedback_email(name, phone, email, subject, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø–∏—Å–µ–º
        admin_mail_config = {
            'MAIL_SERVER': app.config['MAIL_SERVER'],
            'MAIL_PORT': app.config['MAIL_PORT'],
            'MAIL_USE_SSL': app.config['MAIL_USE_SSL'],
            'MAIL_USE_TLS': app.config['MAIL_USE_TLS'],
            'MAIL_USERNAME': app.config['MAIL_USERNAME_ADMIN'],
            'MAIL_PASSWORD': app.config['MAIL_PASSWORD_ADMIN']
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–º—É –∏ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
        email_subject = f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {subject}"
        email_body = f"""
–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ –õ–∏–≥–∞ –ó–Ω–∞—Ç–æ–∫–æ–≤

–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {name}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone}
Email: {email}

–¢–µ–º–∞: {subject}

–°–æ–æ–±—â–µ–Ω–∏–µ:
{message}

---
–≠—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å —Å–∞–π—Ç–∞ –õ–∏–≥–∞ –ó–Ω–∞—Ç–æ–∫–æ–≤
        """
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = Message(email_subject,
                     sender=admin_mail_config['MAIL_USERNAME'],
                     recipients=['th@liga-znatokov.by'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫ —Ç–µ–∫—Å—Ç—É –ø–∏—Å—å–º–∞
        html_email_body = add_logo_to_email_body(email_body.strip())
        msg.html = html_email_body
        msg.body = email_body.strip()  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        add_to_queue(app, mail, msg, admin_mail_config)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é: {e}")
        raise e

def send_admin_notification(subject, message, recipient_email=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é"""
    try:
        if recipient_email:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            msg = Message(subject,
                         sender=app.config['MAIL_USERNAME'],
                         recipients=[recipient_email])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫ —Ç–µ–∫—Å—Ç—É –ø–∏—Å—å–º–∞
            html_message = add_logo_to_email_body(message)
            msg.html = html_message
            msg.body = message  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            add_to_queue(app, mail, msg)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            admins = User.query.filter_by(is_admin=True, is_active=True).all()
            
            if not admins:
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            messages = []
            for admin in admins:
                msg = Message(subject,
                             sender=app.config['MAIL_USERNAME'],
                             recipients=[admin.email])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫ —Ç–µ–∫—Å—Ç—É –ø–∏—Å—å–º–∞
                html_message = add_logo_to_email_body(message)
                msg.html = html_message
                msg.body = message  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                messages.append(msg)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Å—Å–æ–≤–æ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
            add_bulk_to_queue(app, mail, messages)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def send_confirmation_email(user):
    token = user.generate_confirmation_token()
    confirmation_url = url_for('confirm_email', token=token, _external=True, _scheme='https')
    msg = Message('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
                  sender=app.config['MAIL_USERNAME'],
                  recipients=[user.email])
    
    email_body = f'''–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ:
{confirmation_url}

–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é¬ª –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–∏–∂–µ —Å—Å—ã–ª–∫—É –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter.

{confirmation_url}

–ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
'''
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫ —Ç–µ–∫—Å—Ç—É –ø–∏—Å—å–º–∞
    html_email_body = add_logo_to_email_body(email_body)
    msg.html = html_email_body
    msg.body = email_body  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    add_to_queue(app, mail, msg)

def send_teacher_confirmation_email(teacher):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —É—á–∏—Ç–µ–ª—è"""
    token = teacher.generate_confirmation_token()
    confirmation_url = url_for('confirm_teacher_email', token=token, _external=True, _scheme='https')
    msg = Message('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∏—Ç–µ–ª—è',
                  sender=app.config['MAIL_USERNAME'],
                  recipients=[teacher.email])
    
    email_body = f'''–£–≤–∞–∂–∞–µ–º—ã–π {teacher.full_name}!

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫ —É—á–∏—Ç–µ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ:
{confirmation_url}

–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é¬ª –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–∏–∂–µ —Å—Å—ã–ª–∫—É –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter.

{confirmation_url}

–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É —É—á–∏—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é:
- –°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —É—á–∞—â–∏—Ö—Å—è
- –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö —É—á–∞—â–∏—Ö—Å—è
- –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ

–ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
'''
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫ —Ç–µ–∫—Å—Ç—É –ø–∏—Å—å–º–∞
    html_email_body = add_logo_to_email_body(email_body)
    msg.html = html_email_body
    msg.body = email_body  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    add_to_queue(app, mail, msg)

def send_teacher_credentials_email(teacher, password):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—á–∏—Ç–µ–ª—é –ø–∏—Å—å–º–æ —Å –ø–∞—Ä–æ–ª–µ–º –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email"""
    msg = Message('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞',
                  sender=app.config['MAIL_USERNAME'],
                  recipients=[teacher.email])
    
    email_body = f'''–£–≤–∞–∂–∞–µ–º—ã–π {teacher.full_name}!

–í–∞—à email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ —É—á–∏—Ç–µ–ª—å.

–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:
–õ–æ–≥–∏–Ω: {teacher.username}
–ü–∞—Ä–æ–ª—å: {password}

–î–ª—è –≤—Ö–æ–¥–∞ –∫–∞–∫ —É—á–∏—Ç–µ–ª—å:
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
2. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
3. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É "–Ø —É—á–∏—Ç–µ–ª—å"

–í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ —É—á–∏—Ç–µ–ª—è –≤—ã —Å–º–æ–∂–µ—Ç–µ:
- –°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
- –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤
- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
- –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ –õ–∏–≥–∏ –ó–Ω–∞—Ç–æ–∫–æ–≤
'''
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫ —Ç–µ–∫—Å—Ç—É –ø–∏—Å—å–º–∞
    html_email_body = add_logo_to_email_body(email_body)
    msg.html = html_email_body
    msg.body = email_body  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    add_to_queue(app, mail, msg)

def send_credentials_email(user, password):
    msg = Message('–í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                  sender=app.config['MAIL_USERNAME'],
                  recipients=[user.email])
    
    email_body = f'''–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!

–í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
–õ–æ–≥–∏–Ω: {user.username}
–ü–∞—Ä–æ–ª—å: {password}
'''
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫ —Ç–µ–∫—Å—Ç—É –ø–∏—Å—å–º–∞
    html_email_body = add_logo_to_email_body(email_body)
    msg.html = html_email_body
    msg.body = email_body  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    add_to_queue(app, mail, msg)

def send_reset_password_email(user):
    token = secrets.token_urlsafe(32)
    user.reset_password_token = token
    user.reset_password_token_expires = datetime.now() + timedelta(hours=1)
    db.session.commit()
    
    reset_url = url_for('reset_password', token=token, _external=True, _scheme='https')
    msg = Message('–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è',
                  sender=app.config['MAIL_USERNAME'],
                  recipients=[user.email])
    
    email_body = f'''–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ:
{reset_url}

–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ ¬´–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å¬ª –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–∏–∂–µ —Å—Å—ã–ª–∫—É –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter.

{reset_url}

–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.

–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
'''
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫ —Ç–µ–∫—Å—Ç—É –ø–∏—Å—å–º–∞
    html_email_body = add_logo_to_email_body(email_body)
    msg.html = html_email_body
    msg.body = email_body  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    add_to_queue(app, mail, msg)

def send_teacher_reset_password_email(teacher):
    token = secrets.token_urlsafe(32)
    teacher.reset_password_token = token
    teacher.reset_password_token_expires = datetime.now() + timedelta(hours=1)
    db.session.commit()
    
    reset_url = url_for('reset_teacher_password', token=token, _external=True, _scheme='https')
    msg = Message('–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è —É—á–∏—Ç–µ–ª—è',
                  sender=app.config['MAIL_USERNAME'],
                  recipients=[teacher.email])
    
    email_body = f'''–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —É—á–∏—Ç–µ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ:
{reset_url}

–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ ¬´–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å¬ª –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–∏–∂–µ —Å—Å—ã–ª–∫—É –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter.

{reset_url}

–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.

–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
'''
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫ —Ç–µ–∫—Å—Ç—É –ø–∏—Å—å–º–∞
    html_email_body = add_logo_to_email_body(email_body)
    msg.html = html_email_body
    msg.body = email_body  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    add_to_queue(app, mail, msg)

@app.route('/forgot-password', methods=['GET', 'POST'])
@redirect_if_authenticated
def forgot_password():
    if request.method == 'POST':
        email = request.form.get('email')
        user = User.query.filter_by(email=email).first()
        teacher = Teacher.query.filter_by(email=email).first()
        
        if user:
            send_reset_password_email(user)
        elif teacher:
            send_teacher_reset_password_email(teacher)

        # –ï–¥–∏–Ω–æ–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è email
        flash('–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π email –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–∫–∂–µ –ø–∞–ø–∫—É "–°–ø–∞–º".', 'success')
        
        return redirect(url_for('login'))
    
    return render_template('forgot_password.html')

@app.route('/reset-password/<token>', methods=['GET', 'POST'])
@redirect_if_authenticated
def reset_password(token):
    user = User.query.filter_by(reset_password_token=token).first()
    
    if not user or not user.reset_password_token_expires or user.reset_password_token_expires < datetime.now():
        flash('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è', 'danger')
        return redirect(url_for('login'))
    
    if request.method == 'POST':
        password = request.form.get('password')
        confirm_password = request.form.get('confirm_password')
        
        if password != confirm_password:
            flash('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'danger')
            return redirect(url_for('reset_password', token=token))
        
        is_strong, message = is_password_strong(password)
        if not is_strong:
            flash(message, 'danger')
            return redirect(url_for('reset_password', token=token))
        
        user.set_password(password)
        user.reset_password_token = None
        user.reset_password_token_expires = None
        
        # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        user.session_token = None
        user.last_activity = None
        
        db.session.commit()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        if current_user.is_authenticated:
            session.pop('session_token', None)
            logout_user()
        
        flash('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.', 'success')
        return redirect(url_for('login'))
    
    return render_template('reset_password.html', token=token)

@app.route('/reset-teacher-password/<token>', methods=['GET', 'POST'])
@redirect_if_authenticated
def reset_teacher_password(token):
    teacher = Teacher.query.filter_by(reset_password_token=token).first()
    
    if not teacher or not teacher.reset_password_token_expires or teacher.reset_password_token_expires < datetime.now():
        flash('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è', 'danger')
        return redirect(url_for('login'))
    
    if request.method == 'POST':
        password = request.form.get('password')
        confirm_password = request.form.get('confirm_password')
        
        if password != confirm_password:
            flash('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'danger')
            return redirect(url_for('reset_teacher_password', token=token))
        
        is_strong, message = is_password_strong(password)
        if not is_strong:
            flash(message, 'danger')
            return redirect(url_for('reset_teacher_password', token=token))
        
        teacher.set_password(password)
        teacher.reset_password_token = None
        teacher.reset_password_token_expires = None
        
        # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        teacher.session_token = None
        teacher.last_activity = None
        
        db.session.commit()
        
        # –ï—Å–ª–∏ —É—á–∏—Ç–µ–ª—å –±—ã–ª –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        if current_user.is_authenticated:
            session.pop('session_token', None)
            logout_user()
        
        flash('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.', 'success')
        return redirect(url_for('login'))
    
    return render_template('reset_teacher_password.html', token=token)

@app.route('/')
def home():
    settings = TournamentSettings.get_settings()
    if settings.is_season_active:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.now()
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
        active_tournaments = Tournament.query.filter(
            Tournament.start_date <= current_time,
            Tournament.is_active == True
        ).order_by(Tournament.start_date.desc()).all()
        
        next_tournament = None
        is_tournament_running = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
        for tournament in active_tournaments:
            end_time = tournament.start_date + timedelta(minutes=tournament.duration)
            if current_time <= end_time:
                next_tournament = tournament
                is_tournament_running = True
                break
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞, –∏—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        if not next_tournament:
            next_tournament = Tournament.query.filter(
                Tournament.start_date > current_time,
                Tournament.is_active == True
            ).order_by(Tournament.start_date.asc()).first()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
        # –¢–æ–ø-10 –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ–±—â–µ–º—É —Å—á–µ—Ç—É (balance)
        top_players = User.query.filter(
            User.is_active == True,
            User.is_admin == False
        ).order_by(User.balance.desc()).limit(10).all()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_tournaments = Tournament.query.filter(
            Tournament.status == 'finished'
        ).count()
        
        avg_tournament_score = db.session.query(db.func.avg(TournamentParticipation.score)).scalar() or 0
        
        max_tournament_score = db.session.query(db.func.max(TournamentParticipation.score)).scalar() or 0
        
        total_solved_tasks = SolvedTask.query.filter(
            SolvedTask.is_correct == True
        ).count()
        

        
        return render_template('index.html',
                             next_tournament=next_tournament,
                             now=current_time,
                             is_tournament_running=is_tournament_running,
                             top_players=top_players,
                             total_tournaments=total_tournaments,
                             avg_tournament_score=round(avg_tournament_score, 1),
                             max_tournament_score=max_tournament_score,
                             total_solved_tasks=total_solved_tasks)
    else:
        return render_template('index_close.html', message=settings.closed_season_message)

@app.route('/about')
def about():
    return render_template('about.html', title='–û –Ω–∞—Å')

@app.route('/cooperation')
def cooperation():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ —Å —É—á–∏—Ç–µ–ª—è–º–∏"""
    return render_template('cooperation.html', title='–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ')

@app.route('/shop-preview')
def shop_preview():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∞–≤–∫–∏ –ø—Ä–∏–∑–æ–≤ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É—á–∏—Ç–µ–ª–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–∑—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    prizes = Prize.query.filter_by(is_active=True, is_for_teachers=False).order_by(Prize.points_cost.asc()).all()
    
    return render_template('shop_preview.html', title='–õ–∞–≤–∫–∞ –ø—Ä–∏–∑–æ–≤', prizes=prizes)

@app.route('/how-to-participate')
def how_to_participate():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–º, –∫–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö"""
    return render_template('how_to_participate.html', title='–ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å')

@app.route('/news')
def news():
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    page = request.args.get('page', 1, type=int)
    per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    pagination = News.query.filter_by(is_published=True).order_by(News.created_at.desc()).paginate(
        page=page, per_page=per_page, error_out=False
    )
    
    news_list = pagination.items
    
    return render_template('news.html', title='–ù–æ–≤–æ—Å—Ç–∏', news_list=news_list, pagination=pagination, now=datetime.now())

@app.route('/news/<int:news_id>')
def news_detail(news_id):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –ø–æ ID
    news_item = News.query.filter_by(id=news_id, is_published=True).first_or_404()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    other_news = News.query.filter(
        News.is_published == True,
        News.id != news_id
    ).order_by(News.created_at.desc()).limit(5).all()
    
    return render_template('news_detail.html', title=news_item.title, news=news_item, news_list=other_news)

def parse_user_agent(user_agent_string):
    """–ü–∞—Ä—Å–∏—Ç User-Agent —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    os_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°"
    if "Windows" in user_agent_string:
        os_info = "Windows"
        if "Windows NT 10.0" in user_agent_string:
            os_info = "Windows 10"
        elif "Windows NT 6.3" in user_agent_string:
            os_info = "Windows 8.1"
        elif "Windows NT 6.2" in user_agent_string:
            os_info = "Windows 8"
        elif "Windows NT 6.1" in user_agent_string:
            os_info = "Windows 7"
    elif "Mac OS X" in user_agent_string:
        os_info = "macOS"
    elif "Linux" in user_agent_string:
        os_info = "Linux"
    elif "Android" in user_agent_string:
        os_info = "Android"
    elif "iPhone" in user_agent_string or "iPad" in user_agent_string:
        os_info = "iOS"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä
    browser = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä"
    if "Chrome" in user_agent_string and "Chromium" not in user_agent_string:
        browser = "Chrome"
    elif "Firefox" in user_agent_string:
        browser = "Firefox"
    elif "Safari" in user_agent_string and "Chrome" not in user_agent_string:
        browser = "Safari"
    elif "Edge" in user_agent_string:
        browser = "Microsoft Edge"
    elif "Opera" in user_agent_string or "OPR" in user_agent_string:
        browser = "Opera"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    device_type = "–ö–æ–º–ø—å—é—Ç–µ—Ä"
    if "Mobile" in user_agent_string:
        device_type = "–ú–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω"
    elif "Tablet" in user_agent_string or "iPad" in user_agent_string:
        device_type = "–ü–ª–∞–Ω—à–µ—Ç"

    return {
        "os": os_info,
        "browser": browser,
        "device_type": device_type,
        "full_info": user_agent_string
    }

@app.route('/login', methods=['GET', 'POST'])
@redirect_if_authenticated
def login():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –≤—Ö–æ–¥
    if is_login_blocked():
        blocked_until = datetime.fromtimestamp(float(request.cookies.get(LOGIN_BLOCKED_UNTIL_COOKIE)))
        remaining_time = blocked_until - datetime.now()
        minutes = int(remaining_time.total_seconds() / 60)
        flash(f'–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.', 'error')
        return render_template('login.html')

    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        device_info = request.user_agent.string

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = None
        user_type = None
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user = User.query.filter(User.username.ilike(username)).first()
        if user and user.check_password(password):
            user_type = 'user'
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ —É—á–∏—Ç–µ–ª—è—Ö
            user = Teacher.query.filter(Teacher.username.ilike(username)).first()
            if user and user.check_password(password):
                user_type = 'teacher'
            else:
                user = None
        
        if user and user_type:
            if user.is_blocked:
                flash('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: ' + user.block_reason, 'error')
                return increment_login_attempts()
            
            if not user.is_active:
                flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º.', 'error')
                return increment_login_attempts()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
            if user_type == 'teacher':
                active_session = UserSession.query.filter_by(teacher_id=user.id, user_type='teacher', is_active=True).first()
            else:
                active_session = UserSession.query.filter_by(user_id=user.id, user_type='user', is_active=True).first()
            
            if active_session:
                # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                device_details = parse_user_agent(active_session.device_info or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
                flash(f'–í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {device_details["os"]}, {device_details["browser"]}, {device_details["device_type"]}', 'error')
                return increment_login_attempts()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            if user_type == 'teacher':
                session_token = create_user_session(None, device_info, 'teacher', user.id)
            else:
                session_token = create_user_session(user.id, device_info, 'user')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–µ—Å—Å–∏–∏ Flask –∏ –¥–µ–ª–∞–µ–º –µ—ë –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π
            session['session_token'] = session_token
            session['user_type'] = user_type
            session.permanent = True
            
            login_user(user)
            user.last_login = datetime.now()
            db.session.commit()
            
            flash('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!', 'success')
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_type == 'teacher':
                redirect_url = url_for('teacher_profile')
            else:
                redirect_url = url_for('profile')
            
            response = make_response(redirect(redirect_url))
            response.set_cookie(
                LOGIN_ATTEMPTS_COOKIE,
                '0',  # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
                max_age=0,
                secure=False,
                httponly=True,
                samesite='Lax'
            )
            response.set_cookie(
                LOGIN_BLOCKED_UNTIL_COOKIE,
                '',
                max_age=0,
                secure=False,
                httponly=True,
                samesite='Lax'
            )
            return response
        else:
            attempts = get_login_attempts() + 1
            if attempts >= MAX_LOGIN_ATTEMPTS:
                flash(f'–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {LOGIN_TIMEOUT // 60} –º–∏–Ω—É—Ç.', 'error')
                return block_login()
            else:
                flash(f'–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {MAX_LOGIN_ATTEMPTS - attempts}', 'error')
                return increment_login_attempts()
    
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
    user_type = session.get('user_type', 'user')
    if user_type == 'teacher':
        deactivate_user_session(None, 'teacher', current_user.id)
    else:
        deactivate_user_session(current_user.id, 'user')
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é Flask
    session.pop('session_token', None)
    session.pop('user_type', None)
    
    logout_user()
    flash('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'success')
    return redirect(url_for('home'))

@app.route('/admin')
@login_required
def admin_dashboard():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not hasattr(current_user, 'is_admin') or not current_user.is_admin:
        flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤', 'error')
        return redirect(url_for('home'))
    
    users_count = User.query.count()
    return render_template('admin/dashboard.html', 
                         title='–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                         users_count=users_count)

@app.route('/admin/users')
@login_required
def admin_users():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not hasattr(current_user, 'is_admin') or not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    search_query = sanitize_input(request.args.get('search', ''), 100)
    search_type = request.args.get('search_type', 'username')
    page = request.args.get('page', 1, type=int)
    per_page = 20  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    valid_search_types = ['username', 'email', 'id']
    if search_type not in valid_search_types:
        search_type = 'username'
    
    if page < 1:
        page = 1
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    query = User.query
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    if search_query:
        if search_type == 'username':
            query = query.filter(User.username.ilike('%' + search_query + '%'))
        elif search_type == 'email':
            query = query.filter(User.email.ilike('%' + search_query + '%'))
        elif search_type == 'id':
            try:
                user_id = int(search_query)
                query = query.filter(User.id == user_id)
            except ValueError:
                flash('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º', 'warning')
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
    users = query.order_by(User.created_at.desc()).paginate(page=page, per_page=per_page, error_out=False)
    
    # –ï—Å–ª–∏ —ç—Ç–æ AJAX-–∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return jsonify({
            'users': [{
                'id': user.id,
                'username': user.username,
                'email': user.email,
                'created_at': user.created_at.strftime('%d.%m.%Y %H:%M'),
                'is_active': user.is_active,
                'is_blocked': user.is_blocked
            } for user in users.items],
            'has_next': users.has_next
        })
    
    return render_template('admin/users.html', 
                         users=users.items,
                         pagination=users,
                         search_query=search_query,
                         search_type=search_type)

@app.route('/admin/users/add', methods=['POST'])
@login_required
def admin_add_user():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not hasattr(current_user, 'is_admin') or not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    username = sanitize_input(request.form.get('username'), 80)
    email = sanitize_input(request.form.get('email'), 120)
    password = request.form.get('password')
    phone = sanitize_input(request.form.get('phone'), 20)
    student_name = sanitize_input(request.form.get('student_name'), 100)
    parent_name = sanitize_input(request.form.get('parent_name'), 100)
    category = request.form.get('category')
    is_admin = 'is_admin' in request.form
    
    if not all([username, email, password, phone, student_name, parent_name, category]):
        flash('–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', 'danger')
        return redirect(url_for('admin_users'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    if User.query.filter(User.username.ilike(username)).first() or Teacher.query.filter(Teacher.username.ilike(username)).first():
        flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'danger')
        return redirect(url_for('admin_users'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    if User.query.filter_by(email=email).first() or Teacher.query.filter_by(email=email).first():
        flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'danger')
        return redirect(url_for('admin_users'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    if User.query.filter_by(phone=phone).first() or Teacher.query.filter_by(phone=phone).first():
        flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'danger')
        return redirect(url_for('admin_users'))
    
    if not re.match(r'^\+375[0-9]{9}$', phone):
        flash('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +375XXXXXXXXX', 'danger')
        return redirect(url_for('admin_users'))
    
    if category not in ['1-2', '3', '4', '5', '6', '7', '8', '9', '10', '11']:
        flash('–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', 'error')
        return redirect(url_for('admin_users'))
    
    user = User(
        username=username,
        email=email,
        phone=phone,
        student_name=student_name,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —É—á–∞—â–µ–≥–æ—Å—è
        parent_name=parent_name,
        category=category,
        is_admin=is_admin,
        is_active=True
    )
    user.set_password(password)
    
    db.session.add(user)
    db.session.commit()
    
    flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', 'success')
    return redirect(url_for('admin_users'))

@app.route('/admin/users/<int:user_id>/edit', methods=['POST'])
@login_required
def admin_edit_user(user_id):
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    user = User.query.get_or_404(user_id)
    username = sanitize_input(request.form.get('username'), 80)
    email = sanitize_input(request.form.get('email'), 120)
    student_name = sanitize_input(request.form.get('student_name'), 100)
    parent_name = sanitize_input(request.form.get('parent_name'), 100)
    phone = sanitize_input(request.form.get('phone'), 20)
    category = request.form.get('category')
    password = request.form.get('password')
    is_admin = 'is_admin' in request.form
    tickets = request.form.get('tickets')
    
    if username != user.username and User.query.filter(User.username.ilike(username)).first():
        flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'danger')
        return redirect(url_for('admin_users'))
    
    if email != user.email and User.query.filter_by(email=email).first():
        flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'danger')
        return redirect(url_for('admin_users'))
    
    if phone != user.phone and User.query.filter_by(phone=phone).first():
        flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'danger')
        return redirect(url_for('admin_users'))
    
    try:
        tickets = int(tickets)
        if tickets < 0:
            raise ValueError
    except ValueError:
        flash('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º', 'danger')
        return redirect(url_for('admin_users'))
    
    user.username = username
    user.email = email
    user.student_name = student_name
    user.parent_name = parent_name
    user.phone = phone
    user.category = category
    user.is_admin = is_admin
    user.tickets = tickets
    
    if password:
        user.set_password(password)
    
    db.session.commit()
    
    flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success')
    return redirect(url_for('admin_users'))

@app.route('/admin/users/<int:user_id>/delete', methods=['POST'])
@login_required
def admin_delete_user(user_id):
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    user = User.query.get_or_404(user_id)
    
    if user.id == current_user.id:
        flash('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç', 'danger')
        return redirect(url_for('admin_users'))
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        # 1. –£–¥–∞–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ReferralLink.query.filter_by(user_id=user.id).delete()
        
        # 2. –£–¥–∞–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–º
        Referral.query.filter_by(referred_id=user.id).delete()
        
        # 3. –£–¥–∞–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–º
        Referral.query.filter_by(referrer_id=user.id).delete()
        
        # 4. –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        UserSession.query.filter_by(user_id=user.id, user_type='user').delete()
        
        # 5. –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.session.delete(user)
        db.session.commit()
        
        flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success')
        
    except Exception as e:
        db.session.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        flash('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'danger')
    
    return redirect(url_for('admin_users'))

@app.route('/admin/users/<int:user_id>/toggle-block', methods=['POST'])
@login_required
def admin_toggle_user_block(user_id):
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    user = User.query.get_or_404(user_id)
    
    if user.id == current_user.id:
        flash('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç', 'danger')
        return redirect(url_for('admin_users'))
    
    if user.is_blocked:
        # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.is_blocked = False
        user.block_reason = None
        action = "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    else:
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        block_reason = sanitize_input(request.form.get('block_reason'), 500)
        if not block_reason:
            flash('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏', 'danger')
            return redirect(url_for('admin_users'))
        
        user.is_blocked = True
        user.block_reason = block_reason
        action = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    
    db.session.commit()
    flash(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É—Å–ø–µ—à–Ω–æ {action}', 'success')
    return redirect(url_for('admin_users'))

@app.route('/admin/users/reset-all-balances', methods=['POST'])
@login_required
def admin_reset_all_balances():
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    password = request.form.get('password')
    if not password:
        return jsonify({'success': False, 'message': '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'})
    
    if not current_user.check_password(password):
        return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'})
    
    try:
        User.query.update({User.balance: 0})
        db.session.commit()
        return jsonify({'success': True, 'message': '–°—á–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω'})
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤'})

@app.route('/admin/users/mass-email', methods=['POST'])
@login_required
def admin_mass_email():
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ'})
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        if not request.is_json:
            return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'})
        
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'message': '–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã'})
        
        subject = sanitize_input(data.get('subject', ''), 200)
        message = validate_text_content(data.get('message', ''), 5000)
        attachment_filename = data.get('attachment_filename')
        attachment_data = data.get('attachment_data')  # base64 encoded image data
        
        if not subject or not message:
            return jsonify({'success': False, 'message': '–¢–µ–º–∞ –∏ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'})
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å email
        users = User.query.filter(User.is_active == True, User.email.isnot(None)).all()
        
        if not users:
            return jsonify({'success': False, 'message': '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º'})
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        decoded_attachment_data = None
        if attachment_data:
            try:
                import base64
                decoded_attachment_data = base64.b64decode(attachment_data.split(',')[1] if ',' in attachment_data else attachment_data)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'})
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        sent_count = 0
        failed_count = 0
        
        for user in users:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º –∏–ª–∏ –±–µ–∑
                if attachment_filename and decoded_attachment_data:
                    send_admin_mass_email_with_attachment(subject, message, user.email, attachment_filename, decoded_attachment_data)
                else:
                    send_admin_mass_email(subject, message, user.email)
                sent_count += 1
            except Exception as e:
                failed_count += 1
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.email}: {e}")
        
        if failed_count == 0:
            return jsonify({
                'success': True, 
                'message': f'–ü–∏—Å—å–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'
            })
        else:
            return jsonify({
                'success': True, 
                'message': f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–∏—Å–µ–º, {failed_count} –ø–∏—Å–µ–º –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'
            })
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        return jsonify({'success': False, 'message': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å–µ–º: {str(e)}'})

@app.route('/admin/teachers/mass-email', methods=['POST'])
@login_required
def admin_teachers_mass_email():
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ'})
    try:
        if not request.is_json:
            return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'})

        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'message': '–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã'})

        subject = sanitize_input(data.get('subject', ''), 200)
        message = validate_text_content(data.get('message', ''), 5000)
        attachment_filename = data.get('attachment_filename')
        attachment_data = data.get('attachment_data')  # base64 encoded image data

        if not subject or not message:
            return jsonify({'success': False, 'message': '–¢–µ–º–∞ –∏ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'})

        teachers = Teacher.query.filter(Teacher.is_active == True, Teacher.email.isnot(None)).all()
        if not teachers:
            return jsonify({'success': False, 'message': '–ù–µ—Ç —É—á–∏—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º'})

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        decoded_attachment_data = None
        if attachment_data:
            try:
                import base64
                decoded_attachment_data = base64.b64decode(attachment_data.split(',')[1] if ',' in attachment_data else attachment_data)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'})

        sent_count = 0
        failed_count = 0
        for teacher in teachers:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º –∏–ª–∏ –±–µ–∑
                if attachment_filename and decoded_attachment_data:
                    send_admin_mass_email_with_attachment(subject, message, teacher.email, attachment_filename, decoded_attachment_data)
                else:
                    send_admin_mass_email(subject, message, teacher.email)
                sent_count += 1
            except Exception as e:
                failed_count += 1
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —É—á–∏—Ç–µ–ª—é {teacher.email}: {e}")

        if failed_count == 0:
            return jsonify({'success': True, 'message': f'–ü–∏—Å—å–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {sent_count} —É—á–∏—Ç–µ–ª—è–º'})
        else:
            return jsonify({'success': True, 'message': f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–∏—Å–µ–º, {failed_count} –ø–∏—Å–µ–º –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —É—á–∏—Ç–µ–ª—è–º: {e}")
        return jsonify({'success': False, 'message': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å–µ–º: {str(e)}'})

@app.route('/send_feedback', methods=['POST'])
def send_feedback():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    try:
        data = request.get_json()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        name = data.get('name', '').strip()
        phone = data.get('phone', '').strip()
        email = data.get('email', '').strip()
        subject = data.get('subject', '').strip()
        message = data.get('message', '').strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not name or len(name) > 100:
            return jsonify({'success': False, 'message': '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤'})
        
        if not phone or len(phone) < 5:
            return jsonify({'success': False, 'message': '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤'})
        
        if not email or len(email) > 100:
            return jsonify({'success': False, 'message': 'Email –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤'})
        
        if not subject or len(subject) > 200:
            return jsonify({'success': False, 'message': '–¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤'})
        
        if not message or len(message) > 2000:
            return jsonify({'success': False, 'message': '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤'})
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        send_feedback_email(name, phone, email, subject, message)
        
        return jsonify({'success': True, 'message': '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'})
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        return jsonify({'success': False, 'message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è'})

@app.route('/admin/tournaments')
@login_required
def admin_tournaments():
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    tournaments = Tournament.query.order_by(Tournament.id.desc()).all()
    return render_template('admin/tournaments.html', title='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏', tournaments=tournaments)

def generate_unique_filename(filename):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ"""
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    ext = os.path.splitext(filename)[1]
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º timestamp –∏ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    unique_name = f"{datetime.now().strftime('%Y%m%d_%H%M%S')}_{secrets.token_hex(8)}{ext}"
    return unique_name

@app.route('/admin/tournaments/add', methods=['POST'])
@login_required
def admin_add_tournament():
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    title = sanitize_input(request.form.get('title'), 200)
    description = validate_text_content(request.form.get('description'), 2000)
    rules = validate_text_content(request.form.get('rules'), 2000)
    start_date = datetime.strptime(request.form.get('start_date'), '%Y-%m-%dT%H:%M')
    duration = int(request.form.get('duration'))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = request.files.get('image')
    image_filename = None
    if image and image.filename:
        image_filename = upload_file_to_s3(image, 'tournaments')
    
    tournament = Tournament(
        title=title,
        description=description,
        rules=rules,
        image=image_filename,
        start_date=start_date,
        duration=duration
    )
    
    db.session.add(tournament)
    db.session.commit()
    
    flash('–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', 'success')
    return redirect(url_for('admin_tournaments'))

@app.route('/admin/tournaments/<int:tournament_id>/edit', methods=['POST'])
@login_required
def admin_edit_tournament(tournament_id):
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    tournament = Tournament.query.get_or_404(tournament_id)
    
    tournament.title = sanitize_input(request.form.get('title'), 200)
    tournament.description = validate_text_content(request.form.get('description'), 2000)
    tournament.rules = validate_text_content(request.form.get('rules'), 2000)
    tournament.start_date = datetime.strptime(request.form.get('start_date'), '%Y-%m-%dT%H:%M')
    tournament.duration = int(request.form.get('duration'))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = request.files.get('image')
    if image and image.filename:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if tournament.image:
            delete_file_from_s3(tournament.image, 'tournaments')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_filename = upload_file_to_s3(image, 'tournaments')
        tournament.image = image_filename
    
    db.session.commit()
    
    flash('–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success')
    return redirect(url_for('admin_tournaments'))

@app.route('/admin/tournaments/<int:tournament_id>/activate', methods=['POST'])
@login_required
def admin_activate_tournament(tournament_id):
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    tournament = Tournament.query.get_or_404(tournament_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —Ç—É—Ä–Ω–∏—Ä
    if tournament.is_active:
        flash('–¢—É—Ä–Ω–∏—Ä —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', 'warning')
        return redirect(url_for('admin_tournaments'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∞–ª—Å—è –ª–∏ —É–∂–µ —Ç—É—Ä–Ω–∏—Ä
    if tournament.start_date <= datetime.now():
        flash('–ù–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –Ω–∞—á–∞—Ç—å—Å—è', 'danger')
        return redirect(url_for('admin_tournaments'))
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä
    tournament.is_active = True
    db.session.commit()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
    add_scheduler_job(start_tournament_job, tournament.start_date, tournament.id, 'start')
    end_time = tournament.start_date + timedelta(minutes=tournament.duration)
    add_scheduler_job(end_tournament_job, end_time, tournament.id, 'end')
    
    flash('–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', 'success')
    return redirect(url_for('admin_tournaments'))

@app.route('/admin/tournaments/<int:tournament_id>/deactivate', methods=['POST'])
@login_required
def admin_deactivate_tournament(tournament_id):
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    tournament = Tournament.query.get_or_404(tournament_id)
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    remove_scheduler_job(tournament.id, 'start')
    remove_scheduler_job(tournament.id, 'end')
    
    tournament.is_active = False
    db.session.commit()
    
    flash('–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', 'success')
    return redirect(url_for('admin_tournaments'))

@app.route('/admin/tournaments/<int:tournament_id>/delete', methods=['POST'])
@login_required
def admin_delete_tournament(tournament_id):
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    tournament = Tournament.query.get_or_404(tournament_id)
    
    # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if tournament.image:
        delete_file_from_s3(tournament.image, 'tournaments')
    
    db.session.delete(tournament)
    db.session.commit()
    
    flash('–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success')
    return redirect(url_for('admin_tournaments'))

@app.route('/admin/tournaments/<int:tournament_id>/stats')
@login_required
@limiter.limit("30 per minute; 5 per 10 seconds")
def admin_tournament_stats(tournament_id):
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    tournament = Tournament.query.get_or_404(tournament_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    total_participants = db.session.query(func.count(TournamentParticipation.id))\
        .filter(TournamentParticipation.tournament_id == tournament_id)\
        .scalar()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º
    all_tasks = get_tournament_tasks_cached(tournament_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
    tasks_stats = []
    for task in all_tasks:
        solved_count = db.session.query(func.count(SolvedTask.id))\
            .filter(SolvedTask.task_id == task.id).scalar()
        correct_count = db.session.query(func.count(SolvedTask.id))\
            .filter(SolvedTask.task_id == task.id, SolvedTask.is_correct == True).scalar()
        
        tasks_stats.append((task.id, task.title, task.points, solved_count, correct_count))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º
    tasks_data = []
    total_points_earned = 0
    
    for task_id, title, points, solved_count, correct_count in tasks_stats:
        if (solved_count or 0) > 0:
            solve_percentage = (correct_count or 0) / (solved_count or 0) * 100
        else:
            solve_percentage = 0
            
        tasks_data.append({
            'id': task_id,
            'title': title,
            'points': points,
            'solved_count': solved_count or 0,
            'correct_count': correct_count or 0,
            'solve_percentage': round(solve_percentage, 2)  # –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –æ—Ç –ø–æ–ø—ã—Ç–æ–∫
        })
        
        total_points_earned += points * (correct_count or 0)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    top_participants = db.session.query(
        User.username,
        TournamentParticipation.score
    ).join(
        TournamentParticipation,
        User.id == TournamentParticipation.user_id
    ).filter(
        TournamentParticipation.tournament_id == tournament_id
    ).order_by(
        TournamentParticipation.score.desc()
    ).limit(5).all()
    
    return jsonify({
        'tournament_title': tournament.title,
        'total_participants': total_participants,
        'tasks_stats': tasks_data,
        'total_points_earned': total_points_earned,
        'top_participants': [{'username': username, 'score': score} for username, score in top_participants]
    })

@app.route('/admin/shop')
@login_required
def admin_shop():
    if not current_user.is_admin:
        flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤', 'error')
        return redirect(url_for('home'))
    return render_template('admin/shop.html', title='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º')

@app.route('/admin/cache/info')
@login_required
def admin_cache_info():
    if not current_user.is_admin:
        flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤', 'error')
        return redirect(url_for('home'))
    
    cache_info = tournament_task_cache.get_cache_info()
    return render_template('admin/cache_info.html', cache_info=cache_info)

@app.route('/admin/cache/clear', methods=['POST'])
@login_required
def admin_clear_cache():
    if not current_user.is_admin:
        flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤', 'error')
        return redirect(url_for('admin_cache_info'))
    
    tournament_id = request.form.get('tournament_id', type=int)
    if tournament_id:
        tournament_task_cache.clear_tournament_cache(tournament_id)
        flash(f'–ö—ç—à —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id} –æ—á–∏—â–µ–Ω', 'success')
    else:
        tournament_task_cache.clear_all_cache()
        flash('–í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω', 'success')
    
    return redirect(url_for('admin_cache_info'))

@app.route('/admin/shop/tickets')
@login_required
def admin_tickets():
    if not current_user.is_admin:
        flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤', 'error')
        return redirect(url_for('home'))
    
    base_price = TicketPackage.query.filter_by(is_active=True).first()
    discounts = TicketDiscount.query.filter_by(is_active=True).order_by(TicketDiscount.min_quantity.asc()).all()
    
    return render_template('admin/tickets.html', 
                         title='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞–º–∏',
                         base_price=base_price,
                         discounts=discounts)

@app.route('/admin/shop/tickets/set-price', methods=['POST'])
@login_required
def admin_set_ticket_price():
    if not current_user.is_admin:
        flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤', 'error')
        return redirect(url_for('home'))
    
    price = request.form.get('price', type=float)
    if not price or price <= 0:
        flash('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞', 'danger')
        return redirect(url_for('admin_tickets'))
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –ø–∞–∫–µ—Ç
    old_package = TicketPackage.query.filter_by(is_active=True).first()
    if old_package:
        old_package.is_active = False
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç —Å –Ω–æ–≤–æ–π —Ü–µ–Ω–æ–π
    new_package = TicketPackage(price=price)
    db.session.add(new_package)
    db.session.commit()
    
    flash('–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success')
    return redirect(url_for('admin_tickets'))

@app.route('/admin/shop/tickets/discounts/add', methods=['POST'])
@login_required
def admin_add_ticket_discount():
    if not current_user.is_admin:
        flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤', 'error')
        return redirect(url_for('home'))
    
    min_quantity = request.form.get('min_quantity', type=int)
    discount = request.form.get('discount', type=int)
    
    if not all([min_quantity, discount]):
        flash('–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', 'danger')
        return redirect(url_for('admin_tickets'))
    
    if min_quantity < 1 or discount < 0 or discount > 100:
        flash('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è', 'danger')
        return redirect(url_for('admin_tickets'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Å–∫–∏–¥–∫–∏ –¥–ª—è —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    existing_discount = TicketDiscount.query.filter_by(min_quantity=min_quantity, is_active=True).first()
    if existing_discount:
        flash('–°–∫–∏–¥–∫–∞ –¥–ª—è —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'danger')
        return redirect(url_for('admin_tickets'))
    
    discount_obj = TicketDiscount(
        min_quantity=min_quantity,
        discount=discount
    )
    
    db.session.add(discount_obj)
    db.session.commit()
    
    flash('–°–∫–∏–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success')
    return redirect(url_for('admin_tickets'))

@app.route('/admin/shop/tickets/discounts/<int:discount_id>/delete', methods=['POST'])
@login_required
def admin_delete_ticket_discount(discount_id):
    if not current_user.is_admin:
        flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤', 'error')
        return redirect(url_for('home'))
    
    discount = TicketDiscount.query.get_or_404(discount_id)
    discount.is_active = False
    db.session.commit()
    
    flash('–°–∫–∏–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', 'success')
    return redirect(url_for('admin_tickets'))

@app.route('/admin/shop/prizes')
@login_required
def admin_prizes():
    if not current_user.is_admin:
        flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤', 'error')
        return redirect(url_for('home'))
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    page = request.args.get('page', 1, type=int)
    per_page = 12  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (3x4 —Å–µ—Ç–∫–∞)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–∑—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    pagination = Prize.query.order_by(Prize.points_cost.asc()).paginate(
        page=page, per_page=per_page, error_out=False
    )
    
    prizes = pagination.items
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
    tournament_settings = TournamentSettings.get_settings()
    
    return render_template('admin/prizes.html', 
                         title='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞–º–∏',
                         prizes=prizes,
                         pagination=pagination,
                         tournament_settings=tournament_settings)

@app.route('/admin/shop/prizes/add', methods=['POST'])
@login_required
def admin_add_prize():
    if not current_user.is_admin:
        flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤', 'error')
        return redirect(url_for('home'))
    
    name = request.form.get('name')
    description = request.form.get('description')
    points_cost = request.form.get('points_cost', type=int)
    quantity = request.form.get('quantity', type=int, default=0)
    is_unique = 'is_unique' in request.form
    is_for_teachers = 'is_for_teachers' in request.form
    
    if not all([name, description, points_cost]):
        flash('–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', 'danger')
        return redirect(url_for('admin_prizes'))
    
    if points_cost < 1 or quantity < 0:
        flash('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è', 'danger')
        return redirect(url_for('admin_prizes'))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = request.files.get('image')
    image_filename = None
    if image and image.filename:
        image_filename = upload_file_to_s3(image, 'prizes')
    
    prize = Prize(
        name=name,
        description=description,
        image=image_filename,
        points_cost=points_cost,
        quantity=quantity,
        is_unique=is_unique,
        is_for_teachers=is_for_teachers
    )
    
    db.session.add(prize)
    db.session.commit()
    
    flash('–ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', 'success')
    return redirect(url_for('admin_prizes'))

@app.route('/admin/shop/prizes/<int:prize_id>/delete', methods=['POST'])
@login_required
def admin_delete_prize(prize_id):
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}), 403
    
    prize = Prize.query.get_or_404(prize_id)
    
    try:
        # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if prize.image:
            delete_file_from_s3(prize.image, 'prizes')
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–∏–∑
        prize.is_active = False
        db.session.commit()
        
        return jsonify({'success': True, 'message': '–ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'})
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞'}), 500

@app.route('/admin/shop/prizes/<int:prize_id>/edit', methods=['GET', 'POST'])
@login_required
def admin_edit_prize(prize_id):
    if not current_user.is_admin:
        flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤', 'error')
        return redirect(url_for('home'))
    
    prize = Prize.query.get_or_404(prize_id)
    
    if request.method == 'POST':
        name = request.form.get('name')
        description = request.form.get('description')
        points_cost = request.form.get('points_cost', type=int)
        quantity = request.form.get('quantity', type=int, default=0)
        is_unique = 'is_unique' in request.form
        is_active = 'is_active' in request.form
        is_for_teachers = 'is_for_teachers' in request.form
        
        if not all([name, description, points_cost]):
            flash('–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', 'danger')
            return redirect(url_for('admin_edit_prize', prize_id=prize_id))
        
        if points_cost < 1 or quantity < 0:
            flash('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è', 'danger')
            return redirect(url_for('admin_edit_prize', prize_id=prize_id))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = request.files.get('image')
        if image and image.filename:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if prize.image:
                delete_file_from_s3(prize.image, 'prizes')
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_filename = upload_file_to_s3(image, 'prizes')
            prize.image = image_filename
        
        prize.name = name
        prize.description = description
        prize.points_cost = points_cost
        prize.quantity = quantity
        prize.is_unique = is_unique
        prize.is_active = is_active
        prize.is_for_teachers = is_for_teachers
        
        db.session.commit()
        flash('–ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success')
        return redirect(url_for('admin_prizes'))
    
    return render_template('admin/edit_prize.html', prize=prize)

@app.route('/admin/tournaments/<int:tournament_id>/configure')
@login_required
def configure_tournament(tournament_id):
    if not current_user.is_admin:
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', 'danger')
        return redirect(url_for('home'))
    
    tournament = Tournament.query.get_or_404(tournament_id)
    return render_template('admin/configure_tournament.html', tournament=tournament)

@app.route('/admin/tournaments/<int:tournament_id>/tasks/add', methods=['POST'])
@login_required
def add_tournament_task(tournament_id):
    if not current_user.is_admin:
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', 'danger')
        return redirect(url_for('home'))
    
    tournament = Tournament.query.get_or_404(tournament_id)
    
    title = request.form.get('title')
    description = request.form.get('description')
    points = request.form.get('points')
    correct_answer = request.form.get('correct_answer')
    category = request.form.get('category')
    topic = request.form.get('topic')
    solution_text = request.form.get('solution_text')
    
    if not all([title, description, points, correct_answer, category]):
        flash('–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', 'danger')
        return redirect(url_for('configure_tournament', tournament_id=tournament_id))
    
    try:
        points = int(points)
        if points < 1:
            raise ValueError
    except ValueError:
        flash('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º', 'danger')
        return redirect(url_for('configure_tournament', tournament_id=tournament_id))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    image = request.files.get('image')
    image_filename = None
    if image and image.filename:
        image_filename = upload_file_to_s3(image, 'tasks')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è
    solution_image = request.files.get('solution_image')
    solution_image_filename = None
    if solution_image and solution_image.filename:
        solution_image_filename = upload_file_to_s3(solution_image, 'tasks')
    
    task = Task(
        tournament_id=tournament_id,
        title=title,
        description=description,
        image=image_filename,
        points=points,
        correct_answer=correct_answer,
        category=category,
        topic=topic,
        solution_text=solution_text,
        solution_image=solution_image_filename
    )
    
    db.session.add(task)
    db.session.commit()
    
    flash('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success')
    return redirect(url_for('configure_tournament', tournament_id=tournament_id))

@app.route('/admin/tournaments/<int:tournament_id>/tasks/<int:task_id>/edit', methods=['POST'])
@login_required
def edit_tournament_task(tournament_id, task_id):
    if not current_user.is_admin:
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', 'danger')
        return redirect(url_for('home'))
    
    tournament = Tournament.query.get_or_404(tournament_id)
    task = Task.query.get_or_404(task_id)
    
    if task.tournament_id != tournament_id:
        flash('–ó–∞–¥–∞—á–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç—É—Ä–Ω–∏—Ä—É', 'danger')
        return redirect(url_for('configure_tournament', tournament_id=tournament_id))
    
    title = request.form.get('title')
    description = request.form.get('description')
    points = request.form.get('points')
    correct_answer = request.form.get('correct_answer')
    topic = request.form.get('topic')
    solution_text = request.form.get('solution_text')
    
    if not all([title, description, points, correct_answer]):
        flash('–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', 'danger')
        return redirect(url_for('configure_tournament', tournament_id=tournament_id))
    
    try:
        points = int(points)
        if points < 1:
            raise ValueError
    except ValueError:
        flash('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º', 'danger')
        return redirect(url_for('configure_tournament', tournament_id=tournament_id))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    image = request.files.get('image')
    if image and image.filename:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if task.image:
            delete_file_from_s3(task.image, 'tasks')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_filename = upload_file_to_s3(image, 'tasks')
        task.image = image_filename
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è
    solution_image = request.files.get('solution_image')
    if solution_image and solution_image.filename:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
        if task.solution_image:
            delete_file_from_s3(task.solution_image, 'tasks')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
        solution_image_filename = upload_file_to_s3(solution_image, 'tasks')
        task.solution_image = solution_image_filename
    
    task.title = title
    task.description = description
    task.points = points
    task.correct_answer = correct_answer
    task.topic = topic
    task.solution_text = solution_text
    
    db.session.commit()
    
    flash('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success')
    return redirect(url_for('configure_tournament', tournament_id=tournament_id))

@app.route('/admin/tournaments/<int:tournament_id>/tasks/<int:task_id>/delete', methods=['POST'])
@login_required
def delete_tournament_task(tournament_id, task_id):
    if not current_user.is_admin:
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', 'danger')
        return redirect(url_for('home'))
    
    tournament = Tournament.query.get_or_404(tournament_id)
    task = Task.query.get_or_404(task_id)
    
    if task.tournament_id != tournament_id:
        flash('–ó–∞–¥–∞—á–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç—É—Ä–Ω–∏—Ä—É', 'danger')
        return redirect(url_for('configure_tournament', tournament_id=tournament_id))
    
    # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    if task.image:
        delete_file_from_s3(task.image, 'tasks')
    
    # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
    if task.solution_image:
        delete_file_from_s3(task.solution_image, 'tasks')
    
    db.session.delete(task)
    db.session.commit()
    
    flash('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', 'success')
    return redirect(url_for('configure_tournament', tournament_id=tournament_id))

def is_password_strong(password):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞—Ä–æ–ª—å —Å—Ç—Ä–æ–≥–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
    - –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤
    - –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞
    - –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞
    - –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞
    - –•–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
    """
    if len(password) < 8:
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤"
    
    if not any(c.isupper() for c in password):
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É"
    
    if not any(c.islower() for c in password):
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É"
    
    if not any(c.isdigit() for c in password):
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    special_chars = "!@#$%^&*()_+-=[]{}|;:,.<>?"
    if not any(c in special_chars for c in password):
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª (!@#$%^&*()_+-=[]{}|;:,.<>?)"
    
    return True, "–ü–∞—Ä–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"

def is_valid_username(username):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    if not all(c.isalnum() or c == '_' for c in username):
        return False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É
    if not any(c.isalpha() for c in username):
        return False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    if len(username) < 3:
        return False
    return True

def sanitize_input(input_string, max_length=100):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—á–∏—â–∞–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    if not input_string:
        return ''
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(input_string) > max_length:
        input_string = input_string[:max_length]
    
    # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è SQL
    dangerous_chars = [';', '--', '/*', '*/', 'xp_', 'sp_', 'exec', 'execute', 'union', 'select', 'insert', 'update', 'delete', 'drop', 'create', 'alter']
    input_lower = input_string.lower()
    for char in dangerous_chars:
        if char in input_lower:
            return ''
    
    return input_string.strip()

def validate_email(email):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞"""
    import re
    if not email:
        return False
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def validate_phone(phone):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    import re
    if not phone:
        return False
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    digits_only = re.sub(r'\D', '', phone)
    return len(digits_only) >= 9 and len(digits_only) <= 15

def validate_name(name, max_length=100):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ (—Å—Ç—É–¥–µ–Ω—Ç–∞, —Ä–æ–¥–∏—Ç–µ–ª—è)"""
    if not name:
        return False
    if len(name) > max_length:
        return False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ —Ç–æ—á–∫–∏
    import re
    pattern = r'^[–∞-—è–ê-–Øa-zA-Z\s\-\.]+$'
    return re.match(pattern, name) is not None

def validate_text_content(text, max_length=1000):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–æ–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–∞–≤–∏–ª–∞)"""
    if not text:
        return False
    if len(text) > max_length:
        return False
    # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ HTML —Ç–µ–≥–∏
    import re
    text = re.sub(r'<[^>]*>', '', text)
    return text.strip()

def validate_integer(value, min_val=None, max_val=None):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞"""
    try:
        int_val = int(value)
        if min_val is not None and int_val < min_val:
            return False
        if max_val is not None and int_val > max_val:
            return False
        return True
    except (ValueError, TypeError):
        return False

def validate_float(value, min_val=None, max_val=None):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π"""
    try:
        float_val = float(value)
        if min_val is not None and float_val < min_val:
            return False
        if max_val is not None and float_val > max_val:
            return False
        return True
    except (ValueError, TypeError):
        return False

@app.route('/check-username', methods=['POST'])
def check_username():
    data = request.get_json()
    username = data.get('username', '').strip()
    user_type = data.get('type', 'user')  # 'user' –∏–ª–∏ 'teacher'
    
    if not username:
        return jsonify({'available': False})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    existing_user = User.query.filter(User.username.ilike(username)).first()
    existing_teacher = Teacher.query.filter(Teacher.username.ilike(username)).first()
    
    # –õ–æ–≥–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ª—é–±–æ–π –∏–∑ —Ç–∞–±–ª–∏—Ü
    is_available = existing_user is None and existing_teacher is None
    
    return jsonify({'available': is_available})

@app.route('/check-email', methods=['POST'])
@limiter.limit("10 per minute; 3 per 10 seconds")
def check_email():
    data = request.get_json()
    email = data.get('email', '').strip()
    user_type = data.get('type', 'user')  # 'user' –∏–ª–∏ 'teacher'
    
    if not email:
        return jsonify({'available': False})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    existing_user = User.query.filter_by(email=email).first()
    existing_teacher = Teacher.query.filter_by(email=email).first()
    
    # Email –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ª—é–±–æ–π –∏–∑ —Ç–∞–±–ª–∏—Ü
    is_available = existing_user is None and existing_teacher is None
    
    return jsonify({'available': is_available})

@app.route('/check-phone', methods=['POST'])
@limiter.limit("10 per minute; 3 per 10 seconds")
def check_phone():
    data = request.get_json()
    phone = data.get('phone', '').strip()
    user_type = data.get('type', 'user')  # 'user' –∏–ª–∏ 'teacher'
    
    if not phone:
        return jsonify({'available': False})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    existing_user = User.query.filter_by(phone=phone).first()
    existing_teacher = Teacher.query.filter_by(phone=phone).first()
    
    # –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ª—é–±–æ–π –∏–∑ —Ç–∞–±–ª–∏—Ü
    is_available = existing_user is None and existing_teacher is None
    
    return jsonify({'available': is_available})

@app.route('/register', methods=['GET', 'POST'])
@limiter.limit("10 per minute")
@redirect_if_authenticated
def register():
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏ –∫–æ–¥ —É—á–∏—Ç–µ–ª—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    referral_code = request.args.get('ref')
    teacher_code = request.args.get('teacher')
    referral_link = None
    teacher_invite_link = None
    
    if referral_code:
        referral_link = get_referral_link_by_code(referral_code)
    
    if teacher_code:
        teacher_invite_link = get_teacher_invite_link_by_code(teacher_code)
    
    if request.method == 'POST':
        username = sanitize_input(request.form.get('username'), 80)
        email = sanitize_input(request.form.get('email'), 120)
        phone = sanitize_input(request.form.get('phone'), 20)
        student_name = sanitize_input(request.form.get('student_name'), 100)
        parent_name = sanitize_input(request.form.get('parent_name'), 100)
        category = request.form.get('category')
        password = request.form.get('password')
        confirm_password = request.form.get('confirm_password')
        edu_id = request.form.get('educational_institution_id')
        edu_name = sanitize_input(request.form.get('educational_institution_name'), 500)
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ —Ñ–æ—Ä–º—ã
        form_referral_code = sanitize_input(request.form.get('referral_code'), 50)
        if form_referral_code:
            referral_link = get_referral_link_by_code(form_referral_code)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —É—á–∏—Ç–µ–ª—è –∏–∑ —Ñ–æ—Ä–º—ã
        form_teacher_code = sanitize_input(request.form.get('teacher_code'), 50)
        if form_teacher_code:
            teacher_invite_link = get_teacher_invite_link_by_code(form_teacher_code)

        if not is_valid_username(username):
            flash('–õ–æ–≥–∏–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 3 —Å–∏–º–≤–æ–ª–∞, –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É.', 'danger')
            return redirect(url_for('register'))

        if not validate_email(email):
            flash('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å', 'danger')
            return redirect(url_for('register'))

        if not validate_name(student_name):
            flash('–ò–º—è —É—á–∞—â–µ–≥–æ—Å—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ —Ç–æ—á–∫–∏', 'danger')
            return redirect(url_for('register'))

        if parent_name and not validate_name(parent_name):
            flash('–ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ —Ç–æ—á–∫–∏', 'danger')
            return redirect(url_for('register'))

        if not validate_phone(phone):
            flash('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'danger')
            return redirect(url_for('register'))

        is_strong, message = is_password_strong(password)
        if not is_strong:
            flash(message, 'danger')
            return redirect(url_for('register'))

        if password != confirm_password:
            flash('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'danger')
            return redirect(url_for('register'))

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_country = request.form.get('phone_country', '+375')
        phone_number = phone.strip()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        full_phone = phone_country + phone_number
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω—ã
        if phone_country == '+375':
            if not re.match(r'^[0-9]{9}$', phone_number):
                flash('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ë–µ–ª–∞—Ä—É—Å–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 9 —Ü–∏—Ñ—Ä', 'danger')
                return redirect(url_for('register'))
        elif phone_country == '+7':
            if not re.match(r'^[0-9]{10}$', phone_number):
                flash('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –†–æ—Å—Å–∏–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 —Ü–∏—Ñ—Ä', 'danger')
                return redirect(url_for('register'))
        else:
            flash('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã', 'danger')
            return redirect(url_for('register'))

        if not category or category not in ['1-2', '3', '4', '5', '6', '7', '8', '9', '10', '11']:
            flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É', 'danger')
            return redirect(url_for('register'))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏
        if not request.form.get('agree'):
            flash('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', 'danger')
            return redirect(url_for('register'))

        if not request.form.get('agree_terms'):
            flash('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã', 'danger')
            return redirect(url_for('register'))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        if User.query.filter(User.username.ilike(username)).first() or Teacher.query.filter(Teacher.username.ilike(username)).first():
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'danger')
            return redirect(url_for('register'))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        if User.query.filter_by(email=email).first() or Teacher.query.filter_by(email=email).first():
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'danger')
            return redirect(url_for('register'))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        if User.query.filter_by(phone=full_phone).first() or Teacher.query.filter_by(phone=full_phone).first():
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'danger')
            return redirect(url_for('register'))

        user = User(
            username=username,
            email=email,
            phone=full_phone,
            student_name=student_name,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —É—á–∞—â–µ–≥–æ—Å—è
            parent_name=parent_name,
            category=category
        )
        user.set_password(password)
        user.temp_password = password
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —É—á–∏—Ç–µ–ª—é, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        if teacher_invite_link:
            user.teacher_id = teacher_invite_link.teacher_id
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        if edu_id:
            user.educational_institution_id = int(edu_id)
        elif edu_name:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            existing = EducationalInstitution.query.filter_by(name=edu_name).first()
            if existing:
                user.educational_institution_id = existing.id
            else:
                new_edu = EducationalInstitution(name=edu_name, address='')
                db.session.add(new_edu)
                db.session.commit()
                user.educational_institution_id = new_edu.id
        
        db.session.add(user)
        db.session.commit()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        if referral_link:
            try:
                create_referral(referral_link.user_id, user.id, referral_link.id)
                flash('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!', 'info')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {e}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è
        if teacher_invite_link:
            try:
                user.teacher_id = teacher_invite_link.teacher_id
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ —É—á–∏—Ç–µ–ª–µ–º
                create_teacher_referral(teacher_invite_link.teacher_id, user.id, teacher_invite_link.id)
                flash('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ —É—á–∏—Ç–µ–ª—é!', 'info')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –∫ —É—á–∏—Ç–µ–ª—é: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        send_confirmation_email(user)
        
        flash('–ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–∫–∂–µ –ø–∞–ø–∫—É "–°–ø–∞–º", –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –ø—Ä–∏—à–ª–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.', 'success')
        return redirect(url_for('login'))

    return render_template('register.html', 
                          referral_code=referral_code, 
                          teacher_code=teacher_code,
                          teacher_invite_link=teacher_invite_link)

# –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π
@app.route('/teacher-register', methods=['GET', 'POST'])
@redirect_if_authenticated
def teacher_register():
    if request.method == 'POST':
        username = sanitize_input(request.form.get('username'), 80)
        email = sanitize_input(request.form.get('email'), 120)
        phone = sanitize_input(request.form.get('phone'), 20)
        full_name = sanitize_input(request.form.get('full_name'), 100)
        password = request.form.get('password')
        confirm_password = request.form.get('confirm_password')
        edu_id = request.form.get('educational_institution_id')
        edu_name = sanitize_input(request.form.get('educational_institution_name'), 500)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not is_valid_username(username):
            flash('–õ–æ–≥–∏–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 3 —Å–∏–º–≤–æ–ª–∞, –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É.', 'danger')
            return redirect(url_for('teacher_register'))

        if not validate_email(email):
            flash('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å', 'danger')
            return redirect(url_for('teacher_register'))

        if not validate_name(full_name):
            flash('–§–ò–û –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ —Ç–æ—á–∫–∏', 'danger')
            return redirect(url_for('teacher_register'))

        if not validate_phone(phone):
            flash('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'danger')
            return redirect(url_for('teacher_register'))

        is_strong, message = is_password_strong(password)
        if not is_strong:
            flash(message, 'danger')
            return redirect(url_for('teacher_register'))

        if password != confirm_password:
            flash('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'danger')
            return redirect(url_for('teacher_register'))

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_country = request.form.get('phone_country', '+375')
        phone_number = phone.strip()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        full_phone = phone_country + phone_number
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω—ã
        if phone_country == '+375':
            if not re.match(r'^[0-9]{9}$', phone_number):
                flash('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ë–µ–ª–∞—Ä—É—Å–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 9 —Ü–∏—Ñ—Ä', 'danger')
                return redirect(url_for('teacher_register'))
        elif phone_country == '+7':
            if not re.match(r'^[0-9]{10}$', phone_number):
                flash('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –†–æ—Å—Å–∏–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 —Ü–∏—Ñ—Ä', 'danger')
                return redirect(url_for('teacher_register'))
        else:
            flash('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã', 'danger')
            return redirect(url_for('teacher_register'))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        if User.query.filter(User.username.ilike(username)).first() or Teacher.query.filter(Teacher.username.ilike(username)).first():
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'danger')
            return redirect(url_for('teacher_register'))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        if User.query.filter_by(email=email).first() or Teacher.query.filter_by(email=email).first():
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'danger')
            return redirect(url_for('teacher_register'))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        if User.query.filter_by(phone=full_phone).first() or Teacher.query.filter_by(phone=full_phone).first():
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'danger')
            return redirect(url_for('teacher_register'))

        teacher = Teacher(
            username=username,
            email=email,
            phone=full_phone,
            full_name=full_name
        )
        teacher.set_password(password)
        teacher.temp_password = password
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        if edu_id:
            teacher.educational_institution_id = int(edu_id)
        elif edu_name:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ
            existing = EducationalInstitution.query.filter_by(name=edu_name).first()
            if existing:
                teacher.educational_institution_id = existing.id
            else:
                new_edu = EducationalInstitution(name=edu_name, address='')
                db.session.add(new_edu)
                db.session.commit()
                teacher.educational_institution_id = new_edu.id
        
        db.session.add(teacher)
        db.session.commit()

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —É—á–∏—Ç–µ–ª—è
        create_teacher_invite_link(teacher.id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        send_teacher_confirmation_email(teacher)
        
        flash('–ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–∫–∂–µ –ø–∞–ø–∫—É "–°–ø–∞–º", –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –ø—Ä–∏—à–ª–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.', 'success')
        return redirect(url_for('login'))

    return render_template('teacher_register.html')

@app.route('/confirm/<token>')
@redirect_if_authenticated
def confirm_email(token):
    user = User.query.filter_by(email_confirmation_token=token).first()
    if user:
        user.is_active = True
        user.email_confirmation_token = None
        db.session.commit()
        
        # –°–æ–∑–¥–∞–µ–º PDF —Ñ–∞–π–ª —Å —Å–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        create_consent_pdf(user)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        password = user.temp_password
        if password:
            send_credentials_email(user, password)
            user.temp_password = None
            db.session.commit()
        
        flash('Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.', 'success')
    else:
        flash('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å—Å—ã–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.', 'danger')
    return redirect(url_for('login'))

@app.route('/confirm-teacher/<token>')
@redirect_if_authenticated
def confirm_teacher_email(token):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –¥–ª—è —É—á–∏—Ç–µ–ª—è"""
    teacher = Teacher.query.filter_by(email_confirmation_token=token).first()
    if teacher:
        teacher.is_active = True
        teacher.email_confirmation_token = None
        db.session.commit()
        
        # –°–æ–∑–¥–∞–µ–º PDF —Ñ–∞–π–ª —Å —Å–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        create_consent_pdf(teacher)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        password = teacher.temp_password
        if password:
            send_teacher_credentials_email(teacher, password)
            teacher.temp_password = None
            db.session.commit()
        
        flash('Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –∫–∞–∫ —É—á–∏—Ç–µ–ª—å.', 'success')
    else:
        flash('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å—Å—ã–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.', 'danger')
    return redirect(url_for('login'))

def get_user_rank(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user = User.query.get(user_id)
    if not user:
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –±–∞–ª–∞–Ω—Å—É
    users = User.query.filter_by(category=user.category).order_by(User.balance.desc()).all()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
    for index, u in enumerate(users, 1):
        if u.id == user_id:
            return index
    return None

@app.route('/profile')
@login_required
def profile():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∏—Ç–µ–ª–µ–º
    if isinstance(current_user, Teacher):
        return redirect(url_for('teacher_profile'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if hasattr(current_user, 'is_admin') and current_user.is_admin:
        return redirect(url_for('admin_dashboard'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time = datetime.now()
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –±—É–¥—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã
    next_tournament = Tournament.query.filter(
        Tournament.start_date > current_time,
        Tournament.is_active == True
    ).order_by(Tournament.start_date.asc()).first()
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –±—É–¥—É—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤, –∏—â–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
    if not next_tournament:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞—á–∞–ª–∏—Å—å
        active_tournaments = Tournament.query.filter(
            Tournament.start_date <= current_time,
            Tournament.is_active == True
        ).order_by(Tournament.start_date.desc()).all()
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç—É—Ä–Ω–∏—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏–¥–µ—Ç —Å–µ–π—á–∞—Å
        for tournament in active_tournaments:
            end_time = tournament.start_date + timedelta(minutes=tournament.duration)
            if current_time <= end_time:
                next_tournament = tournament
                break
    
    user_rank = current_user.category_rank
    settings = TournamentSettings.get_settings()
    
    return render_template('profile.html', 
                         title='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 
                         user_rank=user_rank,
                         next_tournament=next_tournament,
                         now=current_time,
                         settings=settings)

@app.route('/teacher-profile')
@login_required
def teacher_profile():
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —É—á–∏—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∏—Ç–µ–ª–µ–º
    if not isinstance(current_user, Teacher):
        flash('–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π', 'error')
        return redirect(url_for('home'))
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    invite_link = create_teacher_invite_link(current_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–µ–Ω–∏–∫–æ–≤
    students = User.query.filter_by(teacher_id=current_user.id).all()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_students = len(students)
    active_students = len([s for s in students if s.tournaments_count > 0])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ–Ω—É—Å–æ–≤ —É—á–∏—Ç–µ–ª—è
    teacher_referrals = TeacherReferral.query.filter_by(teacher_id=current_user.id).all()
    total_referrals = len(teacher_referrals)
    paid_referrals = len([r for r in teacher_referrals if r.bonus_paid])
    pending_referrals = total_referrals - paid_referrals
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤
    page = request.args.get('page', 1, type=int)
    per_page = 15  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–µ–Ω–∏–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    students_paginated = User.query.filter_by(teacher_id=current_user.id)\
        .order_by(User.created_at.desc())\
        .paginate(page=page, per_page=per_page, error_out=False)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–Ω–∏–∫–∞—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    students_info = []
    for student in students_paginated.items:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä —É—á–µ–Ω–∏–∫–∞
        last_participation = TournamentParticipation.query.filter_by(user_id=student.id)\
            .order_by(TournamentParticipation.participation_date.desc()).first()
        
        students_info.append({
            'id': student.id,
            'username': student.username,
            'student_name': student.student_name,
            'parent_name': student.parent_name,
            'email': student.email,
            'phone': student.phone,
            'category': student.category,
            'balance': student.balance,
            'tickets': student.tickets,
            'tournaments_count': student.tournaments_count,
            'created_at': student.created_at.strftime('%d.%m.%Y'),
            'last_participation': last_participation.participation_date.strftime('%d.%m.%Y') if last_participation else '–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª',
            'is_active': student.is_active,
            'is_blocked': student.is_blocked
        })
    
    return render_template('teacher_profile.html',
                         title='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —É—á–∏—Ç–µ–ª—è',
                         invite_link=invite_link,
                         total_students=total_students,
                         active_students=active_students,
                         students_info=students_info,
                         students_paginated=students_paginated,
                         total_referrals=total_referrals,
                         paid_referrals=paid_referrals,
                         pending_referrals=pending_referrals,
                         bonus_points=TEACHER_REFERRAL_BONUS_POINTS)

@app.route('/update-teacher-profile', methods=['POST'])
@login_required
def update_teacher_profile():
    if not isinstance(current_user, Teacher):
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π'}), 403
    try:
        data = request.get_json() or {}
        full_name = sanitize_input(data.get('full_name', ''), 100)
        phone = sanitize_input(data.get('phone', ''), 20)
        edu_name = sanitize_input(data.get('educational_institution_name', ''), 500)
        new_password = data.get('new_password')

        if not full_name:
            return jsonify({'success': False, 'message': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è'}), 400

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        if phone:
            existing_teacher_phone = Teacher.query.filter(Teacher.phone == phone, Teacher.id != current_user.id).first()
            if existing_teacher_phone:
                return jsonify({'success': False, 'message': '–¢–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è'}), 400

        current_user.full_name = full_name
        current_user.phone = phone or None

        # –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if new_password:
            is_strong, msg = is_password_strong(new_password)
            if not is_strong:
                return jsonify({'success': False, 'message': msg}), 400
            current_user.set_password(new_password)

        if edu_name:
            existing = EducationalInstitution.query.filter_by(name=edu_name).first()
            if existing:
                current_user.educational_institution_id = existing.id
            else:
                new_edu = EducationalInstitution(name=edu_name, address='')
                db.session.add(new_edu)
                db.session.flush()
                current_user.educational_institution_id = new_edu.id
        else:
            current_user.educational_institution_id = None

        db.session.commit()
        return jsonify({'success': True})
    except Exception as e:
        db.session.rollback()
        print(f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —É—á–∏—Ç–µ–ª—è: {e}')
        return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'}), 500

@app.route('/teacher/student/<int:student_id>/details')
@login_required
def teacher_student_details(student_id):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—â–µ–º—Å—è —É—á–∏—Ç–µ–ª–µ–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É—á–∏—Ç–µ–ª—å
    if not hasattr(current_user, 'full_name') or not current_user.full_name:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—â–µ–≥–æ—Å—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É —É—á–∏—Ç–µ–ª—é
    student = User.query.filter_by(id=student_id, teacher_id=current_user.id).first()
    if not student:
        flash('–£—á–∞—â–∏–π—Å—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º', 'danger')
        return redirect(url_for('teacher_profile'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—â–µ–≥–æ—Å—è
    from sqlalchemy import func, case
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_tournaments = student.tournaments_count
    total_balance = student.balance
    
    # –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±–µ—Ä–µ–º –∏–∑ –ø–æ–ª—è category_rank)
    category_rank = student.category_rank
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—É—Ä–Ω–∏—Ä–∞–º
    tournaments_stats = db.session.query(
        func.count(TournamentParticipation.id).label('total_participations'),
        func.sum(TournamentParticipation.score).label('total_score'),
        func.avg(TournamentParticipation.score).label('avg_score'),
        func.max(TournamentParticipation.score).label('best_score'),
        func.min(TournamentParticipation.place).label('best_place')
    ).filter(
        TournamentParticipation.user_id == student.id
    ).first()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—à–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º
    tasks_stats = db.session.query(
        func.count(SolvedTask.id).label('total_solved'),
        func.sum(case((SolvedTask.is_correct == True, 1), else_=0)).label('correct_solved'),
        func.sum(case((SolvedTask.is_correct == True, Task.points), else_=0)).label('total_points')
    ).join(
        Task, SolvedTask.task_id == Task.id
    ).filter(
        SolvedTask.user_id == student.id
    ).first()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—É—Ä–Ω–∏—Ä–æ–≤ —É—á–∞—â–µ–≥–æ—Å—è
    page = request.args.get('page', 1, type=int)
    per_page = 10
    
    tournaments_query = db.session.query(
        Tournament,
        TournamentParticipation.score,
        TournamentParticipation.place,
        func.count(SolvedTask.id).label('solved_tasks'),
        func.sum(case((SolvedTask.is_correct == True, Task.points), else_=0)).label('earned_points'),
        func.count(case((SolvedTask.is_correct == True, 1))).label('correct_tasks'),
        func.count(Task.id).label('total_tasks')
    ).join(
        TournamentParticipation,
        Tournament.id == TournamentParticipation.tournament_id
    ).outerjoin(
        Task,
        Tournament.id == Task.tournament_id
    ).outerjoin(
        SolvedTask,
        (Task.id == SolvedTask.task_id) & (SolvedTask.user_id == student.id)
    ).filter(
        TournamentParticipation.user_id == student.id
    ).group_by(
        Tournament.id,
        TournamentParticipation.score,
        TournamentParticipation.place
    ).order_by(
        Tournament.start_date.desc()
    )
    
    tournaments_paginated = tournaments_query.paginate(page=page, per_page=per_page, error_out=False)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
    tournament_list = []
    for tournament, score, place, solved_tasks, earned_points, correct_tasks, total_tasks in tournaments_paginated.items:
        success_rate = round((correct_tasks or 0) / (total_tasks or 1) * 100, 1)
        
        tournament_list.append({
            'id': tournament.id,
            'name': tournament.title,
            'start_date': tournament.start_date,
            'status': tournament.status,
            'solved_tasks': solved_tasks or 0,
            'earned_points': earned_points or 0,
            'score': score or 0,
            'place': place,
            'success_rate': success_rate
        })
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    student_stats = {
        'total_tournaments': total_tournaments,
        'total_balance': total_balance,
        'category_rank': category_rank,
        'total_participations': tournaments_stats.total_participations or 0,
        'total_score': tournaments_stats.total_score or 0,
        'avg_score': round(tournaments_stats.avg_score or 0, 1),
        'best_score': tournaments_stats.best_score or 0,
        'best_place': tournaments_stats.best_place,
        'total_solved_tasks': tasks_stats.total_solved or 0,
        'correct_solved_tasks': tasks_stats.correct_solved or 0,
        'total_points': tasks_stats.total_points or 0
    }
    
    return render_template('teacher_student_details.html',
                         student=student,
                         student_stats=student_stats,
                         tournaments=tournament_list,
                         pagination=tournaments_paginated)

@app.route('/teacher/student/<int:student_id>/tournament/<int:tournament_id>/results')
@login_required
def teacher_student_tournament_results(student_id, tournament_id):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É—á–µ–Ω–∏–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ —É—á–∏—Ç–µ–ª–µ–º
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É—á–∏—Ç–µ–ª—å
    if not hasattr(current_user, 'full_name') or not current_user.full_name:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—â–µ–≥–æ—Å—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É —É—á–∏—Ç–µ–ª—é
    student = User.query.filter_by(id=student_id, teacher_id=current_user.id).first()
    if not student:
        flash('–£—á–∞—â–∏–π—Å—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º', 'danger')
        return redirect(url_for('teacher_profile'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
    tournament = Tournament.query.get_or_404(tournament_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ —Ç—É—Ä–Ω–∏—Ä
    if tournament.status != 'finished':
        flash('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–∞ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', 'warning')
        return redirect(url_for('teacher_student_details', student_id=student_id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ª–∏ —É—á–µ–Ω–∏–∫ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ
    participation = TournamentParticipation.query.filter_by(
        user_id=student_id,
        tournament_id=tournament_id
    ).first()
    
    if not participation:
        flash('–£—á–∞—â–∏–π—Å—è –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ', 'danger')
        return redirect(url_for('teacher_student_details', student_id=student_id))
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—á–µ–Ω–∏–∫–∞
    user_tasks = get_tournament_tasks_cached(tournament_id, student.category)
    user_tasks.sort(key=lambda x: x.id)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É—á–µ–Ω–∏–∫–∞
    solved_tasks = SolvedTask.query.filter_by(
        user_id=student_id
    ).join(Task).filter(Task.tournament_id == tournament_id).all()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    solved_tasks_dict = {task.task_id: task for task in solved_tasks}
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–∞—Ö
    tasks_data = []
    for task in user_tasks:
        solved_task = solved_tasks_dict.get(task.id)
        tasks_data.append({
            'task': task,
            'is_solved': solved_task is not None,
            'is_correct': solved_task.is_correct if solved_task else False,
            'user_answer': solved_task.user_answer if solved_task else None,
            'solved_at': solved_task.solved_at if solved_task else None
        })
    
    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    solved_count = len([t for t in tasks_data if t['is_solved']])
    correct_count = len([t for t in tasks_data if t['is_correct']])
    earned_points = sum(t['task'].points for t in tasks_data if t['is_correct'])
    total_points = sum(t['task'].points for t in tasks_data)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    success_rate = round((correct_count / len(tasks_data)) * 100, 1) if tasks_data and len(tasks_data) > 0 else 0
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è
    if participation.end_time:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        time_spent = (participation.end_time - participation.start_time).total_seconds()
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞), 
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ 0
        last_solved_task = SolvedTask.query.filter_by(
            user_id=student.id
        ).join(Task).filter(
            Task.tournament_id == tournament_id
        ).order_by(SolvedTask.solved_at.desc()).first()
        
        if last_solved_task:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π
            time_spent = (last_solved_task.solved_at - participation.start_time).total_seconds()
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –≤—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è = 0
            time_spent = 0
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–º—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    topics_to_review = set()  # –¢–µ–º—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    additional_topics = set()  # –¢–µ–º—ã –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    
    for task_data in tasks_data:
        task = task_data['task']
        if task.topic:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–∞ —É–∫–∞–∑–∞–Ω–∞
            if task_data['is_solved'] and not task_data['is_correct']:
                # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
                topics_to_review.add(task.topic)
            elif not task_data['is_solved']:
                # –ù–µ—Ä–µ—à–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
                additional_topics.add(task.topic)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–º (–µ—Å–ª–∏ —Ç–µ–º–∞ —É–∂–µ –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö)
    additional_topics = additional_topics - topics_to_review
    
    return render_template('teacher_student_tournament_results.html',
                         tournament=tournament,
                         student=student,
                         tasks_data=tasks_data,
                         solved_count=solved_count,
                         correct_count=correct_count,
                         earned_points=earned_points,
                         total_points=total_points,
                         success_rate=success_rate,
                         participation=participation,
                         time_spent=time_spent,
                         topics_to_review=sorted(list(topics_to_review)),
                         additional_topics=sorted(list(additional_topics)))

@app.route('/buy-tickets')
@login_required
def buy_tickets():
    if current_user.is_admin:
        return redirect(url_for('admin_dashboard'))
    
    base_price = TicketPackage.query.filter_by(is_active=True).first()
    if not base_price:
        flash('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'warning')
        return redirect(url_for('profile'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ —Å–ª–æ–≤–∞—Ä–∏
    discounts = TicketDiscount.query.filter_by(is_active=True).order_by(TicketDiscount.min_quantity.asc()).all()
    discounts_data = [{
        'min_quantity': discount.min_quantity,
        'discount': discount.discount
    } for discount in discounts]
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç
    from currency_service import currency_service
    currency_rate = currency_service.get_byn_to_rub_rate()
    currency_rate_formatted = currency_service.get_formatted_rate()
    
    # URL –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª)
    agreement_url = url_for('static', filename='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.pdf')
    
    return render_template('buy_tickets.html', 
                         title='–ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤',
                         base_price=base_price,
                         discounts=discounts_data,
                         currency_rate=currency_rate,
                         currency_rate_formatted=currency_rate_formatted,
                         agreement_url=agreement_url)

def round_up_to_ten(amount):
    """–û–∫—Ä—É–≥–ª—è–µ—Ç —Å—É–º–º—É –≤–≤–µ—Ä—Ö –¥–æ —Ü–µ–ª–æ–≥–æ –¥–µ—Å—è—Ç–∫–∞"""
    return math.ceil(amount / 10) * 10

@app.route('/create-payment', methods=['POST'])
@login_required
def create_payment():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∂–µ—Ç–æ–Ω–æ–≤"""
    if current_user.is_admin:
        return jsonify({'success': False, 'error': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –ø–æ–∫—É–ø–∞—Ç—å –∂–µ—Ç–æ–Ω—ã'})
    
    data = request.get_json()
    quantity = data.get('quantity', 0)
    payment_system = data.get('payment_system', '')
    
    if not quantity or quantity < 1:
        return jsonify({'success': False, 'error': '–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ—Ç–æ–Ω–æ–≤'})
    
    if payment_system not in ['yukassa', 'express_pay', 'bepaid']:
        return jsonify({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'})
    
    base_price = TicketPackage.query.filter_by(is_active=True).first()
    if not base_price:
        return jsonify({'success': False, 'error': '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∞ –∂–µ—Ç–æ–Ω–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'})
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    discount = TicketDiscount.get_discount_for_quantity(quantity)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ BYN
    total_price_byn = base_price.price * quantity * (1 - discount / 100)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    from currency_service import currency_service
    if payment_system == 'yukassa':
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É–±–ª–∏ –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö –¥–æ —Ü–µ–ª–æ–≥–æ –¥–µ—Å—è—Ç–∫–∞
        total_price_rub = currency_service.convert_byn_to_rub(total_price_byn)
        total_price = round_up_to_ten(total_price_rub)
        currency = 'RUB'
    else:
        total_price = total_price_byn
        currency = 'BYN'
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
    purchase = TicketPurchase(
        user_id=current_user.id,
        quantity=quantity,
        amount=total_price_byn,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ BYN
        discount=discount,
        payment_system=payment_system,
        payment_status='pending',
        currency=currency
    )
    
    db.session.add(purchase)
    db.session.commit()
    
    try:
        if payment_system == 'yukassa':
            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ÆKassa
            from yukassa_service import yukassa_service
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            description = f"–ü–æ–∫—É–ø–∫–∞ {quantity} –∂–µ—Ç–æ–Ω–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö"
            
            # URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
            return_url = url_for('purchase_history', _external=True)
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            payment_metadata = {
                "user_id": str(current_user.id),
                "purchase_id": str(purchase.id),
                "quantity": str(quantity),
                "currency": "RUB"
            }
            
            payment_info = yukassa_service.create_payment(
                amount=total_price,
                description=description,
                return_url=return_url,
                capture=True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
                metadata=payment_metadata
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
            purchase.payment_id = payment_info['id']
            purchase.payment_status = yukassa_service.get_payment_status(payment_info)
            purchase.payment_url = payment_info['confirmation']['confirmation_url']
            purchase.payment_created_at = datetime.now()
            
            db.session.commit()
            
            return jsonify({
                'success': True,
                'message': f'–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
                'payment_url': purchase.payment_url
            })
            
        elif payment_system == 'express_pay':
            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Express-Pay
            from express_pay_service import express_pay_service
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            payment_method = data.get('payment_method', 'epos')  # epos –∏–ª–∏ erip
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            description = f"–ü–æ–∫—É–ø–∫–∞ {quantity} –∂–µ—Ç–æ–Ω–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö"
            
            # URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
            return_url = url_for('purchase_history', _external=True)
            
            # –°–æ–∑–¥–∞–µ–º ID –∑–∞–∫–∞–∑–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ID –ø–æ–∫—É–ø–∫–∏)
            order_id = str(purchase.id)
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ Express-Pay
            payment_info = express_pay_service.create_payment(
                amount=total_price,
                order_id=order_id,
                description=description,
                return_url=return_url,
                payment_method=payment_method
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
            invoice_no = payment_info.get('InvoiceNo')
            if invoice_no:
                purchase.payment_id = str(invoice_no)
            else:
                raise Exception("Express-Pay –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞")
                
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–∞–∫ pending
            purchase.payment_status = 'pending'
            purchase.payment_method = payment_method
            purchase.payment_url = payment_info.get('InvoiceUrl')  # URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
            purchase.payment_created_at = datetime.now()
            
            db.session.commit()
            
            return jsonify({
                'success': True,
                'message': f'–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
                'payment_url': purchase.payment_url
            })
            
        elif payment_system == 'bepaid':
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è bePaid
            return jsonify({
                'success': False,
                'error': '–°–∏—Å—Ç–µ–º–∞ bePaid –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'
            })
            
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}'})

@app.route('/process-ticket-purchase', methods=['POST'])
@login_required
def process_ticket_purchase():
    """–°—Ç–∞—Ä—ã–π –º–∞—Ä—à—Ä—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –ø–æ–∫—É–ø–∫–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã"""
    flash('–ü–æ–∫—É–ø–∫–∞ –∂–µ—Ç–æ–Ω–æ–≤ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–∫—É–ø–∫—É".', 'warning')
    return redirect(url_for('buy_tickets'))

@app.route('/purchase-history')
@login_required
def purchase_history():
    if current_user.is_admin:
        return redirect(url_for('admin_dashboard'))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    ticket_page = request.args.get('ticket_page', 1, type=int)
    prize_page = request.args.get('prize_page', 1, type=int)
    per_page = 10  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ –±–∏–ª–µ—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    ticket_purchases = TicketPurchase.query.filter_by(user_id=current_user.id)\
        .order_by(TicketPurchase.purchase_date.desc())\
        .paginate(page=ticket_page, per_page=per_page, error_out=False)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    prize_purchases = PrizePurchase.query.filter_by(user_id=current_user.id)\
        .order_by(PrizePurchase.created_at.desc())\
        .paginate(page=prize_page, per_page=per_page, error_out=False)
    
    return render_template('purchase_history.html', 
                         title='–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
                         ticket_purchases=ticket_purchases,
                         prize_purchases=prize_purchases)

@app.route('/purchase/<int:purchase_id>/details')
@login_required
def purchase_details(purchase_id):
    purchase = PrizePurchase.query.get_or_404(purchase_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ–∫—É–ø–∫–∞ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if purchase.user_id != current_user.id:
        return jsonify({'error': '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}), 403
    
    return jsonify({
        'id': purchase.id,
        'created_at': purchase.created_at.strftime('%d.%m.%Y %H:%M'),
        'status': purchase.status,
        'full_name': purchase.full_name,
        'phone': purchase.phone,
        'address': purchase.address
    })

@app.route('/download-receipt/<int:purchase_id>')
@login_required
def download_receipt(purchase_id):
    purchase = TicketPurchase.query.get_or_404(purchase_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ–∫—É–ø–∫–∞ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if purchase.user_id != current_user.id:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–µ–∫—É', 'danger')
        return redirect(url_for('purchase_history'))
    
    # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —ç–∫–≤–∞–π—Ä–∏–Ω–≥–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞
    flash('–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'info')
    return redirect(url_for('purchase_history'))

@app.route('/check-payment-status/<payment_id>')
@login_required
def check_payment_status(payment_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∫—É–ø–∫—É
        purchase = TicketPurchase.query.filter_by(payment_id=payment_id).first()
        if not purchase:
            return jsonify({'error': 'Purchase not found'}), 404
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫—É–ø–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if purchase.user_id != current_user.id:
            return jsonify({'error': 'Access denied'}), 403
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        old_status = purchase.payment_status
        
        if purchase.payment_system == 'yukassa':
            from yukassa_service import yukassa_service
            payment_info = yukassa_service.get_payment_info(payment_id)
            new_status = yukassa_service.get_payment_status_with_expiry(payment_info)
            status_description = yukassa_service.get_payment_status_description(new_status)
        elif purchase.payment_system == 'express_pay':
            from express_pay_service import ExpressPayService
            express_pay_service = ExpressPayService()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ payment_id –Ω–µ None
            if not payment_id or payment_id == 'None' or payment_id == 'null':
                return jsonify({'error': 'Invalid payment ID'}), 400
                
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint
            status_response = express_pay_service.get_payment_status(payment_id)
            status_code = status_response.get('Status')
            new_status = express_pay_service.parse_payment_status(status_code)
            status_description = express_pay_service.get_payment_status_description(new_status)
        else:
            return jsonify({'error': 'Unsupported payment system'}), 400
        
        purchase.payment_status = new_status
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –Ω–∞—á–∏—Å–ª—è–µ–º –∂–µ—Ç–æ–Ω—ã
        if new_status == 'succeeded' and old_status != 'succeeded':
            current_user.tickets += purchase.quantity
            purchase.payment_confirmed_at = datetime.now()
            print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: –Ω–∞—á–∏—Å–ª–µ–Ω–æ {purchase.quantity} –∂–µ—Ç–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {current_user.id}")
        
        db.session.commit()
        
        return jsonify({
            'status': new_status,
            'status_description': status_description,
            'payment_id': payment_id,
            'amount': purchase.amount,
            'quantity': purchase.quantity,
            'old_status': old_status
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/webhook/yukassa/<webhook_token>', methods=['POST'])
def yukassa_webhook(webhook_token):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook'–æ–≤ –æ—Ç –ÆKassa"""
    from improved_yukassa_webhook import process_yukassa_webhook
    return process_yukassa_webhook(webhook_token)

@app.route('/webhook/express-pay/<webhook_token>', methods=['POST'])
def express_pay_webhook(webhook_token):

    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook'–æ–≤ –æ—Ç Express-Pay —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω webhook'–∞
    expected_token = os.environ.get('EXPRESS_PAY_WEBHOOK_TOKEN')
    if webhook_token != expected_token:

        return jsonify({'error': 'Invalid webhook token'}), 403
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π webhook
        raw_body = request.get_data(as_text=True)
        content_type = request.headers.get('Content-Type')
        print(f"–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Express-Pay: {request.headers}")
        print(f"Content-Type: {content_type}")
        print(f"Raw body: {raw_body}")


        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Express-Pay (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ JSON, form-data –∏ query)
        data = request.get_json(silent=True)
        if not data:
            if request.form:
                data = request.form.to_dict()
            elif request.values:
                data = request.values.to_dict()
            else:
                data = None

        # Express-Pay —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –≤ –ø–æ–ª–µ Data –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫—É
        if isinstance(data, dict) and 'Data' in data and isinstance(data['Data'], str):
            try:
                nested = json.loads(data['Data'])
                if isinstance(nested, dict):
                    data = nested
            except Exception as e:
                print(f"Webhook: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ–ª–µ Data –∫–∞–∫ JSON: {e}")
        
        if not data:
            print("Webhook: –ø—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–µ JSON –∏ –Ω–µ—Ç form/query –¥–∞–Ω–Ω—ã—Ö)")
            return jsonify({'error': 'Empty request body'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        cmd_type = data.get('CmdType')
        if cmd_type is None:
            print("Webhook: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç CmdType")
            return jsonify({'error': 'Missing CmdType'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞
        # signature = request.args.get('Signature')
        # if signature:
        #     # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        #     secret_word = os.environ.get('EXPRESS_PAY_SECRET_WORD')
        #     if not secret_word:
        #         print("Webhook: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏")
        #         return jsonify({'error': 'Signature verification not configured'}), 500
        #     
        #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (HMAC-SHA1)
        #     import hmac
        #     data_string = json.dumps(data, separators=(',', ':'))
        #     expected_signature = hmac.new(
        #         secret_word.encode('utf-8'),
        #         data_string.encode('utf-8'),
        #         hashlib.sha1
        #     ).hexdigest()
        #     if signature != expected_signature:
        #         print(f"Webhook: –Ω–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å. –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_signature}, –ø–æ–ª—É—á–µ–Ω–æ: {signature}")
        #         return jsonify({'error': 'Invalid signature'}), 400
        
        print(f"Webhook: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ {cmd_type}")
        # –ü—Ä–∏–≤–æ–¥–∏–º CmdType –∫ int, –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª —Å—Ç—Ä–æ–∫–æ–π
        try:
            cmd_type = int(cmd_type)
        except Exception:
            pass

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if cmd_type == 1:
            # –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            return handle_new_payment_notification(data)
        elif cmd_type == 2:
            # –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞
            return handle_payment_cancellation(data)
        elif cmd_type == 3:
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–µ—Ç–∞
            return handle_status_change_notification(data)
        else:
            print(f"Webhook: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {cmd_type}")
            return jsonify({'error': 'Unknown notification type'}), 400
        
    except Exception as e:
        print(f"Webhook: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

def handle_new_payment_notification(data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        account_no = data.get('AccountNo')
        invoice_no = data.get('InvoiceNo')
        amount = data.get('Amount')
        created = data.get('Created')
        service = data.get('Service')
        
        print(f"Webhook: –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ - AccountNo: {account_no}, InvoiceNo: {invoice_no}, Amount: {amount}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Å—á—ë—Ç–∞ (InvoiceNo), –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ payment_id
        purchase = None
        if invoice_no:
            purchase = TicketPurchase.query.filter_by(payment_id=str(invoice_no)).first()
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ AccountNo (—Ä–∞–≤–µ–Ω purchase.id –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)
        if not purchase and account_no:
            try:
                purchase = TicketPurchase.query.get(int(account_no))
            except Exception:
                purchase = None
        if not purchase:
            print(f"Webhook: –ø–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (InvoiceNo={invoice_no}, AccountNo={account_no})")
            return jsonify({'error': 'Purchase not found'}), 404
        
        # –ù–µ –Ω–∞—á–∏—Å–ª—è–µ–º –ø–æ CmdType=1, —Ç.–∫. –¥–∞–ª–µ–µ –ø—Ä–∏–¥—ë—Ç CmdType=3 —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        # –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if not purchase.payment_status:
            purchase.payment_status = 'pending'
        
        db.session.commit()
        print(f"Webhook: –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (InvoiceNo={invoice_no}, AccountNo={account_no})")
        
        return jsonify({'success': True}), 200
        
    except Exception as e:
        print(f"Webhook: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

def handle_payment_cancellation(data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        account_no = data.get('AccountNo')
        payment_no = data.get('PaymentNo')
        
        print(f"Webhook: –æ—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞ - AccountNo: {account_no}, PaymentNo: {payment_no}")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∫—É–ø–∫—É –ø–æ –Ω–æ–º–µ—Ä—É –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞
        purchase = TicketPurchase.query.filter_by(payment_id=str(account_no)).first()
        if not purchase:
            print(f"Webhook: –ø–æ–∫—É–ø–∫–∞ —Å payment_id {account_no} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return jsonify({'error': 'Purchase not found'}), 404
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        purchase.payment_status = 'canceled'
        
        db.session.commit()
        print(f"Webhook: –ø–ª–∞—Ç–µ–∂ {account_no} –æ—Ç–º–µ–Ω–µ–Ω")
        
        return jsonify({'success': True}), 200
        
    except Exception as e:
        print(f"Webhook: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

def handle_status_change_notification(data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–µ—Ç–∞"""
    try:
        status = data.get('Status')
        account_no = data.get('AccountNo')
        invoice_no = data.get('InvoiceNo')
        amount = data.get('Amount')
        created = data.get('Created')
        
        print(f"Webhook: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ - AccountNo: {account_no}, InvoiceNo: {invoice_no}, Status: {status}")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∫—É–ø–∫—É –ø–æ –Ω–æ–º–µ—Ä—É —Å—á–µ—Ç–∞ (InvoiceNo)
        purchase = TicketPurchase.query.filter_by(payment_id=str(invoice_no)).first()
        if not purchase:
            print(f"Webhook: –ø–æ–∫—É–ø–∫–∞ —Å payment_id {invoice_no} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return jsonify({'error': 'Purchase not found'}), 404
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
        old_status = purchase.payment_status
        new_status = None
        
        if status == 1:
            new_status = 'pending'  # –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É
        elif status == 2:
            new_status = 'expired'  # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω
        elif status == 3 or status == 6:
            new_status = 'succeeded'  # –û–ø–ª–∞—á–µ–Ω –∏–ª–∏ –û–ø–ª–∞—á–µ–Ω —Å –ø–æ–º–æ—â—å—é –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã
        elif status == 4:
            new_status = 'partial'  # –û–ø–ª–∞—á–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ
        elif status == 5:
            new_status = 'canceled'  # –û—Ç–º–µ–Ω–µ–Ω
        elif status == 7:
            new_status = 'refunded'  # –ü–ª–∞—Ç–µ–∂ –≤–æ–∑–≤—Ä–∞—â–µ–Ω
        else:
            print(f"Webhook: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}")
            new_status = 'unknown'
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        purchase.payment_status = new_status
        
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ "–æ–ø–ª–∞—á–µ–Ω" –∏ —Ä–∞–Ω–µ–µ –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω, –Ω–∞—á–∏—Å–ª—è–µ–º –∂–µ—Ç–æ–Ω—ã
        if new_status == 'succeeded' and old_status != 'succeeded' and not purchase.payment_confirmed_at:
            user = User.query.get(purchase.user_id)
            if user:
                user.tickets += purchase.quantity
                purchase.payment_confirmed_at = datetime.now()
                print(f"Webhook: –Ω–∞—á–∏—Å–ª–µ–Ω–æ {purchase.quantity} –∂–µ—Ç–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
        
        db.session.commit()
        print(f"Webhook: —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {invoice_no} –æ–±–Ω–æ–≤–ª–µ–Ω —Å {old_status} –Ω–∞ {new_status}")
        
        return jsonify({'success': True}), 200
        
    except Exception as e:
        print(f"Webhook: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/completed-tournaments')
@login_required
def completed_tournaments():
    if current_user.is_admin:
        return redirect(url_for('admin_dashboard'))
    return render_template('completed_tournaments.html', title='–ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã')

@app.route('/tournament/<int:tournament_id>/join')
@login_required
def join_tournament(tournament_id):
    tournament = Tournament.query.get_or_404(tournament_id)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–æ UTC
    current_time = datetime.now()
    

    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —É—á–∏—Ç–µ–ª–µ–º
    if hasattr(current_user, 'is_admin') and current_user.is_admin:
        flash('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö', 'warning')
        return redirect(url_for('home'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∏—Ç–µ–ª–µ–º
    if isinstance(current_user, Teacher):
        flash('–£—á–∏—Ç–µ–ª—è –Ω–µ –º–æ–≥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö', 'warning')
        return redirect(url_for('teacher_profile'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∏–ª–µ—Ç
    if current_user.tickets < 1:

        flash('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ', 'warning')
        return redirect(url_for('profile'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∞–ª—Å—è –ª–∏ —Ç—É—Ä–Ω–∏—Ä
    if tournament.start_date <= current_time:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ —Ç—É—Ä–Ω–∏—Ä
        end_time = tournament.start_date + timedelta(minutes=tournament.duration)

        if end_time > current_time:

            # –ï—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –∏–¥–µ—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–µ–Ω—é —Ç—É—Ä–Ω–∏—Ä–∞
            return redirect(url_for('tournament_menu', tournament_id=tournament.id))
        else:

            flash('–¢—É—Ä–Ω–∏—Ä —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è', 'warning')
            return redirect(url_for('home'))
    else:

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        local_start_time = tournament.start_date.strftime('%H:%M')
        flash(f'–¢—É—Ä–Ω–∏—Ä –Ω–∞—á–Ω–µ—Ç—Å—è –≤ {local_start_time}', 'warning')
        return redirect(url_for('home'))

@app.route('/tournament/<int:tournament_id>/menu')
@login_required
def tournament_menu(tournament_id):
    tournament = Tournament.query.get_or_404(tournament_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —É—á–∏—Ç–µ–ª–µ–º
    if hasattr(current_user, 'is_admin') and current_user.is_admin:
        flash('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö', 'warning')
        return redirect(url_for('home'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∏—Ç–µ–ª–µ–º
    if isinstance(current_user, Teacher):
        flash('–£—á–∏—Ç–µ–ª—è –Ω–µ –º–æ–≥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö', 'warning')
        return redirect(url_for('teacher_profile'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∞–ª—Å—è –ª–∏ —Ç—É—Ä–Ω–∏—Ä
    current_time = datetime.now()
    if tournament.start_date > current_time:
        flash('–¢—É—Ä–Ω–∏—Ä –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è', 'warning')
        return redirect(url_for('home'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ —Ç—É—Ä–Ω–∏—Ä
    end_time = tournament.start_date + timedelta(minutes=tournament.duration)
    if end_time <= current_time:
        flash('–¢—É—Ä–Ω–∏—Ä —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è', 'warning')
        return redirect(url_for('home'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∏–ª–µ—Ç
    if current_user.tickets < 1:
        flash('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ', 'warning')
        return redirect(url_for('profile'))
    
    return render_template('tournament_menu.html', tournament=tournament)

@app.route('/tournament/<int:tournament_id>/start')
@login_required
def start_tournament(tournament_id):
    tournament = Tournament.query.get_or_404(tournament_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —Ç—É—Ä–Ω–∏—Ä
    current_time = datetime.now()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    if not (tournament.start_date <= current_time and 
            current_time <= tournament.start_date + timedelta(minutes=tournament.duration)):
        flash('–¢—É—Ä–Ω–∏—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω', 'warning')
        return redirect(url_for('home'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∏–ª–µ—Ç
    if current_user.tickets < 1:
        flash('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ', 'warning')
        return redirect(url_for('profile'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —É—á–∏—Ç–µ–ª–µ–º
    if hasattr(current_user, 'is_admin') and current_user.is_admin:
        flash('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö', 'warning')
        return redirect(url_for('home'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∏—Ç–µ–ª–µ–º
    if isinstance(current_user, Teacher):
        flash('–£—á–∏—Ç–µ–ª—è –Ω–µ –º–æ–≥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö', 'warning')
        return redirect(url_for('teacher_profile'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    participation = TournamentParticipation.query.filter_by(
        user_id=current_user.id,
        tournament_id=tournament_id
    ).first()
    
    if not participation:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        solved_tasks = SolvedTask.query.filter_by(
            user_id=current_user.id,
            is_correct=True
        ).join(Task).filter(Task.tournament_id == tournament_id).all()
        solved_task_ids = [task.task_id for task in solved_tasks]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        available_tasks = Task.query.filter(
            Task.tournament_id == tournament_id,
            Task.id.notin_(solved_task_ids),
            Task.category == current_user.category
        ).all()
        
        if not available_tasks:
            flash('–î–ª—è –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ', 'warning')
            return redirect(url_for('home'))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± —É—á–∞—Å—Ç–∏–∏ –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∏–ª–µ—Ç
        participation = TournamentParticipation(
            user_id=current_user.id,
            tournament_id=tournament_id,
            score=0,
            start_time=current_time  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        )
        current_user.tickets -= 1
        current_user.tournaments_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
        db.session.add(participation)
        db.session.commit()
        flash('–ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω. –£–¥–∞—á–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ!', 'success')
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–¥–∞—á–∞–º–∏
    return redirect(url_for('tournament_task', tournament_id=tournament.id))

@app.route('/admin/users/<int:user_id>/details')
@login_required
def admin_user_details(user_id):
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    user = User.query.get_or_404(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_tickets_purchased = sum(purchase.quantity for purchase in user.ticket_purchases)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∏–π –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
    actual_tournaments_participated = len(user.tournament_participations)
    total_tournaments_participated = actual_tournaments_participated
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–±–µ–¥—ã (–º–µ—Å—Ç–æ = 1)
    total_tournaments_won = sum(1 for p in user.tournament_participations if p.place == 1)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
    if actual_tournaments_participated > 0:
        average_tournament_score = sum(p.score for p in user.tournament_participations) / actual_tournaments_participated
    else:
        average_tournament_score = 0
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ –∏ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
    ticket_purchases = TicketPurchase.query.filter_by(user_id=user.id).order_by(TicketPurchase.purchase_date.desc()).all()
    tournament_participations = TournamentParticipation.query.filter_by(user_id=user.id).order_by(TournamentParticipation.participation_date.desc()).all()
    
    return render_template('admin/user_details.html',
                         user=user,
                         total_tickets_purchased=total_tickets_purchased,
                         total_tournaments_participated=total_tournaments_participated,
                         total_tournaments_won=total_tournaments_won,
                         average_tournament_score=round(average_tournament_score, 2),
                         ticket_purchases=ticket_purchases,
                         tournament_participations=tournament_participations)

def update_tournament_status():
    now = datetime.now()  # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    tournaments = Tournament.query.filter(Tournament.status != 'finished').all()
    
    for tournament in tournaments:
        if tournament.start_date <= now and now <= tournament.start_date + timedelta(minutes=tournament.duration):
            tournament.status = 'started'
        elif now > tournament.start_date + timedelta(minutes=tournament.duration):
            tournament.status = 'finished'
    
    db.session.commit()

def restore_scheduler_jobs():
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏–∑ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        active_jobs = SchedulerJob.query.filter_by(
            is_active=True, 
            server_id=SERVER_ID
        ).all()
        restored_count = 0
        
        for job in active_jobs:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
                if job.job_type == 'start':
                    job_func = start_tournament_job
                    args = [job.tournament_id]
                    interval_hours = None
                elif job.job_type == 'end':
                    job_func = end_tournament_job
                    args = [job.tournament_id]
                    interval_hours = None
                elif job.job_type == 'cleanup_sessions':
                    job_func = cleanup_old_sessions
                    args = []
                    interval_hours = 24  # –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
                elif job.job_type == 'check_expired_payments':
                    job_func = check_expired_payments
                    args = []
                    interval_hours = 1  # –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
                elif job.job_type == 'check_referral_bonuses':
                    job_func = check_and_pay_referral_bonuses
                    args = []
                    interval_hours = 24  # –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
                elif job.job_type == 'check_teacher_referral_bonuses':
                    job_func = check_and_pay_teacher_referral_bonuses
                    args = []
                    interval_hours = 24  # –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                if job.run_date <= datetime.now():
                    if interval_hours is None:
                        # –û–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞ - –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, —É–¥–∞–ª—è–µ–º
                        db.session.delete(job)
                        db.session.commit()
                        continue
                    else:
                        # –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º run_date –∫–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
                        from datetime import timedelta
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
                        if job.job_type == 'check_expired_payments':
                            new_run_date = datetime.now() + timedelta(hours=1)
                        elif job.job_type == 'check_referral_bonuses':
                            new_run_date = datetime.now() + timedelta(hours=1)
                        elif job.job_type == 'check_teacher_referral_bonuses':
                            new_run_date = datetime.now() + timedelta(seconds=1)
                        elif job.job_type == 'cleanup_sessions':
                            new_run_date = datetime.now() + timedelta(hours=24)
                        else:
                            # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                            new_run_date = datetime.now() + timedelta(hours=interval_hours)
                        
                        print(f"–û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á–∏ {job.job_id}: –±—ã–ª–æ {job.run_date}, –±—É–¥–µ—Ç {new_run_date}")
                        job.run_date = new_run_date
                        db.session.commit()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                if interval_hours:
                    # –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å —É—á–µ—Ç–æ–º run_date –∏–∑ –ë–î
                    print(f"–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É {job.job_id} —Å start_date={job.run_date}")
                    scheduler.add_job(
                        job_func,
                        trigger=IntervalTrigger(
                            hours=interval_hours,
                            start_date=job.run_date  # –ò—Å–ø–æ–ª—å–∑—É–µ–º run_date –∏–∑ –ë–î
                        ),
                        args=args,
                        id=job.job_id,
                        replace_existing=True
                    )
                else:
                    # –û–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞
                    scheduler.add_job(
                        job_func,
                        trigger=DateTrigger(run_date=job.run_date),
                        args=args,
                        id=job.job_id,
                        replace_existing=True
                    )
                # –û–±–Ω–æ–≤–ª—è–µ–º updated_at
                job.updated_at = datetime.now()
                db.session.commit()
                
                restored_count += 1
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {job.job_id}: {e}")
                # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∑–∞–¥–∞—á—É –∏–∑ –ë–î
                db.session.delete(job)
                db.session.commit()
        
        print(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {SERVER_ID}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

def cleanup_scheduler_jobs():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
    try:
        scheduler.remove_all_jobs()
    except Exception as e:
        pass

def get_tournament_tasks_cached(tournament_id, category=None, verbose=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞.
    –ï—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–µ–Ω –∏ –∑–∞–¥–∞—á–∏ –≤ –∫—ç—à–µ - –±–µ—Ä–µ—Ç –∏–∑ –∫—ç—à–∞, –∏–Ω–∞—á–µ –∏–∑ –ë–î.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥, –µ—Å–ª–∏ verbose –Ω–µ —É–∫–∞–∑–∞–Ω
    if verbose is None:
        verbose = CACHE_DEBUG
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç—É—Ä–Ω–∏—Ä
    tournament = Tournament.query.get(tournament_id)
    if not tournament or tournament.status != 'started':
        # –¢—É—Ä–Ω–∏—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω - –±–µ—Ä–µ–º –∏–∑ –ë–î
        if verbose:
            print(f"üìä [–ö–≠–®] –¢—É—Ä–Ω–∏—Ä {tournament_id} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω - –±–µ—Ä–µ–º –∏–∑ –ë–î")
        if category:
            return Task.query.filter(
                Task.tournament_id == tournament_id,
                Task.category == category
            ).all()
        else:
            return Task.query.filter_by(tournament_id=tournament_id).all()
    
    # –¢—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–µ–Ω - –ø—Ä–æ–±—É–µ–º –∫—ç—à
    cached_tasks = tournament_task_cache.get_tournament_tasks(tournament_id, category, verbose)
    if cached_tasks is not None:
        if verbose:
            print(f"‚ö° [–ö–≠–®] –ó–∞–¥–∞—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id} –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞ ({len(cached_tasks)} –∑–∞–¥–∞—á)")
        return cached_tasks
    
    # –í –∫—ç—à–µ –Ω–µ—Ç - –±–µ—Ä–µ–º –∏–∑ –ë–î –∏ –∫—ç—à–∏—Ä—É–µ–º
    if verbose:
        print(f"üîÑ [–ö–≠–®] –ó–∞–¥–∞—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ - –±–µ—Ä–µ–º –∏–∑ –ë–î –∏ –∫—ç—à–∏—Ä—É–µ–º")
    if category:
        tasks = Task.query.filter(
            Task.tournament_id == tournament_id,
            Task.category == category
        ).all()
    else:
        tasks = Task.query.filter_by(tournament_id=tournament_id).all()
    
    # –ö—ç—à–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
    tournament_task_cache.cache_tournament_tasks(tournament_id)
    
    return tasks

def get_task_by_id_cached(tournament_id, task_id, verbose=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥, –µ—Å–ª–∏ verbose –Ω–µ —É–∫–∞–∑–∞–Ω
    if verbose is None:
        verbose = CACHE_DEBUG
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç—É—Ä–Ω–∏—Ä
    tournament = Tournament.query.get(tournament_id)
    if not tournament or tournament.status != 'started':
        # –¢—É—Ä–Ω–∏—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω - –±–µ—Ä–µ–º –∏–∑ –ë–î
        if verbose:
            print(f"üìä [–ö–≠–®] –ó–∞–¥–∞—á–∞ {task_id} —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id} - —Ç—É—Ä–Ω–∏—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –±–µ—Ä–µ–º –∏–∑ –ë–î")
        return Task.query.get(task_id)
    
    # –¢—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–µ–Ω - –ø—Ä–æ–±—É–µ–º –∫—ç—à
    cached_task = tournament_task_cache.get_task_by_id(tournament_id, task_id, verbose)
    if cached_task is not None:
        if verbose:
            print(f"‚ö° [–ö–≠–®] –ó–∞–¥–∞—á–∞ {task_id} —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id} –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –∫—ç—à–∞")
        return cached_task
    
    # –í –∫—ç—à–µ –Ω–µ—Ç - –±–µ—Ä–µ–º –∏–∑ –ë–î
    if verbose:
        print(f"üîÑ [–ö–≠–®] –ó–∞–¥–∞—á–∞ {task_id} —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ - –±–µ—Ä–µ–º –∏–∑ –ë–î")
    return Task.query.get(task_id)

def get_simple_task_selection(available_tasks, solved_tasks, tournament_id):
    """
    –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—ã–¥–∞—á–∏ –∑–∞–¥–∞—á: —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ –∑–∞–¥–∞—á–∏ –∫—Ä–æ–º–µ —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö,
    –≤ –∫–æ–Ω—Ü–µ - —Å–∞–º—ã–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏.
    """
    if not available_tasks:
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ —Ç—É—Ä–Ω–∏—Ä–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    total_tasks_in_tournament = Task.query.filter(
        Task.tournament_id == tournament_id,
        Task.category == current_user.category
    ).count()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á)
    solved_count = len(solved_tasks)
    progress_percentage = (solved_count / total_tasks_in_tournament) * 100
    
    # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á
    max_points = max(task.points for task in available_tasks)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –æ–±—ã—á–Ω—ã–µ –∏ —Å–∞–º—ã–µ —Å–ª–æ–∂–Ω—ã–µ
    regular_tasks = [task for task in available_tasks if task.points < max_points]
    hardest_tasks = [task for task in available_tasks if task.points == max_points]
    
    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏, –≤—ã–¥–∞–µ–º –∏—Ö
    if not regular_tasks:
        return random.choice(hardest_tasks)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏, –≤—ã–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∏–∑ –Ω–∏—Ö
    return random.choice(regular_tasks)

@app.route('/tournament/<int:tournament_id>/task')
@login_required
def tournament_task(tournament_id):
    tournament = Tournament.query.get_or_404(tournament_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–µ–Ω
    if not tournament.is_active:
        flash('–¢—É—Ä–Ω–∏—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω', 'warning')
        return redirect(url_for('home'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
    if datetime.now() > tournament.start_date + timedelta(minutes=tournament.duration):
        flash('–¢—É—Ä–Ω–∏—Ä —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è', 'warning')
        return redirect(url_for('home'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    participation = TournamentParticipation.query.filter_by(
        user_id=current_user.id,
        tournament_id=tournament_id
    ).first()
    
    if not participation:
        flash('–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ', 'warning')
        return redirect(url_for('home'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–µ—à–∞–ª (–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)
    solved_tasks = SolvedTask.query.filter_by(
        user_id=current_user.id
    ).join(Task).filter(Task.tournament_id == tournament_id).all()
    solved_task_ids = [task.task_id for task in solved_tasks]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –∏–∑ —Å–µ—Å—Å–∏–∏
    current_task_id = session.get(f'current_task_{tournament_id}')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ —Ä–µ—à–µ–Ω–Ω—ã–µ
    all_tasks = get_tournament_tasks_cached(tournament_id, current_user.category)
    available_tasks = [task for task in all_tasks if task.id not in solved_task_ids]
    
    if not available_tasks:
        # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–µ–Ω—ã, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        return redirect(url_for('tournament_results', tournament_id=tournament_id))
    
    if current_task_id:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –≤—Å–µ –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if current_task_id not in solved_task_ids:
            task = get_task_by_id_cached(tournament_id, current_task_id)
            if task and task.tournament_id == tournament_id and task.category == current_user.category:
                return render_template('tournament_task.html', 
                                     tournament=tournament, 
                                     task=task,
                                     timedelta=timedelta,
                                     now=datetime.now())
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ –æ–Ω–∞ —É–∂–µ —Ä–µ—à–µ–Ω–∞, –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é –ø–æ –ø—Ä–æ—Å—Ç–æ–π —Å—Ö–µ–º–µ
    task = get_simple_task_selection(available_tasks, solved_tasks, tournament_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –≤ —Å–µ—Å—Å–∏–∏
    session[f'current_task_{tournament_id}'] = task.id
    
    return render_template('tournament_task.html', 
                         tournament=tournament, 
                         task=task,
                         timedelta=timedelta,
                         now=datetime.now())

@app.route('/tournament/<int:tournament_id>/task/<int:task_id>/submit', methods=['POST'])
@login_required
def submit_task_answer(tournament_id, task_id):
    tournament = Tournament.query.get_or_404(tournament_id)
    task = get_task_by_id_cached(tournament_id, task_id)
    if not task:
        flash('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
        return redirect(url_for('tournament_task', tournament_id=tournament_id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —Ç—É—Ä–Ω–∏—Ä
    current_time = datetime.now()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    if not (tournament.start_date <= current_time and 
            current_time <= tournament.start_date + timedelta(minutes=tournament.duration)):
        flash('–¢—É—Ä–Ω–∏—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω', 'warning')
        return redirect(url_for('home'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–µ—à–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –∑–∞–¥–∞—á–∞
    if SolvedTask.query.filter_by(
        user_id=current_user.id,
        task_id=task_id,
        is_correct=True
    ).first():
        flash('–í—ã —É–∂–µ —Ä–µ—à–∏–ª–∏ —ç—Ç—É –∑–∞–¥–∞—á—É', 'warning')
        return redirect(url_for('tournament_task', tournament_id=tournament_id))
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    participation = TournamentParticipation.query.filter_by(
        user_id=current_user.id,
        tournament_id=tournament_id
    ).first()
    
    if not participation:
        flash('–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ', 'warning')
        return redirect(url_for('home'))
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    user_answer = request.form.get('answer', '').strip().lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç (–ø—Ä–∏–≤–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
    is_correct = user_answer == task.correct_answer.lower()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    solution = SolvedTask(
        user_id=current_user.id,
        task_id=task_id,
        is_correct=is_correct,
        user_answer=user_answer
    )
    db.session.add(solution)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    if participation:
        participation.end_time = current_time
    
    if is_correct:
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –∫ –æ–±—â–µ–º—É —Å—á–µ—Ç—É
        current_user.balance += task.points
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_tasks = get_tournament_tasks_cached(tournament_id, current_user.category)
        total_tasks = len(all_tasks)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ
        solved_tasks = SolvedTask.query.filter_by(
            user_id=current_user.id,
            is_correct=True
        ).join(Task).filter(
            Task.tournament_id == tournament_id,
            Task.category == current_user.category
        ).all()
        
        # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        correct_percentage = (len(solved_tasks) / total_tasks) * 100 if total_tasks > 0 else 0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
        time_spent = (current_time - participation.start_time).total_seconds()
        

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–æ–ª—å—à–µ 50%
        if time_spent < 300 and correct_percentage > 50:  # 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç
            current_user.is_blocked = True
            current_user.block_reason = "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –∂—É–ª—å–Ω–∏—á–µ—Å—Ç–≤–æ"
            flash('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', 'danger')
            db.session.commit()
            
            # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
            current_user.session_token = None
            current_user.last_activity = None
            db.session.commit()
            session.pop('session_token', None)
            logout_user()
            
            return redirect(url_for('login'))
        
        flash(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! +{task.points} –±–∞–ª–ª–æ–≤', 'success')
    else:
        flash('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç', 'danger')
    
    db.session.commit()
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –∏–∑ —Å–µ—Å—Å–∏–∏
    session.pop(f'current_task_{tournament_id}', None)
    
    return redirect(url_for('tournament_task', tournament_id=tournament_id))

@app.route('/tournament/<int:tournament_id>/results')
@login_required
def tournament_results(tournament_id):
    tournament = Tournament.query.get_or_404(tournament_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ —Ç—É—Ä–Ω–∏—Ä
    if tournament.status != 'finished':
        flash('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–∞ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', 'warning')
        return redirect(url_for('tournament_history'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ
    participation = TournamentParticipation.query.filter_by(
        user_id=current_user.id,
        tournament_id=tournament_id
    ).first()
    
    if not participation:
        flash('–í—ã –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ', 'danger')
        return redirect(url_for('tournament_history'))
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tasks = get_tournament_tasks_cached(tournament_id, current_user.category)
    user_tasks.sort(key=lambda x: x.id)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    solved_tasks = SolvedTask.query.filter_by(
        user_id=current_user.id
    ).join(Task).filter(Task.tournament_id == tournament_id).all()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    solved_tasks_dict = {task.task_id: task for task in solved_tasks}
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–∞—Ö
    tasks_data = []
    for task in user_tasks:
        solved_task = solved_tasks_dict.get(task.id)
        tasks_data.append({
            'task': task,
            'is_solved': solved_task is not None,
            'is_correct': solved_task.is_correct if solved_task else False,
            'user_answer': solved_task.user_answer if solved_task else None,
            'solved_at': solved_task.solved_at if solved_task else None
        })
    
    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    solved_count = len([t for t in tasks_data if t['is_solved']])
    correct_count = len([t for t in tasks_data if t['is_correct']])
    earned_points = sum(t['task'].points for t in tasks_data if t['is_correct'])
    total_points = sum(t['task'].points for t in tasks_data)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    success_rate = round((correct_count / len(tasks_data)) * 100, 1) if tasks_data and len(tasks_data) > 0 else 0
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è
    if participation.end_time:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        time_spent = (participation.end_time - participation.start_time).total_seconds()
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞), 
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ 0
        last_solved_task = SolvedTask.query.filter_by(
            user_id=current_user.id
        ).join(Task).filter(
            Task.tournament_id == tournament_id
        ).order_by(SolvedTask.solved_at.desc()).first()
        
        if last_solved_task:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π
            time_spent = (last_solved_task.solved_at - participation.start_time).total_seconds()
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –≤—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è = 0
            time_spent = 0
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–º—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    topics_to_review = set()  # –¢–µ–º—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    additional_topics = set()  # –¢–µ–º—ã –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    
    for task_data in tasks_data:
        task = task_data['task']
        if task.topic:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–∞ —É–∫–∞–∑–∞–Ω–∞
            if task_data['is_solved'] and not task_data['is_correct']:
                # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
                topics_to_review.add(task.topic)
            elif not task_data['is_solved']:
                # –ù–µ—Ä–µ—à–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
                additional_topics.add(task.topic)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–º (–µ—Å–ª–∏ —Ç–µ–º–∞ —É–∂–µ –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö)
    additional_topics = additional_topics - topics_to_review
    
    return render_template('tournament_results.html',
                         tournament=tournament,
                         tasks_data=tasks_data,
                         solved_count=solved_count,
                         correct_count=correct_count,
                         earned_points=earned_points,
                         total_points=total_points,
                         success_rate=success_rate,
                         participation=participation,
                         time_spent=time_spent,
                         topics_to_review=sorted(list(topics_to_review)),
                         additional_topics=sorted(list(additional_topics)),
                         now=datetime.now())

@app.route('/tournament/history')
@login_required
def tournament_history():
    if hasattr(current_user, 'is_admin') and current_user.is_admin:
        flash('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö', 'warning')
        return redirect(url_for('home'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∏—Ç–µ–ª–µ–º
    if not hasattr(current_user, 'tournaments_count'):
        flash('–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—á–∞—â–∏–º—Å—è', 'warning')
        return redirect(url_for('teacher_profile'))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = request.args.get('page', 1, type=int)
    per_page = 10  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    tournaments_query = db.session.query(
        Tournament,
        TournamentParticipation.score,
        TournamentParticipation.place,
        func.count(SolvedTask.id).label('solved_tasks'),
        func.sum(case((SolvedTask.is_correct == True, Task.points), else_=0)).label('earned_points'),
        func.count(case((SolvedTask.is_correct == True, 1))).label('correct_tasks'),
        func.count(Task.id).label('total_tasks')
    ).join(
        TournamentParticipation,
        Tournament.id == TournamentParticipation.tournament_id
    ).outerjoin(
        Task,
        Tournament.id == Task.tournament_id
    ).outerjoin(
        SolvedTask,
        (Task.id == SolvedTask.task_id) & (SolvedTask.user_id == current_user.id)
    ).filter(
        TournamentParticipation.user_id == current_user.id
    ).group_by(
        Tournament.id,
        TournamentParticipation.score,
        TournamentParticipation.place
    ).order_by(
        Tournament.start_date.desc()
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    tournaments = tournaments_query.paginate(page=page, per_page=per_page, error_out=False)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ —à–∞–±–ª–æ–Ω–µ
    tournament_list = []
    for tournament, score, place, solved_tasks, earned_points, correct_tasks, total_tasks in tournaments.items:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        success_rate = round((correct_tasks or 0) / (total_tasks or 1) * 100, 1)
        
        tournament_list.append({
            'id': tournament.id,
            'name': tournament.title,
            'start_date': tournament.start_date,
            'status': tournament.status,
            'solved_tasks': solved_tasks or 0,
            'earned_points': earned_points or 0,
            'score': score or 0,
            'place': place,
            'success_rate': success_rate
        })
    
    return render_template('tournament_history.html', 
                         tournaments=tournament_list,
                         pagination=tournaments)

@app.route('/rating')
@limiter.limit("15 per minute; 3 per 10 seconds")
def rating():
    from sqlalchemy import func, case

    users_by_category = {}
    categories = ['1-2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    selected_category = request.args.get('category', '1-2')
    per_page = 20  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
    show_full_rating = False
    if current_user.is_authenticated:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if hasattr(current_user, 'is_admin') and current_user.is_admin:
            # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–µ–∂–∏–º–∞
            mode = request.args.get('mode')
            show_full_rating = mode == 'full'
        elif hasattr(current_user, 'tournaments_count'):
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
            show_full_rating = current_user.tournaments_count > 0
        # –î–ª—è —É—á–∏—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10 (show_full_rating –æ—Å—Ç–∞–µ—Ç—Å—è False)
    
    for category in categories:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        page = request.args.get(f'page_{category}', 1, type=int)
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        users_stats = (
            db.session.query(
                User,
                func.count(SolvedTask.id).label('solved_tasks_count'),
                func.sum(case((SolvedTask.is_correct == True, 1), else_=0)).label('correct_tasks_count')
            )
            .outerjoin(SolvedTask, User.id == SolvedTask.user_id)
            .filter(User.is_admin == False, User.category == category)
            .group_by(User.id)
            .order_by(User.balance.desc())
        )
        
        if show_full_rating:
            # –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            total_users = users_stats.count()
            total_pages = (total_users + per_page - 1) // per_page
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            users_stats = users_stats.offset((page - 1) * per_page).limit(per_page).all()
            
            has_next = page < total_pages
            has_prev = page > 1
        else:
            # –î–ª—è —Ç–æ–ø-10 –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            users_stats = users_stats.limit(10).all()
            has_next = False
            has_prev = False
            total_pages = 1
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = []
        for user, solved_tasks_count, correct_tasks_count in users_stats:
            user.solved_tasks_count = correct_tasks_count or 0
            user.success_rate = round((correct_tasks_count / solved_tasks_count * 100) if solved_tasks_count else 0, 1)
            user.is_current_user = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            users.append(user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–ø-10)
        if not show_full_rating and current_user.is_authenticated and hasattr(current_user, 'category') and current_user.category == category:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ
            current_user_in_list = any(user.id == current_user.id for user in users)
            
            if not current_user_in_list:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                current_user_stats = (
                    db.session.query(
                        User,
                        func.count(SolvedTask.id).label('solved_tasks_count'),
                        func.sum(case((SolvedTask.is_correct == True, 1), else_=0)).label('correct_tasks_count')
                    )
                    .outerjoin(SolvedTask, User.id == SolvedTask.user_id)
                    .filter(User.id == current_user.id)
                    .group_by(User.id)
                    .first()
                )
                
                if current_user_stats:
                    user, solved_tasks_count, correct_tasks_count = current_user_stats
                    user.solved_tasks_count = correct_tasks_count or 0
                    user.success_rate = round((correct_tasks_count / solved_tasks_count * 100) if solved_tasks_count else 0, 1)
                    user.is_current_user = True  # –§–ª–∞–≥ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    users.append(user)
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ
                for user in users:
                    if user.id == current_user.id:
                        user.is_current_user = True
                        break
        
        users_by_category[category] = {
            'users': users,
            'has_next': has_next,
            'has_prev': has_prev,
            'show_full_rating': show_full_rating,
            'current_page': page if show_full_rating else 1,
            'total_pages': total_pages
        }

    user_rank = None
    if current_user.is_authenticated and hasattr(current_user, 'category_rank'):
        user_rank = current_user.category_rank

    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        category = request.args.get('category', '1-2')
        users_data = users_by_category.get(category, {'users': [], 'has_next': False})
        return jsonify({
            'users': [{
                'username': user.username,
                'student_name': user.student_name,
                'balance': user.balance,
                'solved_tasks_count': user.solved_tasks_count,
                'success_rate': user.success_rate,
                'tournaments_count': user.tournaments_count,
                'category_rank': user.category_rank,
                'total_tournament_time': user.total_tournament_time,
                'is_current_user': getattr(user, 'is_current_user', False)
            } for user in users_data['users']],
            'has_next': users_data['has_next'],
            'has_prev': users_data.get('has_prev', False),
            'current_page': users_data.get('current_page', 1),
            'total_pages': users_data.get('total_pages', 1)
        })

    return render_template('rating.html', 
                         users_by_category=users_by_category,
                         user_rank=user_rank,
                         show_full_rating=show_full_rating,
                         selected_category=selected_category)

@app.route('/rating/load-more')
def load_more_users():
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10
    return jsonify({
        'users': [],
        'has_next': False
    })

@app.route('/shop')
@login_required
def shop():
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    page = request.args.get('page', 1, type=int)
    sort = request.args.get('sort', 'price_asc')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    per_page = 9  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (3x3 —Å–µ—Ç–∫–∞)
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    query = Prize.query.filter(Prize.is_active == True)
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if isinstance(current_user, Teacher):
        # –î–ª—è —É—á–∏—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–∑—ã –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π
        query = query.filter(Prize.is_for_teachers == True)
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–∑—ã –ù–ï –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π
        query = query.filter(Prize.is_for_teachers == False)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    if sort == 'price_asc':
        query = query.order_by(Prize.points_cost.asc())
    elif sort == 'price_desc':
        query = query.order_by(Prize.points_cost.desc())
    elif sort == 'name_asc':
        query = query.order_by(Prize.name.asc())
    elif sort == 'name_desc':
        query = query.order_by(Prize.name.desc())
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
        query = query.order_by(Prize.points_cost.asc())
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–∑—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    pagination = query.paginate(
        page=page, per_page=per_page, error_out=False
    )
    
    prizes = pagination.items
    settings = ShopSettings.get_settings()
    can_shop = settings.can_user_shop(current_user)
    
    return render_template('shop.html', 
                         prizes=prizes,
                         pagination=pagination,
                         settings=settings,
                         can_shop=can_shop,
                         cart_items_count=len(current_user.cart_items),
                         current_sort=sort)

@app.route('/cart')
@login_required
def cart():
    if hasattr(current_user, 'is_admin') and current_user.is_admin:
        return redirect(url_for('admin_dashboard'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if isinstance(current_user, Teacher):
        cart_items = TeacherCartItem.query.filter_by(teacher_id=current_user.id).all()
    else:
        cart_items = CartItem.query.filter_by(user_id=current_user.id).all()
    
    # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    total_cost = sum(item.prize.points_cost * item.quantity for item in cart_items)
    
    return render_template('cart.html',
                         title='–ö–æ—Ä–∑–∏–Ω–∞',
                         cart_items=cart_items,
                         total_cost=total_cost)

@app.route('/add-to-cart', methods=['POST'])
@login_required
def add_to_cart():
    if hasattr(current_user, 'is_admin') and current_user.is_admin:
        return jsonify({'success': False, 'message': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–æ–∫—É–ø–∫–∏'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –º–∞–≥–∞–∑–∏–Ω
    settings = ShopSettings.get_settings()
    if not settings.is_open:
        return jsonify({'success': False, 'message': '–ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç'})
    
    data = request.get_json()
    prize_id = data.get('prize_id')
    quantity = data.get('quantity', 1)
    
    if not prize_id or not quantity:
        return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞'})
    
    prize = Prize.query.get(prize_id)
    if not prize or not prize.is_active:
        return jsonify({'success': False, 'message': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
    if prize.is_unique:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞
        current_season = TournamentSettings.get_settings().current_season_number
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫—É–ø–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–∏–∑ –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ (–≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –∫—Ä–æ–º–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ)
        if isinstance(current_user, Teacher):
            existing_purchase = TeacherPrizePurchase.query.filter(
                TeacherPrizePurchase.teacher_id == current_user.id,
                TeacherPrizePurchase.prize_id == prize_id,
                TeacherPrizePurchase.season_number == current_season,
                TeacherPrizePurchase.status != 'cancelled'
            ).first()
        else:
            existing_purchase = PrizePurchase.query.filter(
                PrizePurchase.user_id == current_user.id,
                PrizePurchase.prize_id == prize_id,
                PrizePurchase.season_number == current_season,
                PrizePurchase.status != 'cancelled'
            ).first()
        
        if existing_purchase:
            return jsonify({'success': False, 'message': '–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —ç—Ç–æ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑ –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ'})
        
        # –î–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 1
        quantity = 1
    elif prize.quantity > 0 and quantity > prize.quantity:
        return jsonify({'success': False, 'message': '–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if isinstance(current_user, Teacher):
        cart_item = TeacherCartItem.query.filter_by(
            teacher_id=current_user.id,
            prize_id=prize_id
        ).first()
    else:
        cart_item = CartItem.query.filter_by(
            user_id=current_user.id,
            prize_id=prize_id
        ).first()
    
    if cart_item:
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if prize.is_unique:
            return jsonify({'success': False, 'message': '–≠—Ç–æ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É'})
        
        new_quantity = cart_item.quantity + quantity
        if prize.quantity > 0 and new_quantity > prize.quantity:
            return jsonify({'success': False, 'message': '–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ'})
        cart_item.quantity = new_quantity
    else:
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        if isinstance(current_user, Teacher):
            cart_item = TeacherCartItem(
                teacher_id=current_user.id,
                prize_id=prize_id,
                quantity=quantity
            )
        else:
            cart_item = CartItem(
                user_id=current_user.id,
                prize_id=prize_id,
                quantity=quantity
            )
        db.session.add(cart_item)
    
    db.session.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if isinstance(current_user, Teacher):
        cart_items_count = TeacherCartItem.query.filter_by(teacher_id=current_user.id).count()
    else:
        cart_items_count = CartItem.query.filter_by(user_id=current_user.id).count()
    
    return jsonify({
        'success': True,
        'message': '–ü—Ä–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ',
        'cart_items_count': cart_items_count
    })

@app.route('/update-cart', methods=['POST'])
@login_required
def update_cart():
    if hasattr(current_user, 'is_admin') and current_user.is_admin:
        return jsonify({'success': False, 'message': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–æ–∫—É–ø–∫–∏'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –º–∞–≥–∞–∑–∏–Ω
    settings = ShopSettings.get_settings()
    if not settings.is_open:
        return jsonify({'success': False, 'message': '–ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç'})
    
    data = request.get_json()
    prize_id = data.get('prize_id')
    quantity = data.get('quantity', 1)
    
    if not prize_id or not quantity:
        return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞'})
    
    prize = Prize.query.get(prize_id)
    if not prize or not prize.is_active:
        return jsonify({'success': False, 'message': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
    if prize.is_unique:
        quantity = 1
    elif prize.quantity > 0 and quantity > prize.quantity:
        return jsonify({'success': False, 'message': '–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ'})
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if isinstance(current_user, Teacher):
        cart_item = TeacherCartItem.query.filter_by(
            teacher_id=current_user.id,
            prize_id=prize_id
        ).first()
    else:
        cart_item = CartItem.query.filter_by(
            user_id=current_user.id,
            prize_id=prize_id
        ).first()
    
    if not cart_item:
        return jsonify({'success': False, 'message': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ'})
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    cart_item.quantity = quantity
    db.session.commit()
    
    return jsonify({
        'success': True,
        'message': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ'
    })

@app.route('/remove-from-cart', methods=['POST'])
@login_required
def remove_from_cart():
    if hasattr(current_user, 'is_admin') and current_user.is_admin:
        return jsonify({'success': False, 'message': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–æ–∫—É–ø–∫–∏'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –º–∞–≥–∞–∑–∏–Ω
    settings = ShopSettings.get_settings()
    if not settings.is_open:
        return jsonify({'success': False, 'message': '–ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç'})
    
    data = request.get_json()
    prize_id = data.get('prize_id')
    
    if not prize_id:
        return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞'})
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if isinstance(current_user, Teacher):
        cart_item = TeacherCartItem.query.filter_by(
            teacher_id=current_user.id,
            prize_id=prize_id
        ).first()
    else:
        cart_item = CartItem.query.filter_by(
            user_id=current_user.id,
            prize_id=prize_id
        ).first()
    
    if not cart_item:
        return jsonify({'success': False, 'message': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ'})
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    db.session.delete(cart_item)
    db.session.commit()
    
    return jsonify({
        'success': True,
        'message': '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã'
    })

@app.route('/checkout', methods=['POST'])
@login_required
def checkout():
    if hasattr(current_user, 'is_admin') and current_user.is_admin:
        return jsonify({'success': False, 'message': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–æ–∫—É–ø–∫–∏'})
    
    settings = ShopSettings.get_settings()
    if not settings.is_open:
        return jsonify({'success': False, 'message': '–ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç'})
    
    if not settings.can_user_shop(current_user):
        return jsonify({'success': False, 'message': '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞–≥–∞–∑–∏–Ω—É'})
    
    data = request.get_json()
    full_name = data.get('full_name')
    phone = data.get('phone')
    address = data.get('address')
    
    if not all([full_name, phone, address]):
        return jsonify({'success': False, 'message': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'})
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    if isinstance(current_user, Teacher):
        cart_items = TeacherCartItem.query.filter_by(teacher_id=current_user.id).all()
    else:
        cart_items = CartItem.query.filter_by(user_id=current_user.id).all()
    
    if not cart_items:
        return jsonify({'success': False, 'message': '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤
    total_cost = sum(item.prize.points_cost * item.quantity for item in cart_items)
    if current_user.balance < total_cost:
        return jsonify({'success': False, 'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    for item in cart_items:
        if item.prize.quantity > 0 and item.quantity > item.prize.quantity:
            return jsonify({'success': False, 'message': f'–¢–æ–≤–∞—Ä "{item.prize.name}" –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {item.prize.quantity} —à—Ç.'})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –Ω–µ –ø–æ–∫—É–ø–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ —É–∂–µ
        if item.prize.is_unique:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞
            current_season = TournamentSettings.get_settings().current_season_number
            
            if isinstance(current_user, Teacher):
                existing_purchase = TeacherPrizePurchase.query.filter(
                    TeacherPrizePurchase.teacher_id == current_user.id,
                    TeacherPrizePurchase.prize_id == item.prize.id,
                    TeacherPrizePurchase.season_number == current_season,
                    TeacherPrizePurchase.status != 'cancelled'
                ).first()
            else:
                existing_purchase = PrizePurchase.query.filter(
                    PrizePurchase.user_id == current_user.id,
                    PrizePurchase.prize_id == item.prize.id,
                    PrizePurchase.season_number == current_season,
                    PrizePurchase.status != 'cancelled'
                ).first()
            
            if existing_purchase:
                return jsonify({'success': False, 'message': f'–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑ "{item.prize.name}" –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ'})
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø–æ–∫—É–ø–∫–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        current_season = TournamentSettings.get_settings().current_season_number
        
        for item in cart_items:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
            if isinstance(current_user, Teacher):
                purchase = TeacherPrizePurchase(
                    teacher_id=current_user.id,
                    prize_id=item.prize.id,
                    quantity=item.quantity,
                    points_cost=item.prize.points_cost * item.quantity,
                    full_name=full_name,
                    phone=phone,
                    address=address,
                    status='pending',
                    season_number=current_season
                )
            else:
                purchase = PrizePurchase(
                    user_id=current_user.id,
                    prize_id=item.prize.id,
                    quantity=item.quantity,
                    points_cost=item.prize.points_cost * item.quantity,
                    full_name=full_name,
                    phone=phone,
                    address=address,
                    status='pending',
                    season_number=current_season
                )
            db.session.add(purchase)
            
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            if item.prize.quantity > 0:
                item.prize.quantity -= item.quantity
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–ª—ã
        current_user.balance -= total_cost
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        if isinstance(current_user, Teacher):
            TeacherCartItem.query.filter_by(teacher_id=current_user.id).delete()
        else:
            CartItem.query.filter_by(user_id=current_user.id).delete()
        
        db.session.commit()
        return jsonify({'success': True, 'message': '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω'})
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞'})

@app.route('/admin/orders')
@login_required
def admin_orders():
    if not current_user.is_admin:
        flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤', 'error')
        return redirect(url_for('home'))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = request.args.get('page', 1, type=int)
    per_page = 20  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_orders = PrizePurchase.query.order_by(PrizePurchase.created_at.desc()).all()
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —É—á–∏—Ç–µ–ª–µ–π
    teacher_orders = TeacherPrizePurchase.query.order_by(TeacherPrizePurchase.created_at.desc()).all()
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    all_orders = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∏–ø–æ–º 'user'
    for order in user_orders:
        all_orders.append({
            'id': order.id,
            'type': 'user',
            'created_at': order.created_at,
            'user': order.user,
            'teacher': None,
            'prize': order.prize,
            'quantity': order.quantity,
            'points_cost': order.points_cost,
            'status': order.status,
            'full_name': order.full_name,
            'phone': order.phone,
            'address': order.address
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã —É—á–∏—Ç–µ–ª–µ–π —Å —Ç–∏–ø–æ–º 'teacher'
    for order in teacher_orders:
        all_orders.append({
            'id': order.id,
            'type': 'teacher',
            'created_at': order.created_at,
            'user': None,
            'teacher': order.teacher,
            'prize': order.prize,
            'quantity': order.quantity,
            'points_cost': order.points_cost,
            'status': order.status,
            'full_name': order.full_name,
            'phone': order.phone,
            'address': order.address
        })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    all_orders.sort(key=lambda x: x['created_at'], reverse=True)
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_orders = len(all_orders)
    total_pages = (total_orders + per_page - 1) // per_page
    
    start_idx = (page - 1) * per_page
    end_idx = start_idx + per_page
    orders_page = all_orders[start_idx:end_idx]
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    class Pagination:
        def __init__(self, items, page, per_page, total, pages):
            self.items = items
            self.page = page
            self.per_page = per_page
            self.total = total
            self.pages = pages
            self.has_prev = page > 1
            self.has_next = page < pages
            self.prev_num = page - 1 if page > 1 else None
            self.next_num = page + 1 if page < pages else None
        
        def iter_pages(self, left_edge=2, left_current=2, right_current=5, right_edge=2):
            """
            –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            """
            last = 0
            for num in range(1, self.pages + 1):
                if (num <= left_edge or 
                    (num > self.page - left_current - 1 and 
                     num < self.page + right_current) or 
                    num > self.pages - right_edge):
                    if last + 1 != num:
                        yield None
                    yield num
                    last = num
    
    orders = Pagination(orders_page, page, per_page, total_orders, total_pages)
    
    return render_template('admin/orders.html', 
                         title='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏',
                         orders=orders)

@app.route('/admin/orders/<int:order_id>/details')
@login_required
def admin_order_details(order_id):
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'})
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –≤ —Ç–∞–±–ª–∏—Ü–µ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    order = PrizePurchase.query.get(order_id)
    order_type = 'user'
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ —É—á–∏—Ç–µ–ª–µ–π
    if not order:
        order = TeacherPrizePurchase.query.get(order_id)
        order_type = 'teacher'
    
    if not order:
        return jsonify({'success': False, 'message': '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if order_type == 'user':
        user_data = {
            'username': order.user.username,
            'email': order.user.email,
            'type': '–£—á–µ–Ω–∏–∫'
        }
    else:
        user_data = {
            'username': order.teacher.full_name,
            'email': order.teacher.email,
            'type': '–£—á–∏—Ç–µ–ª—å'
        }
    
    return jsonify({
        'id': order.id,
        'type': order_type,
        'created_at': order.created_at.strftime('%d.%m.%Y %H:%M'),
        'status': order.status,
        'user': user_data,
        'prize': {
            'name': order.prize.name
        },
        'quantity': order.quantity,
        'points_cost': order.points_cost,
        'full_name': order.full_name,
        'phone': order.phone,
        'address': order.address
    })

@app.route('/admin/orders/<int:order_id>/toggle-status', methods=['POST'])
@login_required
def admin_toggle_order_status(order_id):
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'})
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –≤ —Ç–∞–±–ª–∏—Ü–µ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    order = PrizePurchase.query.get(order_id)
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ —É—á–∏—Ç–µ–ª–µ–π
    if not order:
        order = TeacherPrizePurchase.query.get(order_id)
    
    if not order:
        return jsonify({'success': False, 'message': '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    order.status = 'completed' if order.status == 'pending' else 'pending'
    db.session.commit()
    
    return jsonify({
        'success': True,
        'message': '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
    })

@app.route('/admin/orders/<int:order_id>/delete', methods=['POST'])
@login_required
def admin_delete_order(order_id):
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'})
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –≤ —Ç–∞–±–ª–∏—Ü–µ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    order = PrizePurchase.query.get(order_id)
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ —É—á–∏—Ç–µ–ª–µ–π
    if not order:
        order = TeacherPrizePurchase.query.get(order_id)
    
    if not order:
        return jsonify({'success': False, 'message': '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
    db.session.delete(order)
    db.session.commit()
    
    return jsonify({
        'success': True,
        'message': '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    })

@app.route('/purchase/<int:purchase_id>/cancel', methods=['POST'])
@login_required
def cancel_purchase(purchase_id):
    # –ò—â–µ–º –ø–æ–∫—É–ø–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    purchase = PrizePurchase.query.get(purchase_id)
    is_teacher_purchase = False
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ —É—á–∏—Ç–µ–ª–µ–π
    if not purchase:
        purchase = TeacherPrizePurchase.query.get(purchase_id)
        is_teacher_purchase = True
    
    if not purchase:
        return jsonify({'success': False, 'message': '–ü–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫—É–ø–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if is_teacher_purchase:
        if purchase.teacher_id != current_user.id:
            return jsonify({'success': False, 'message': '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–∏'}), 403
    else:
        if purchase.user_id != current_user.id:
            return jsonify({'success': False, 'message': '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–∏'}), 403
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫—É–ø–∫–∞ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    if purchase.status != 'pending':
        return jsonify({'success': False, 'message': '–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –ø–æ–∫—É–ø–∫—É'}), 400
    
    # –î–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    warning_message = ""
    if purchase.prize.is_unique:
        warning_message = " –í–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑. –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞."
    
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        current_user.balance += purchase.points_cost
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏
        purchase.status = 'cancelled'
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
        purchase.prize.quantity += purchase.quantity
        
        db.session.commit()
        return jsonify({
            'success': True, 
            'message': '–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ë–∞–ª–ª—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç.' + warning_message
        })
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–∫—É–ø–∫–∏'}), 500

@app.route('/admin/shop/settings')
@login_required
def admin_shop_settings():
    if not current_user.is_admin:
        flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤', 'error')
        return redirect(url_for('home'))
    
    settings = ShopSettings.get_settings()
    return render_template('admin/shop_settings.html', 
                         title='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞',
                         settings=settings)

@app.route('/admin/shop/settings/update', methods=['POST'])
@login_required
def admin_update_shop_settings():
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'})
    
    settings = ShopSettings.get_settings()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings.is_open = 'is_open' in request.form
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = ['1_2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
    for category in categories:
        try:
            percentage = int(request.form.get(f'top_users_percentage_{category}', 100))
            if percentage < 1 or percentage > 100:
                raise ValueError
            setattr(settings, f'top_users_percentage_{category}', percentage)
        except ValueError:
            return jsonify({'success': False, 'message': f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.replace("_", "-")}'})
    
    db.session.commit()
    
    return jsonify({
        'success': True,
        'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
    })

@app.route('/admin/tournaments/settings', methods=['GET', 'POST'])
@login_required
def tournament_settings():
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    settings = TournamentSettings.get_settings()
    
    if request.method == 'POST':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Å–µ–∑–æ–Ω –∑–∞–∫—Ä—ã—Ç –∏ —Ç–µ–ø–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è
        was_season_inactive = not settings.is_season_active
        settings.is_season_active = 'is_season_active' in request.form
        
        # –ï—Å–ª–∏ —Å–µ–∑–æ–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç –∏ —Ç–µ–ø–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞
        if was_season_inactive and settings.is_season_active:
            settings.current_season_number += 1
            flash(f'–°–µ–∑–æ–Ω —Ç—É—Ä–Ω–∏—Ä–æ–≤ –æ—Ç–∫—Ä—ã—Ç! –ù–∞—á–∞—Ç —Å–µ–∑–æ–Ω #{settings.current_season_number}', 'success')
        
        settings.allow_category_change = 'allow_category_change' in request.form
        settings.closed_season_message = request.form.get('closed_season_message', '')
        db.session.commit()
        
        if not was_season_inactive or not settings.is_season_active:
            flash('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success')
        
        return redirect(url_for('tournament_settings'))
    
    return render_template('admin/tournament_settings.html', settings=settings)

@app.route('/admin/news')
@login_required
def admin_news():
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    news_list = News.query.order_by(News.created_at.desc()).all()
    return render_template('admin/news.html', news_list=news_list)

@app.route('/admin/news/add', methods=['GET', 'POST'])
@login_required
def admin_add_news():
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    if request.method == 'POST':
        title = request.form.get('title')
        short_description = request.form.get('short_description')
        full_content = request.form.get('full_content')
        is_published = 'is_published' in request.form
        
        if not title or not short_description or not full_content:
            flash('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', 'error')
            return render_template('admin/add_news.html')
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
        news = News(
            title=title,
            short_description=short_description,
            full_content=full_content,
            is_published=is_published
        )
        
        db.session.add(news)
        db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ—Å—Ç–∏
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        uploaded_files = request.files.getlist('images')
        captions = request.form.getlist('captions')
        main_image_index = request.form.get('main_image_index', type=int)
        
        main_image_set = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        for i, file in enumerate(uploaded_files):
            if file and file.filename:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ S3
                image_filename = upload_file_to_s3(file, 'news')
                if image_filename:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    caption = captions[i] if i < len(captions) else None
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    is_main = (main_image_index is not None and i == main_image_index) or (i == 0 and main_image_index is None and not main_image_set)
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                    news_image = NewsImage(
                        news_id=news.id,
                        image_filename=image_filename,
                        caption=caption,
                        order_index=i,
                        is_main=is_main
                    )
                    
                    db.session.add(news_image)
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ø–æ–ª–µ image –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    if is_main:
                        news.image = image_filename
                        main_image_set = True
        
        db.session.commit()
        
        flash('–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success')
        return redirect(url_for('admin_news'))
    
    return render_template('admin/add_news.html')

@app.route('/admin/news/<int:news_id>/edit', methods=['GET', 'POST'])
@login_required
def admin_edit_news(news_id):
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    news = News.query.get_or_404(news_id)
    
    if request.method == 'POST':
        news.title = request.form.get('title')
        news.short_description = request.form.get('short_description')
        news.full_content = request.form.get('full_content')
        news.is_published = 'is_published' in request.form
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        existing_image_ids = request.form.getlist('existing_image_ids')
        
        for image in news.images:
            if str(image.id) not in existing_image_ids:
                # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ S3
                delete_file_from_s3(image.image_filename, 'news')
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã
                db.session.delete(image)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        uploaded_files = request.files.getlist('images')
        captions = request.form.getlist('captions')
        main_image_index = request.form.get('main_image_index', type=int)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π order_index
        max_order = db.session.query(db.func.max(NewsImage.order_index)).filter_by(news_id=news.id).scalar() or -1
        
        new_images_added = False
        main_image_set = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        for i, file in enumerate(uploaded_files):
            if file and file.filename:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ S3
                image_filename = upload_file_to_s3(file, 'news')
                if image_filename:
                    new_images_added = True
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    caption = captions[i] if i < len(captions) else None
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    # –ï—Å–ª–∏ main_image_index —É–∫–∞–∑–∞–Ω –∏ —Ä–∞–≤–µ–Ω —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É, –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
                    is_main = (main_image_index is not None and i == main_image_index) or (i == 0 and main_image_index is None and not main_image_set)
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                    news_image = NewsImage(
                        news_id=news.id,
                        image_filename=image_filename,
                        caption=caption,
                        order_index=max_order + 1 + i,
                        is_main=is_main
                    )
                    
                    db.session.add(news_image)
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ image
                    if is_main:
                        news.image = image_filename
                        main_image_set = True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
        if main_image_index is not None and not new_images_added:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ is_main
            NewsImage.query.filter_by(news_id=news.id).update({'is_main': False})
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≥–ª–∞–≤–Ω—ã–π —Ñ–ª–∞–≥
            remaining_images = list(news.images)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
            if main_image_index < len(remaining_images):
                main_image = remaining_images[main_image_index]
                main_image.is_main = True
                news.image = main_image.image_filename
            else:
                # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ–≤–µ—Ä–Ω—ã–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                news.image = None
        elif not new_images_added and not news.images:
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            news.image = None
        
        db.session.commit()
        flash('–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success')
        return redirect(url_for('admin_news'))
    
    return render_template('admin/edit_news.html', news=news)

@app.route('/admin/news/<int:news_id>/delete', methods=['POST'])
@login_required
def admin_delete_news(news_id):
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    news = News.query.get_or_404(news_id)
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ S3
    for image in news.images:
        delete_file_from_s3(image.image_filename, 'news')
    
    # –£–¥–∞–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ S3 (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if news.image:
        delete_file_from_s3(news.image, 'news')
    
    db.session.delete(news)
    db.session.commit()
    
    flash('–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', 'success')
    return redirect(url_for('admin_news'))

@app.route('/admin/teachers')
@login_required
def admin_teachers():
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    page = request.args.get('page', 1, type=int)
    sort_by = request.args.get('sort', 'created_at')  # created_at, tournaments, active_students
    sort_order = request.args.get('order', 'desc')  # asc, desc
    per_page = 20  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∏—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∏—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    all_teachers = Teacher.query.all()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö —É—á–∏—Ç–µ–ª–µ–π
    for teacher in all_teachers:
        students = teacher.students
        total_tournaments = sum(student.tournaments_count or 0 for student in students)
        active_students = sum(1 for student in students if student.tournaments_count and student.tournaments_count > 0)
        
        teacher.total_students_tournaments = total_tournaments
        teacher.active_students_count = active_students
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∏—Ç–µ–ª–µ–π
    if sort_by == 'tournaments':
        all_teachers.sort(key=lambda x: x.total_students_tournaments, reverse=(sort_order == 'desc'))
    elif sort_by == 'active_students':
        all_teachers.sort(key=lambda x: x.active_students_count, reverse=(sort_order == 'desc'))
    else:  # sort_by == 'created_at'
        all_teachers.sort(key=lambda x: x.created_at, reverse=(sort_order == 'desc'))
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é
    from flask_sqlalchemy import Pagination
    total_teachers = len(all_teachers)
    start = (page - 1) * per_page
    end = start + per_page
    teachers = all_teachers[start:end]
    
    teachers_pagination = Pagination(
        query=None,
        page=page,
        per_page=per_page,
        total=total_teachers,
        items=teachers
    )
    
    return render_template('admin/teachers.html', 
                         teachers=teachers,
                         teachers_pagination=teachers_pagination,
                         sort_by=sort_by,
                         sort_order=sort_order)

@app.route('/admin/teachers/<int:teacher_id>/toggle-block', methods=['POST'])
@login_required
def admin_toggle_teacher_block(teacher_id):
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    teacher = Teacher.query.get_or_404(teacher_id)
    
    if teacher.is_blocked:
        teacher.is_blocked = False
        teacher.block_reason = None
        flash(f'–£—á–∏—Ç–µ–ª—å {teacher.full_name} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'success')
    else:
        teacher.is_blocked = True
        teacher.block_reason = request.form.get('reason', '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
        flash(f'–£—á–∏—Ç–µ–ª—å {teacher.full_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'warning')
    
    db.session.commit()
    return redirect(url_for('admin_teachers'))

@app.route('/admin/teachers/<int:teacher_id>/details')
@login_required
def admin_teacher_details(teacher_id):
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'danger')
        return redirect(url_for('home'))
    
    teacher = Teacher.query.get_or_404(teacher_id)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–µ–Ω–∏–∫–æ–≤
    students = teacher.students
    total_students = len(students)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤ (—É—á–∞—Å—Ç–≤–æ–≤–∞–≤—à–∏—Ö –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö)
    active_students = sum(1 for student in students if student.tournaments_count and student.tournaments_count > 0)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤ —É—á–µ–Ω–∏–∫–æ–≤
    total_tournaments = sum(student.tournaments_count or 0 for student in students)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑ —Ç–æ–≥–æ –∂–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    same_institution_students = 0
    if teacher.educational_institution:
        same_institution_students = sum(1 for student in students 
                                     if student.educational_institution and 
                                     student.educational_institution.id == teacher.educational_institution.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
    students_page = request.args.get('students_page', 1, type=int)
    students_per_page = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–µ–Ω–∏–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    students_pagination = None
    if students:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
        from flask_sqlalchemy import Pagination
        total_students_count = len(students)
        start = (students_page - 1) * students_per_page
        end = start + students_per_page
        paginated_students = students[start:end]
        
        students_pagination = Pagination(
            query=None,  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º query –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            page=students_page,
            per_page=students_per_page,
            total=total_students_count,
            items=paginated_students
        )
        students_to_show = paginated_students
    else:
        students_to_show = []
    

    
    return render_template('admin/teacher_details.html',
                         teacher=teacher,
                         total_students=total_students,
                         active_students=active_students,
                         total_tournaments=total_tournaments,
                         same_institution_students=same_institution_students,
                         students=students_to_show,
                         students_pagination=students_pagination)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
_scheduler_initialized = False
_scheduler_lock_global = threading.Lock()

def try_acquire_scheduler():
    """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–Ω—è—Ç"""
    global _scheduler_initialized
    
    with _scheduler_lock_global:
        if _scheduler_initialized:
            return False
        
        use_db_lock = os.environ.get('USE_DB_LOCK', 'false').lower() == 'true'
        
        if use_db_lock:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ –ë–î
            if acquire_scheduler_lock_db('scheduler_main', timeout_minutes=30):
                print("üîß –≠—Ç–æ—Ç –≤–æ—Ä–∫–µ—Ä –ø–æ–¥—Ö–≤–∞—Ç–∏–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–ë–î –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)")
                print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
                restore_scheduler_jobs()

                print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
                initialize_scheduler_jobs()

                print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π...")
                check_expired_payments()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {scheduler.running}")
                print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {len(scheduler.get_jobs())}")
                for job in scheduler.get_jobs():
                    print(f"  - {job.id}: {job.trigger}")
                
                _scheduler_initialized = True
                return True
            else:
                print("üîß –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –≤–æ—Ä–∫–µ—Ä–æ–º (–ë–î)")
                return False
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            lock_file = get_lock_file_path()
            
            if platform.system() == 'Windows':
                # Windows –≤–µ—Ä—Å–∏—è
                try:
                    fd = os.open(lock_file, os.O_CREAT | os.O_RDWR | os.O_TRUNC)
                    msvcrt.locking(fd, msvcrt.LK_NBLCK, 1)
                    
                    worker_pid = os.getpid()
                    os.write(fd, str(worker_pid).encode())
                    os.fsync(fd)
                    
                    print("üîß –≠—Ç–æ—Ç –≤–æ—Ä–∫–µ—Ä –ø–æ–¥—Ö–≤–∞—Ç–∏–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (—Ñ–∞–π–ª–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Windows)")
                    print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
                    restore_scheduler_jobs()

                    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
                    initialize_scheduler_jobs()

                    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π...")
                    check_expired_payments()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                    print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {scheduler.running}")
                    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {len(scheduler.get_jobs())}")
                    for job in scheduler.get_jobs():
                        print(f"  - {job.id}: {job.trigger}")
                    
                    _scheduler_initialized = True
                    return True
                except (IOError, OSError):
                    print("üîß –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –≤–æ—Ä–∫–µ—Ä–æ–º (—Ñ–∞–π–ª Windows)")
                    return False
            else:
                # Unix/Linux –≤–µ—Ä—Å–∏—è
                try:
                    fd = os.open(lock_file, os.O_CREAT | os.O_RDWR)
                    fcntl.flock(fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
                    
                    worker_pid = os.getpid()
                    os.write(fd, str(worker_pid).encode())
                    os.fsync(fd)
                    
                    print("üîß –≠—Ç–æ—Ç –≤–æ—Ä–∫–µ—Ä –ø–æ–¥—Ö–≤–∞—Ç–∏–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (—Ñ–∞–π–ª–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Unix)")
                    print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
                    restore_scheduler_jobs()

                    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
                    initialize_scheduler_jobs()

                    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π...")
                    check_expired_payments()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                    print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {scheduler.running}")
                    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {len(scheduler.get_jobs())}")
                    for job in scheduler.get_jobs():
                        print(f"  - {job.id}: {job.trigger}")
                    
                    _scheduler_initialized = True
                    return True
                except IOError:
                    print("üîß –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –≤–æ—Ä–∫–µ—Ä–æ–º (—Ñ–∞–π–ª Unix)")
                    return False

def start_scheduler_recovery_thread():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    def recovery_worker():
        while True:
            try:
                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
                # –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å
                if not _scheduler_initialized:
                    print("üîç –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å...")
                    try_acquire_scheduler()
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    recovery_thread = threading.Thread(target=recovery_worker, daemon=True, name="SchedulerRecovery")
    recovery_thread.start()
    print("üîÑ –ü–æ—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω")

@app.before_first_request
def clear_sessions():
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —Å–µ—Å—Å–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    start_memory_cleanup_once()
    cleanup_all_sessions()
    with app.app_context():
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        db.create_all()

        # –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        print("–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        create_admin_user()

        # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        print("–û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π...")
        cleanup_all_sessions()

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        try_acquire_scheduler()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        start_scheduler_recovery_thread()

        print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É!")

@app.route('/change-password', methods=['POST'])
@login_required
def change_password():
    data = request.get_json()
    current_password = data.get('current_password')
    new_password = data.get('new_password')
    
    if not current_password or not new_password:
        return jsonify({
            'success': False,
            'message': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'
        })
    
    if not current_user.check_password(current_password):
        return jsonify({
            'success': False,
            'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å'
        })
    
    is_strong, message = is_password_strong(new_password)
    if not is_strong:
        return jsonify({
            'success': False,
            'message': message
        })
    
    current_user.set_password(new_password)
    db.session.commit()
    
    return jsonify({
        'success': True,
        'message': '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω'
    })

@app.route('/robots.txt')
def robots_txt():
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è robots.txt"""
    return send_from_directory('static', 'robots.txt', mimetype='text/plain')

@app.route('/sitemap.xml')
def sitemap_xml():
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è sitemap.xml"""
    return send_from_directory('static', 'sitemap.xml', mimetype='application/xml')

@app.route('/privacy-policy')
def privacy_policy():
    return render_template('privacy_policy.html', title='–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏')

@app.route('/consent-pdf')
def consent_pdf():
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    return send_from_directory('static', '—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î_.pdf')

@app.route('/teacher-consent-pdf')
def teacher_consent_pdf():
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π"""
    return send_from_directory('static', '—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î_—É—á–∏—Ç–µ–ª—å_.pdf')

@app.route('/rights-notification-pdf')
def rights_notification_pdf():
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤"""
    return send_from_directory('static', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤.pdf')

@app.route('/cookie-policy-pdf')
def cookie_policy_pdf():
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ cookie"""
    return send_from_directory('static', '–ø–æ–ª–∏—Ç–∏–∫–∞ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ cookie.pdf')

def create_consent_pdf(user):
    """–°–æ–∑–¥–∞–µ—Ç PDF —Ñ–∞–π–ª —Å —Å–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if hasattr(user, 'parent_name'):  # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            doc_folder = 'doc/user'
        elif hasattr(user, 'full_name'):  # –£—á–∏—Ç–µ–ª—å
            doc_folder = 'doc/teacher'
        else:
            # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            doc_folder = 'doc/user'
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(doc_folder):
            os.makedirs(doc_folder)
        
        output_path = f'{doc_folder}/{user.id}.pdf'
        
        # –°–æ–∑–¥–∞–µ–º PDF —Å –Ω—É–ª—è
        c = canvas.Canvas(output_path, pagesize=A4)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_width, page_height = A4
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        font_name = 'Helvetica'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —à—Ä–∏—Ñ—Ç–∞–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –û–°
        font_paths = [
            # Windows –ø—É—Ç–∏
            'C:/Windows/Fonts/dejavusans.ttf',
            'C:/Windows/Fonts/arial.ttf',
            'C:/Windows/Fonts/tahoma.ttf',
            # Linux –ø—É—Ç–∏
            '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf',
            '/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf',
            '/usr/share/fonts/truetype/ubuntu/Ubuntu-R.ttf',
            '/usr/share/fonts/TTF/DejaVuSans.ttf',
            '/usr/share/fonts/truetype/freefont/FreeSans.ttf',
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ Linux –ø—É—Ç–∏
            '/usr/local/share/fonts/DejaVuSans.ttf',
            '/opt/fonts/DejaVuSans.ttf',
        ]
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        for font_path in font_paths:
            try:
                if os.path.exists(font_path):
                    if 'dejavu' in font_path.lower():
                        pdfmetrics.registerFont(TTFont('DejaVuSans', font_path))
                        font_name = 'DejaVuSans'
                        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à—Ä–∏—Ñ—Ç: DejaVuSans ({font_path})")
                        break
                    elif 'arial' in font_path.lower():
                        pdfmetrics.registerFont(TTFont('Arial', font_path))
                        font_name = 'Arial'
                        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à—Ä–∏—Ñ—Ç: Arial ({font_path})")
                        break
                    elif 'liberation' in font_path.lower():
                        pdfmetrics.registerFont(TTFont('LiberationSans', font_path))
                        font_name = 'LiberationSans'
                        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à—Ä–∏—Ñ—Ç: LiberationSans ({font_path})")
                        break
                    elif 'ubuntu' in font_path.lower():
                        pdfmetrics.registerFont(TTFont('Ubuntu', font_path))
                        font_name = 'Ubuntu'
                        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à—Ä–∏—Ñ—Ç: Ubuntu ({font_path})")
                        break
                    elif 'freesans' in font_path.lower():
                        pdfmetrics.registerFont(TTFont('FreeSans', font_path))
                        font_name = 'FreeSans'
                        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à—Ä–∏—Ñ—Ç: FreeSans ({font_path})")
                        break
            except Exception as e:
                continue
        
        if font_name == 'Helvetica':
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã")
            print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —à—Ä–∏—Ñ—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∫–æ–º–∞–Ω–¥–æ–π:")
            print("   sudo apt-get update && sudo apt-get install fonts-dejavu fonts-liberation")
            print("   –∏–ª–∏")
            print("   sudo apt-get install ttf-dejavu ttf-liberation")
            print("üî§ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à—Ä–∏—Ñ—Ç: Helvetica (–≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π)")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç
        c.setFont(font_name, 12)
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º —à–∏—Ä–∏–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        def wrap_text(text, max_width, font_name, font_size):
            """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã"""
            c.setFont(font_name, font_size)
            words = text.split()
            lines = []
            current_line = []
            
            for word in words:
                current_line.append(word)
                test_line = ' '.join(current_line)
                text_width = c.stringWidth(test_line, font_name, font_size)
                
                if text_width > max_width:
                    if len(current_line) > 1:
                        current_line.pop()  # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ
                        lines.append(' '.join(current_line))
                        current_line = [word]
                    else:
                        # –ï—Å–ª–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
                        lines.append(word)
                        current_line = []
            
            if current_line:
                lines.append(' '.join(current_line))
            
            return lines
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ —à–∏—Ä–∏–Ω–µ
        def justify_text(text, max_width, font_name, font_size):
            """–í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ —à–∏—Ä–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è—è –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏"""
            c.setFont(font_name, font_size)
            words = text.split()
            
            if len(words) <= 1:
                return text  # –ù–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            text_width = c.stringWidth(text, font_name, font_size)
            
            if text_width >= max_width:
                return text  # –ù–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é —à–∏—Ä–∏–Ω—É
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            total_spaces_needed = max_width - text_width
            spaces_between_words = len(words) - 1
            
            if spaces_between_words == 0:
                return text
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
            extra_spaces_per_gap = total_spaces_needed / spaces_between_words
            
            # –°–æ–∑–¥–∞–µ–º –≤—ã—Ä–æ–≤–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            justified_text = words[0]
            for i in range(1, len(words)):
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–±–µ–ª –ø–ª—é—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
                spaces_to_add = int(extra_spaces_per_gap * i) - int(extra_spaces_per_gap * (i - 1))
                justified_text += ' ' * (1 + spaces_to_add) + words[i]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –≤—ã—Ä–æ–≤–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
            justified_width = c.stringWidth(justified_text, font_name, font_size)
            if justified_width > max_width:
                # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
                return text
            
            return justified_text
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if hasattr(user, 'parent_name'):  # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            consent_text = """–î–µ–π—Å—Ç–≤—É—è —Å–≤–æ–±–æ–¥–Ω–æ, —Å–≤–æ–µ–π –≤–æ–ª–µ–π –∏ –≤ —Å–≤–æ–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–µ, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—è —Å–≤–æ—é –¥–µ–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ –¥–∞–µ—Ç —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –æ–±—â–µ—Å—Ç–≤—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é ¬´–õ–∏–≥–∞ –ó–Ω–∞—Ç–æ–∫–æ–≤¬ª, –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ: 231761, –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–µ–ª–∞—Ä—É—Å—å, –≥. –°–∫–∏–¥–µ–ª—å —É–ª. –ó–µ–ª—ë–Ω–∞—è 43–í, –ø–æ–º. 53,  –£–ù–ü 591054732 (–¥–∞–ª–µ–µ ‚Äì –û–ø–µ—Ä–∞—Ç–æ—Ä), –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏:


‚Ä¢ –î–∞–Ω–Ω–æ–µ –°–æ–≥–ª–∞—Å–∏–µ –¥–∞–µ—Ç—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–∞–∫ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, —Ç–∞–∫ –∏ —Å –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.
‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ –¥–∞–µ—Ç—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –§–ò–û –∑–∞–∫–æ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–µ–≥–æ —É—á–∞—â–µ–≥–æ—Å—è, –§–ò –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–µ–≥–æ —É—á–∞—â–µ–≥–æ—Å—è,  –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã; –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –∫–ª–∞—Å—Å –æ–±—É—á–µ–Ω–∏—è.
‚Ä¢ –¶–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å–µ https://liga-znatokov.by/register  —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –∑–∞–∫–∞–∑–æ–º —É—Å–ª—É–≥–∏.
‚Ä¢ –í —Ö–æ–¥–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –±—É–¥—É—Ç —Å–æ–≤–µ—Ä—à–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: —Å–±–æ—Ä, —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏—è; —Ö—Ä–∞–Ω–µ–Ω–∏–µ; –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ; –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ; –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ; —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ; –∑–∞–ø–∏—Å—å; —É–¥–∞–ª–µ–Ω–∏–µ; –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ; –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ; –∏–∑–º–µ–Ω–µ–Ω–∏–µ; –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ; –¥–æ—Å—Ç—É–ø.
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥–æ –æ—Ç–∑—ã–≤–∞ —Å–æ–≥–ª–∞—Å–∏—è.
‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–æ–∑–≤–∞–Ω–æ —Å—É–±—ä–µ–∫—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º –ø—É—Ç–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Å—å–º–µ–Ω–Ω–æ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏—è –û–ø–µ—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—é –ø–æ –∞–¥—Ä–µ—Å—É, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ –Ω–∞—á–∞–ª–µ –¥–∞–Ω–Ω–æ–≥–æ –°–æ–≥–ª–∞—Å–∏—è —Å —É—á–µ—Ç–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–π –ü–æ–ª–∏—Ç–∏–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        elif hasattr(user, 'full_name'):  # –£—á–∏—Ç–µ–ª—å
            consent_text = """–î–µ–π—Å—Ç–≤—É—è —Å–≤–æ–±–æ–¥–Ω–æ, —Å–≤–æ–µ–π –≤–æ–ª–µ–π –∏ –≤ —Å–≤–æ–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–µ, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—è —Å–≤–æ—é –¥–µ–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ –¥–∞–µ—Ç —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –æ–±—â–µ—Å—Ç–≤—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é ¬´–õ–∏–≥–∞ –ó–Ω–∞—Ç–æ–∫–æ–≤¬ª, –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ: 231761, –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–µ–ª–∞—Ä—É—Å—å, –≥. –°–∫–∏–¥–µ–ª—å —É–ª. –ó–µ–ª—ë–Ω–∞—è 43–í, –ø–æ–º. 53,  –£–ù–ü 591054732 (–¥–∞–ª–µ–µ ‚Äì –û–ø–µ—Ä–∞—Ç–æ—Ä), –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏:


‚Ä¢ –î–∞–Ω–Ω–æ–µ –°–æ–≥–ª–∞—Å–∏–µ –¥–∞–µ—Ç—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–∞–∫ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, —Ç–∞–∫ –∏ —Å –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.
‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ –¥–∞–µ—Ç—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –§–ò–û –∑–∞–∫–æ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–µ–≥–æ —É—á–∞—â–µ–≥–æ—Å—è, –§–ò –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–µ–≥–æ —É—á–∞—â–µ–≥–æ—Å—è,  –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã; –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –∫–ª–∞—Å—Å –æ–±—É—á–µ–Ω–∏—è.
‚Ä¢ –¶–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å–µ https://liga-znatokov.by/teacher-register  —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –∑–∞–∫–∞–∑–æ–º —É—Å–ª—É–≥–∏.
‚Ä¢ –í —Ö–æ–¥–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –±—É–¥—É—Ç —Å–æ–≤–µ—Ä—à–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: —Å–±–æ—Ä, —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏—è; —Ö—Ä–∞–Ω–µ–Ω–∏–µ; –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ; –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ; –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ; —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ; –∑–∞–ø–∏—Å—å; —É–¥–∞–ª–µ–Ω–∏–µ; –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ; –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ; –∏–∑–º–µ–Ω–µ–Ω–∏–µ; –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ; –¥–æ—Å—Ç—É–ø.
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥–æ –æ—Ç–∑—ã–≤–∞ —Å–æ–≥–ª–∞—Å–∏—è.
‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–æ–∑–≤–∞–Ω–æ —Å—É–±—ä–µ–∫—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º –ø—É—Ç–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Å—å–º–µ–Ω–Ω–æ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏—è –û–ø–µ—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—é –ø–æ –∞–¥—Ä–µ—Å—É, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ –Ω–∞—á–∞–ª–µ –¥–∞–Ω–Ω–æ–≥–æ –°–æ–≥–ª–∞—Å–∏—è —Å —É—á–µ—Ç–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–π –ü–æ–ª–∏—Ç–∏–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        else:
            # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            consent_text = """–î–µ–π—Å—Ç–≤—É—è —Å–≤–æ–±–æ–¥–Ω–æ, —Å–≤–æ–µ–π –≤–æ–ª–µ–π –∏ –≤ —Å–≤–æ–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–µ, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—è —Å–≤–æ—é –¥–µ–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ –¥–∞–µ—Ç —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –æ–±—â–µ—Å—Ç–≤—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é ¬´–õ–∏–≥–∞ –ó–Ω–∞—Ç–æ–∫–æ–≤¬ª, –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ: 231761, –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–µ–ª–∞—Ä—É—Å—å, –≥. –°–∫–∏–¥–µ–ª—å —É–ª. –ó–µ–ª—ë–Ω–∞—è 43–í, –ø–æ–º. 53,  –£–ù–ü 591054732 (–¥–∞–ª–µ–µ ‚Äì –û–ø–µ—Ä–∞—Ç–æ—Ä), –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏:


‚Ä¢ –î–∞–Ω–Ω–æ–µ –°–æ–≥–ª–∞—Å–∏–µ –¥–∞–µ—Ç—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–∞–∫ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, —Ç–∞–∫ –∏ —Å –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.
‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ –¥–∞–µ—Ç—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –§–ò–û –∑–∞–∫–æ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–µ–≥–æ —É—á–∞—â–µ–≥–æ—Å—è, –§–ò –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–µ–≥–æ —É—á–∞—â–µ–≥–æ—Å—è,  –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã; –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –∫–ª–∞—Å—Å –æ–±—É—á–µ–Ω–∏—è.
‚Ä¢ –¶–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å–µ https://liga-znatokov.by/register  —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –∑–∞–∫–∞–∑–æ–º —É—Å–ª—É–≥–∏.
‚Ä¢ –í —Ö–æ–¥–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –±—É–¥—É—Ç —Å–æ–≤–µ—Ä—à–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: —Å–±–æ—Ä, —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏—è; —Ö—Ä–∞–Ω–µ–Ω–∏–µ; –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ; –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ; –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ; —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ; –∑–∞–ø–∏—Å—å; —É–¥–∞–ª–µ–Ω–∏–µ; –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ; –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ; –∏–∑–º–µ–Ω–µ–Ω–∏–µ; –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ; –¥–æ—Å—Ç—É–ø.
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥–æ –æ—Ç–∑—ã–≤–∞ —Å–æ–≥–ª–∞—Å–∏—è.
‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–æ–∑–≤–∞–Ω–æ —Å—É–±—ä–µ–∫—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º –ø—É—Ç–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Å—å–º–µ–Ω–Ω–æ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏—è –û–ø–µ—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—é –ø–æ –∞–¥—Ä–µ—Å—É, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ –Ω–∞—á–∞–ª–µ –¥–∞–Ω–Ω–æ–≥–æ –°–æ–≥–ª–∞—Å–∏—è —Å —É—á–µ—Ç–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–π –ü–æ–ª–∏—Ç–∏–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        paragraphs = consent_text.split('\n')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        left_margin = 50
        right_margin = 50
        max_width = page_width - left_margin - right_margin
        line_height = 18
        y_position = page_height - 100
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
        for paragraph in paragraphs:
            if paragraph.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if paragraph.startswith('‚Ä¢'):
                    # –î–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –æ—Ç—Å—Ç—É–ø
                    wrapped_lines = wrap_text(paragraph, max_width, font_name, 12)
                    for i, line in enumerate(wrapped_lines):
                        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–ª–æ–≤
                        if i < len(wrapped_lines) - 1 and len(line.split()) > 3:
                            justified_line = justify_text(line, max_width, font_name, 12)
                            c.drawString(left_margin, y_position, justified_line)
                        else:
                            c.drawString(left_margin, y_position, line)
                        y_position -= line_height
                else:
                    # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    wrapped_lines = wrap_text(paragraph, max_width, font_name, 12)
                    for i, line in enumerate(wrapped_lines):
                        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–ª–æ–≤
                        if i < len(wrapped_lines) - 1 and len(line.split()) > 3:
                            justified_line = justify_text(line, max_width, font_name, 12)
                            c.drawString(left_margin, y_position, justified_line)
                        else:
                            c.drawString(left_margin, y_position, line)
                        y_position -= line_height
            else:
                # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
                y_position -= line_height
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        current_date = datetime.now()
        day = current_date.day
        month_names = [
            '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
            '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
        ]
        month = month_names[current_date.month - 1]
        year = current_date.year
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        date_text = f'¬´{day}¬ª {month} {year} –≥.'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if hasattr(user, 'parent_name'):  # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            signature_text = user.parent_name if user.parent_name else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        elif hasattr(user, 'full_name'):  # –£—á–∏—Ç–µ–ª—å
            signature_text = user.full_name if user.full_name else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        else:
            signature_text = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –≤—ã—à–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        y_signature = 200  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –æ—Ç –Ω–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        x_date = left_margin  # –ü–æ–∑–∏—Ü–∏—è –¥–∞—Ç—ã (—Ç–∞–∫–æ–π –∂–µ –æ—Ç—Å—Ç—É–ø, –∫–∞–∫ —É —Ç–µ–∫—Å—Ç–∞)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –§–ò–û —Å —É—á–µ—Ç–æ–º –µ–≥–æ –¥–ª–∏–Ω—ã
        signature_width = c.stringWidth(signature_text, font_name, 12)
        x_signature = page_width - signature_width - 50  # 50 –ø–∏–∫—Å–µ–ª–µ–π –æ—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∏ –ø–æ–¥–ø–∏—Å—å
        c.drawString(x_date, y_signature, date_text)
        c.drawString(x_signature, y_signature, signature_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
        c.save()
        
        print(f"PDF —Å–æ–≥–ª–∞—Å–∏—è —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {output_path}")
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF —Å–æ–≥–ª–∞—Å–∏—è: {e}")
        return False

def update_category_ranks():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–Ω—É—Ç—Ä–∏ –∏—Ö –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ –∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
    categories = ['1-2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
    
    for category in categories:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –±–∞–ª–∞–Ω—Å—É –∏ –≤—Ä–µ–º–µ–Ω–∏
        users = User.query.filter_by(category=category)\
            .order_by(User.balance.desc(), User.total_tournament_time.asc())\
            .all()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_rank = 1
        current_balance = None
        current_time = None
        same_rank_count = 0
        
        for user in users:
            # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –∏ –≤—Ä–µ–º—è –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if current_balance != user.balance or current_time != user.total_tournament_time:
                current_rank += same_rank_count
                same_rank_count = 0
                current_balance = user.balance
                current_time = user.total_tournament_time
            
            user.category_rank = current_rank
            same_rank_count += 1
        
        db.session.commit()

# –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.after_request
def after_request(response):
    #if response.status_code == 200 and request.endpoint in ['submit_answer', 'buy_tickets', 'use_tickets']:
    if response.status_code == 200 and request.endpoint in []:
        update_category_ranks()
    return response

@app.route('/update-profile', methods=['POST'])
@login_required
def update_profile():
    data = request.get_json()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    student_name = data.get('student_name', '').strip()
    parent_name = data.get('parent_name', '').strip()
    phone = data.get('phone', '').strip()
    category = data.get('category')
    educational_institution_name = data.get('educational_institution_name', '').strip()
    educational_institution_id = data.get('educational_institution_id', '').strip()
    new_password = data.get('new_password', '').strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if not student_name:
        return jsonify({'success': False, 'message': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —É—á–∞—â–µ–≥–æ—Å—è'})
    
    if not parent_name:
        return jsonify({'success': False, 'message': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –∑–∞–∫–æ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è'})
    
    if not phone:
        return jsonify({'success': False, 'message': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'})
    
    if not category:
        return jsonify({'success': False, 'message': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É'})
    
    if not educational_institution_name:
        return jsonify({'success': False, 'message': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è'})
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ —É—á–∞—â–µ–≥–æ—Å—è
    if len(student_name) < 2:
        return jsonify({'success': False, 'message': '–§–∞–º–∏–ª–∏—è –∏ –∏–º—è —É—á–∞—â–µ–≥–æ—Å—è –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞'})
    
    if not re.match(r'^[–∞-—è—ë–ê-–Ø–Å\s]+$', student_name):
        return jsonify({'success': False, 'message': '–§–∞–º–∏–ª–∏—è –∏ –∏–º—è —É—á–∞—â–µ–≥–æ—Å—è –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã'})
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ä–æ–¥–∏—Ç–µ–ª—è
    if len(parent_name) < 2:
        return jsonify({'success': False, 'message': '–§–ò–û –∑–∞–∫–æ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞'})
    
    if not re.match(r'^[–∞-—è—ë–ê-–Ø–Å\s]+$', parent_name):
        return jsonify({'success': False, 'message': '–§–ò–û –∑–∞–∫–æ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã'})
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if phone.startswith('+375'):
        if not re.match(r'^\+375\d{9}$', phone):
            return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ë–µ–ª–∞—Ä—É—Å–∏ (+375XXXXXXXXX)'})
    elif phone.startswith('+7'):
        if not re.match(r'^\+7\d{10}$', phone):
            return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –†–æ—Å—Å–∏–∏ (+7XXXXXXXXXX)'})
    else:
        return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    existing_user = User.query.filter_by(phone=phone).first()
    if existing_user and existing_user.id != current_user.id:
        return jsonify({'success': False, 'message': '–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    valid_categories = ['1-2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
    if category not in valid_categories:
        return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ–∑–æ–Ω–∞
    settings = TournamentSettings.get_settings()
    if settings.is_season_active and category != current_user.category:
        if not settings.allow_category_change:
            return jsonify({'success': False, 'message': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'})
        else:
            return jsonify({'success': False, 'message': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞'})
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    if new_password:
        is_strong, message = is_password_strong(new_password)
        if not is_strong:
            return jsonify({'success': False, 'message': message})
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        if educational_institution_id:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ
            current_user.educational_institution_id = int(educational_institution_id)
        else:
            # –ï—Å–ª–∏ ID –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
            existing_institution = EducationalInstitution.query.filter_by(name=educational_institution_name).first()
            if existing_institution:
                current_user.educational_institution_id = existing_institution.id
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ
                new_institution = EducationalInstitution(
                    name=educational_institution_name,
                    address=''  # –ü—É—Å—Ç–æ–π –∞–¥—Ä–µ—Å –¥–ª—è –Ω–æ–≤—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π
                )
                db.session.add(new_institution)
                db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
                current_user.educational_institution_id = new_institution.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_user.student_name = student_name
        current_user.parent_name = parent_name
        current_user.phone = phone
        current_user.category = category
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        if new_password:
            current_user.set_password(new_password)
        
        db.session.commit()
        return jsonify({'success': True, 'message': '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'})
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è'})

@app.route('/admin/users/clear-data', methods=['POST'])
@login_required
def admin_clear_user_data():
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
    
    admin_password = request.form.get('admin_password')
    if not admin_password:
        return jsonify({'success': False, 'message': '–ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'}), 400
    
    if not current_user.check_password(admin_password):
        return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'}), 400
    
    try:
        # –û—á–∏—â–∞–µ–º —Å—á–µ—Ç, –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –∏ —Ä–∞–Ω–≥–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = User.query.filter_by(is_admin=False).all()
        for user in users:
            user.balance = 0
            user.total_tournament_time = 0
            user.tournaments_count = 0  # –û—á–∏—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤
            user.category_rank = None  # –û–±–Ω—É–ª—è–µ–º —Ä–∞–Ω–≥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        SolvedTask.query.delete()
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
        TournamentParticipation.query.delete()
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        Task.query.delete()
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã
        Tournament.query.delete()
        
        # –û—á–∏—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤
        TournamentSettings.query.delete()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        settings = TournamentSettings()
        db.session.add(settings)
        
        db.session.commit()
        
        return jsonify({
            'success': True,
            'message': '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã'
        })
    except Exception as e:
        db.session.rollback()
        return jsonify({
            'success': False,
            'message': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}'
        }), 500

@app.route('/reset-session', methods=['POST'])
def reset_session():
    """–°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –≤—Ö–æ–¥–∞ —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)"""
    try:
        data = request.get_json()
        username = data.get('username', '').strip()
        password = data.get('password', '').strip()
        
        if not username or not password:
            return jsonify({'success': False, 'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å'})
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = None
        user_type = None
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user = User.query.filter(User.username.ilike(username)).first()
        if user and user.check_password(password):
            user_type = 'user'
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ —É—á–∏—Ç–µ–ª—è—Ö
            user = Teacher.query.filter(Teacher.username.ilike(username)).first()
            if user and user.check_password(password):
                user_type = 'teacher'
            else:
                return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'})
        
        if user.is_blocked:
            return jsonify({'success': False, 'message': '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'})
        
        if not user.is_active:
            return jsonify({'success': False, 'message': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º'})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        if user_type == 'teacher':
            active_session = UserSession.query.filter_by(teacher_id=user.id, user_type='teacher', is_active=True).first()
            if not active_session:
                return jsonify({'success': False, 'message': '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è —Å–±—Ä–æ—Å–∞'})
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ —É—á–∏—Ç–µ–ª—è
            deactivate_user_session(user.id, user_type='teacher', teacher_id=user.id)
        else:
            active_session = UserSession.query.filter_by(user_id=user.id, user_type='user', is_active=True).first()
            if not active_session:
                return jsonify({'success': False, 'message': '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è —Å–±—Ä–æ—Å–∞'})
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            deactivate_user_session(user.id, user_type='user')
        
        return jsonify({
            'success': True, 
            'message': '–°–µ—Å—Å–∏—è –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞'
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–µ—Å—Å–∏–∏: {e}")
        return jsonify({'success': False, 'message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–µ—Å—Å–∏–∏'})

@app.route('/logout-all-devices', methods=['POST'])
@login_required
def logout_all_devices():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    deactivate_user_session(current_user.id)
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    session.pop('session_token', None)
    logout_user()
    
    flash('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤', 'success')
    return redirect(url_for('login'))

class UserSession(db.Model):
    __tablename__ = "user_sessions"

    id = db.Column(db.Integer, primary_key=True, index=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), index=True, nullable=True)
    teacher_id = db.Column(db.Integer, db.ForeignKey('teachers.id'), index=True, nullable=True)
    user_type = db.Column(db.String(20), default='user', index=True)  # 'user' –∏–ª–∏ 'teacher'
    is_active = db.Column(db.Boolean, default=False)
    session_token = db.Column(db.String(255), unique=True, index=True)
    device_info = db.Column(db.String(255), nullable=True)
    last_active = db.Column(db.DateTime, default=datetime.now)
    created_at = db.Column(db.DateTime, default=datetime.now, index=True)

    user = db.relationship('User', backref=db.backref('sessions', lazy=True))
    teacher = db.relationship('Teacher', backref=db.backref('sessions', lazy=True))

    def update_last_active(self):
        self.last_active = datetime.now()
        db.session.commit()

class News(db.Model):
    __tablename__ = "news"

    id = db.Column(db.Integer, primary_key=True, index=True)
    title = db.Column(db.String(200), nullable=False)
    short_description = db.Column(db.Text, nullable=False)
    full_content = db.Column(db.Text, nullable=False)
    image = db.Column(db.String(500), nullable=True)  # –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    is_published = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.now)
    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)
    
    # –°–≤—è–∑—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    images = db.relationship('NewsImage', backref='news', lazy=True, cascade='all, delete-orphan', order_by='NewsImage.order_index')

class NewsImage(db.Model):
    __tablename__ = "news_images"
    
    id = db.Column(db.Integer, primary_key=True, index=True)
    news_id = db.Column(db.Integer, db.ForeignKey('news.id', ondelete='CASCADE'), nullable=False)
    image_filename = db.Column(db.String(500), nullable=False)  # –ò–º—è —Ñ–∞–π–ª–∞ –≤ S3
    caption = db.Column(db.String(200), nullable=True)  # –ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    order_index = db.Column(db.Integer, default=0)  # –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    is_main = db.Column(db.Boolean, default=False)  # –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    created_at = db.Column(db.DateTime, default=datetime.now)

class SchedulerJob(db.Model):
    __tablename__ = "scheduler_jobs"
    
    id = db.Column(db.Integer, primary_key=True, index=True)
    job_id = db.Column(db.String(100), unique=True, nullable=False, index=True)  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–¥–∞—á–∏
    job_type = db.Column(db.String(50), nullable=False)  # –¢–∏–ø –∑–∞–¥–∞—á–∏ (start_tournament, end_tournament, cleanup_sessions)
    tournament_id = db.Column(db.Integer, db.ForeignKey('tournament.id'), nullable=True)  # ID —Ç—É—Ä–Ω–∏—Ä–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
    run_date = db.Column(db.DateTime, nullable=False)  # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    is_active = db.Column(db.Boolean, default=True)  # –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
    server_id = db.Column(db.String(100), nullable=False, index=True)  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Ä–≤–µ—Ä–∞
    created_at = db.Column(db.DateTime, default=datetime.now)
    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)
    
    # –°–≤—è–∑—å —Å —Ç—É—Ä–Ω–∏—Ä–æ–º (–µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ç—É—Ä–Ω–∏—Ä–æ–º)
    tournament = db.relationship('Tournament', backref=db.backref('scheduler_jobs', lazy=True))

class SchedulerLock(db.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –º–µ–∂–¥—É –≤–æ—Ä–∫–µ—Ä–∞–º–∏"""
    __tablename__ = "scheduler_locks"
    
    id = db.Column(db.Integer, primary_key=True, index=True)
    lock_name = db.Column(db.String(100), unique=True, nullable=False, index=True)  # –ò–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    worker_pid = db.Column(db.Integer, nullable=False)  # PID –≤–æ—Ä–∫–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–µ—Ä–∂–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    server_id = db.Column(db.String(100), nullable=False)  # ID —Å–µ—Ä–≤–µ—Ä–∞
    acquired_at = db.Column(db.DateTime, default=datetime.now)  # –ö–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    expires_at = db.Column(db.DateTime, nullable=False)  # –ö–æ–≥–¥–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    is_active = db.Column(db.Boolean, default=True)  # –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞

class EducationalInstitution(db.Model):
    __tablename__ = "educational_institutions"
    
    id = db.Column(db.Integer, primary_key=True, index=True)
    name = db.Column(db.String(500), nullable=False)  # –ù–∞–∑–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    address = db.Column(db.Text, nullable=False)  # –ê–¥—Ä–µ—Å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
    created_at = db.Column(db.DateTime, default=datetime.now)
    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)

class ReferralLink(db.Model):
    __tablename__ = "referral_links"
    
    id = db.Column(db.Integer, primary_key=True, index=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False, index=True)
    referral_code = db.Column(db.String(50), unique=True, nullable=False, index=True)
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.now)
    
    # –°–≤—è–∑–∏
    user = db.relationship('User', backref=db.backref('referral_links', lazy=True, cascade='all, delete-orphan'))
    referrals = db.relationship('Referral', backref='referral_link', lazy=True, cascade='all, delete-orphan')

class Referral(db.Model):
    __tablename__ = "referrals"
    
    id = db.Column(db.Integer, primary_key=True, index=True)
    referrer_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False, index=True)  # –ö—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
    referred_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False, index=True)  # –ö–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏
    referral_link_id = db.Column(db.Integer, db.ForeignKey('referral_links.id'), nullable=False)
    bonus_paid = db.Column(db.Boolean, default=False)  # –í—ã–ø–ª–∞—á–µ–Ω –ª–∏ –±–æ–Ω—É—Å
    bonus_paid_at = db.Column(db.DateTime, nullable=True)  # –ö–æ–≥–¥–∞ –≤—ã–ø–ª–∞—á–µ–Ω –±–æ–Ω—É—Å
    created_at = db.Column(db.DateTime, default=datetime.now)
    
    # –°–≤—è–∑–∏
    referrer = db.relationship('User', foreign_keys=[referrer_id], backref=db.backref('referrals_sent', lazy=True, cascade='all, delete-orphan'))
    referred = db.relationship('User', foreign_keys=[referred_id], backref=db.backref('referrals_received', lazy=True, cascade='all, delete-orphan'))

class Teacher(UserMixin, db.Model):
    __tablename__ = "teachers"
    
    id = db.Column(db.Integer, primary_key=True, index=True)
    username = db.Column(db.String(80), unique=True, nullable=False, index=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    hashed_password = db.Column(db.String(128), nullable=False, index=True)
    phone = db.Column(db.String(20), unique=True, nullable=True)
    full_name = db.Column(db.String(100), nullable=False)  # –§–ò–û —É—á–∏—Ç–µ–ª—è
    is_active = db.Column(db.Boolean, default=False, index=True)
    is_blocked = db.Column(db.Boolean, default=False, index=True)
    block_reason = db.Column(db.Text, nullable=True)
    email_confirmation_token = db.Column(db.String(100), unique=True, nullable=True, index=True)
    session_token = db.Column(db.String(100), unique=True, nullable=True, index=True)
    temp_password = db.Column(db.String(128), nullable=True)
    reset_password_token = db.Column(db.String(100), unique=True, nullable=True, index=True)
    reset_password_token_expires = db.Column(db.DateTime, nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.now)
    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)
    
    # –ë–∞–ª–∞–Ω—Å —É—á–∏—Ç–µ–ª—è –≤ –±–∞–ª–ª–∞—Ö
    balance = db.Column(db.Integer, default=0, nullable=False)
    
    # –°–≤—è–∑—å —Å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ–º
    educational_institution_id = db.Column(db.Integer, db.ForeignKey('educational_institutions.id'), nullable=True)
    educational_institution = db.relationship('EducationalInstitution', backref=db.backref('teachers', lazy=True))
    
    # –°–≤—è–∑–∏ —Å –∫–æ—Ä–∑–∏–Ω–æ–π –∏ –ø–æ–∫—É–ø–∫–∞–º–∏ –ø—Ä–∏–∑–æ–≤
    @property
    def cart_items(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –¥–ª—è —É—á–∏—Ç–µ–ª—è"""
        return TeacherCartItem.query.filter_by(teacher_id=self.id).all()
    
    @property
    def prize_purchases(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏–∑–æ–≤ –¥–ª—è —É—á–∏—Ç–µ–ª—è"""
        return TeacherPrizePurchase.query.filter_by(teacher_id=self.id).all()
    
    def set_password(self, password):
        self.hashed_password = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.hashed_password, password)

    def generate_confirmation_token(self):
        token = secrets.token_urlsafe(32)
        self.email_confirmation_token = token
        db.session.commit()
        return token
    
    def get_id(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –¥–ª—è Flask-Login —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º 't' –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π"""
        return f't{self.id}'

class TeacherInviteLink(db.Model):
    __tablename__ = "teacher_invite_links"
    
    id = db.Column(db.Integer, primary_key=True, index=True)
    teacher_id = db.Column(db.Integer, db.ForeignKey('teachers.id'), nullable=False, index=True)
    invite_code = db.Column(db.String(50), unique=True, nullable=False, index=True)
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.now)
    
    # –°–≤—è–∑–∏
    teacher = db.relationship('Teacher', backref=db.backref('invite_links', lazy=True))

class TeacherReferral(db.Model):
    __tablename__ = "teacher_referrals"
    
    id = db.Column(db.Integer, primary_key=True, index=True)
    teacher_id = db.Column(db.Integer, db.ForeignKey('teachers.id'), nullable=False, index=True)
    student_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False, index=True)
    teacher_invite_link_id = db.Column(db.Integer, db.ForeignKey('teacher_invite_links.id'), nullable=False)
    bonus_paid = db.Column(db.Boolean, default=False)  # –í—ã–ø–ª–∞—á–µ–Ω –ª–∏ –±–æ–Ω—É—Å
    bonus_paid_at = db.Column(db.DateTime, nullable=True)  # –ö–æ–≥–¥–∞ –≤—ã–ø–ª–∞—á–µ–Ω –±–æ–Ω—É—Å
    created_at = db.Column(db.DateTime, default=datetime.now)
    
    # –°–≤—è–∑–∏
    teacher = db.relationship('Teacher', foreign_keys=[teacher_id], backref=db.backref('teacher_referrals_sent', lazy=True, cascade='all, delete-orphan'))
    student = db.relationship('User', foreign_keys=[student_id], backref=db.backref('teacher_referrals_received', lazy=True, cascade='all, delete-orphan'))
    teacher_invite_link = db.relationship('TeacherInviteLink', backref=db.backref('teacher_referrals', lazy=True, cascade='all, delete-orphan'))

class CurrencyRate(db.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    __tablename__ = "currency_rates"

    id = db.Column(db.Integer, primary_key=True, index=True)
    currency_pair = db.Column(db.String(10), nullable=False, index=True)  # –Ω–∞–ø—Ä–∏–º–µ—Ä "BYN_RUB"
    rate = db.Column(db.Float, nullable=False)
    source = db.Column(db.String(50), nullable=False)  # "nbrb", "cbr", "fallback"
    created_at = db.Column(db.DateTime, default=datetime.now, index=True)
    
    def __repr__(self):
        return f"<CurrencyRate(currency_pair='{self.currency_pair}', rate={self.rate}, source='{self.source}')>"

def cleanup_all_sessions():
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        UserSession.query.filter_by(is_active=True).update({'is_active': False})
        db.session.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–µ—Å—Å–∏–π: {e}")

@atexit.register
def cleanup_on_exit():
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    cleanup_all_sessions()

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    print(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    cleanup_all_sessions()
    exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)

def cleanup_old_sessions():
    with open ('d.txt', 'a', encoding='utf-8') as file:
        file.write('cleanup_old_sessions\n')
    """–£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ email –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏–∏ —Å—Ç–∞—Ä—à–µ 1 –Ω–µ–¥–µ–ª–∏ (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
        one_week_ago = datetime.now() - timedelta(days=7)
        deleted_sessions = UserSession.query.filter(
            UserSession.created_at < one_week_ago,
            UserSession.is_active == False
        ).delete()
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ email —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π
        three_days_ago = datetime.now() - timedelta(days=3)
        deleted_users = User.query.filter(
            User.is_active == False,
            User.email_confirmation_token.isnot(None),
            User.created_at < three_days_ago,
            User.is_admin == False  # –ù–µ —É–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        ).delete()
        
        db.session.commit()
        
        # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if deleted_sessions > 0 or deleted_users > 0:
            print(f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_sessions} —Å–µ—Å—Å–∏–π –∏ {deleted_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ email")
        else:
            print("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å")
        
        # –ù–ï —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–¥–∞—á–µ –∏–∑ –ë–î, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞
        # –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
        
    except Exception as e:
        db.session.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–µ—Å—Å–∏–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        import traceback
        print(f"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ: {traceback.format_exc()}")
cleanup_old_sessions()
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Å–µ—Å—Å–∏–π
#add_scheduler_job(
#    cleanup_old_sessions,
#    datetime.now() + timedelta(hours=24),  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
#    None,
#    'cleanup_sessions'
#)



# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
MAX_LOGIN_ATTEMPTS = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
LOGIN_TIMEOUT = 1800  # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (30 –º–∏–Ω—É—Ç)
LOGIN_ATTEMPTS_COOKIE = 'login_attempts'
LOGIN_BLOCKED_UNTIL_COOKIE = 'login_blocked_until'

def get_login_attempts():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ –∏–∑ –∫—É–∫–∏"""
    attempts = request.cookies.get(LOGIN_ATTEMPTS_COOKIE)
    try:
        return int(attempts) if attempts else 0
    except (ValueError, TypeError):
        return 0

def increment_login_attempts():
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞"""
    attempts = get_login_attempts() + 1
    response = make_response(redirect(url_for('login')))
    response.set_cookie(
        LOGIN_ATTEMPTS_COOKIE,
        str(attempts),
        max_age=LOGIN_TIMEOUT,
        secure=False,  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ False, —Ç–∞–∫ –∫–∞–∫ SESSION_COOKIE_SECURE —Ç–æ–∂–µ False
        httponly=True,
        samesite='Lax'
    )
    return response

def reset_login_attempts():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞"""
    response = make_response(redirect(url_for('home')))
    response.set_cookie(
        LOGIN_ATTEMPTS_COOKIE,
        '0',  # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
        max_age=0,
        secure=False,  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ False
        httponly=True,
        samesite='Lax'
    )
    response.set_cookie(
        LOGIN_BLOCKED_UNTIL_COOKIE,
        '',
        max_age=0,
        secure=False,  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ False
        httponly=True,
        samesite='Lax'
    )
    return response

def is_login_blocked():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –≤—Ö–æ–¥"""
    blocked_until = request.cookies.get(LOGIN_BLOCKED_UNTIL_COOKIE)
    if blocked_until:
        try:
            blocked_time = datetime.fromtimestamp(float(blocked_until))
            if datetime.now() < blocked_time:
                return True
        except (ValueError, TypeError):
            pass
    return False

def block_login():
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Ö–æ–¥ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    blocked_until = datetime.now() + timedelta(seconds=LOGIN_TIMEOUT)
    response = make_response(redirect(url_for('login')))
    response.set_cookie(
        LOGIN_BLOCKED_UNTIL_COOKIE,
        str(blocked_until.timestamp()),
        max_age=LOGIN_TIMEOUT,
        secure=False,  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ False
        httponly=True,
        samesite='Lax'
    )
    return response

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
def generate_referral_code():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥"""
    while True:
        code = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=8))
        if not ReferralLink.query.filter_by(referral_code=code).first():
            return code

def create_referral_link(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞
    existing_link = ReferralLink.query.filter_by(user_id=user_id, is_active=True).first()
    if existing_link:
        return existing_link
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É
    referral_code = generate_referral_code()
    new_link = ReferralLink(
        user_id=user_id,
        referral_code=referral_code,
        is_active=True
    )
    db.session.add(new_link)
    db.session.commit()
    return new_link

def get_referral_link_by_code(code):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ –∫–æ–¥—É"""
    return ReferralLink.query.filter_by(referral_code=code, is_active=True).first()

def create_referral(referrer_id, referred_id, referral_link_id):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º –¥—Ä—É–≥–µ"""
    referral = Referral(
        referrer_id=referrer_id,
        referred_id=referred_id,
        referral_link_id=referral_link_id,
        bonus_paid=False
    )
    db.session.add(referral)
    db.session.commit()
    return referral

def pay_referral_bonus(referral_id):
    """–í—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞"""
    referral = Referral.query.get(referral_id)
    if not referral or referral.bonus_paid:
        return False
    
    try:
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        referrer = User.query.get(referral.referrer_id)
        if referrer:
            referrer.balance += REFERRAL_BONUS_POINTS
            referrer.tickets += REFERRAL_BONUS_TICKETS
            
            # –û—Ç–º–µ—á–∞–µ–º –±–æ–Ω—É—Å –∫–∞–∫ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã–π
            referral.bonus_paid = True
            referral.bonus_paid_at = datetime.now()
            
            db.session.commit()
            return True
    except Exception as e:
        db.session.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞: {e}")
        return False
    
    return False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ —É—á–∏—Ç–µ–ª–µ–π
def generate_teacher_invite_code():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —É—á–∏—Ç–µ–ª—è"""
    while True:
        code = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=10))
        if not TeacherInviteLink.query.filter_by(invite_code=code).first():
            return code

def create_teacher_invite_link(teacher_id):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —É—á–∏—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞
    existing_link = TeacherInviteLink.query.filter_by(teacher_id=teacher_id, is_active=True).first()
    if existing_link:
        return existing_link
    
    invite_code = generate_teacher_invite_code()
    new_link = TeacherInviteLink(
        teacher_id=teacher_id,
        invite_code=invite_code,
        is_active=True
    )
    db.session.add(new_link)
    db.session.commit()
    return new_link

def get_teacher_invite_link_by_code(code):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —É—á–∏—Ç–µ–ª—è –ø–æ –∫–æ–¥—É"""
    return TeacherInviteLink.query.filter_by(invite_code=code, is_active=True).first()

def check_and_pay_referral_bonuses():
    with open ('d.txt', 'a', encoding='utf-8') as file:
        file.write('check_and_pay_referral_bonuses\n')
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç –±–æ–Ω—É—Å—ã –∑–∞ –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö, –Ω–æ –±–æ–Ω—É—Å –µ—â–µ –Ω–µ –≤—ã–ø–ª–∞—á–µ–Ω
        referrals_to_pay = db.session.query(Referral).join(
            User, Referral.referred_id == User.id
        ).filter(
            Referral.bonus_paid == False,
            User.tournaments_count > 0
        ).all()
        
        paid_count = 0
        for referral in referrals_to_pay:
            if pay_referral_bonus(referral.id):
                paid_count += 1
        
        if paid_count > 0:
            print(f"–í—ã–ø–ª–∞—á–µ–Ω–æ {paid_count} –±–æ–Ω—É—Å–æ–≤ –∑–∞ –¥—Ä—É–∑–µ–π")
        
        return paid_count
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –¥—Ä—É–∑–µ–π: {e}")
        return 0

def create_teacher_referral(teacher_id, student_id, teacher_invite_link_id):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º —É—á–µ–Ω–∏–∫–µ —É—á–∏—Ç–µ–ª–µ–º"""
    teacher_referral = TeacherReferral(
        teacher_id=teacher_id,
        student_id=student_id,
        teacher_invite_link_id=teacher_invite_link_id,
        bonus_paid=False
    )
    db.session.add(teacher_referral)
    db.session.commit()
    return teacher_referral

def pay_teacher_referral_bonus(teacher_referral_id):
    """–í—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç –±–æ–Ω—É—Å —É—á–∏—Ç–µ–ª—é –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞"""
    teacher_referral = TeacherReferral.query.get(teacher_referral_id)
    if not teacher_referral or teacher_referral.bonus_paid:
        return False
    
    try:
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã —É—á–∏—Ç–µ–ª—é
        teacher = Teacher.query.get(teacher_referral.teacher_id)
        if teacher:
            teacher.balance += TEACHER_REFERRAL_BONUS_POINTS
            
            # –û—Ç–º–µ—á–∞–µ–º –±–æ–Ω—É—Å –∫–∞–∫ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã–π
            teacher_referral.bonus_paid = True
            teacher_referral.bonus_paid_at = datetime.now()
            
            db.session.commit()
            return True
    except Exception as e:
        db.session.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–µ –±–æ–Ω—É—Å–∞ —É—á–∏—Ç–µ–ª—é: {e}")
        return False
    
    return False

def check_and_pay_teacher_referral_bonuses():
    with open('d.txt', 'a', encoding='utf-8') as file:
        file.write('check_and_pay_teacher_referral_bonuses\n')
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç –±–æ–Ω—É—Å—ã —É—á–∏—Ç–µ–ª—è–º –∑–∞ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö, –Ω–æ –±–æ–Ω—É—Å —É—á–∏—Ç–µ–ª—é –µ—â–µ –Ω–µ –≤—ã–ø–ª–∞—á–µ–Ω
        teacher_referrals_to_pay = db.session.query(TeacherReferral).join(
            User, TeacherReferral.student_id == User.id
        ).filter(
            TeacherReferral.bonus_paid == False,
            User.tournaments_count > 0
        ).all()
        print(teacher_referrals_to_pay, 123)
        paid_count = 0
        for teacher_referral in teacher_referrals_to_pay:
            if pay_teacher_referral_bonus(teacher_referral.id):
                paid_count += 1
        
        if paid_count > 0:
            print(f"–í—ã–ø–ª–∞—á–µ–Ω–æ {paid_count} –±–æ–Ω—É—Å–æ–≤ —É—á–∏—Ç–µ–ª—è–º –∑–∞ —É—á–µ–Ω–∏–∫–æ–≤")
        
        return paid_count
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ–Ω—É—Å–æ–≤ —É—á–∏—Ç–µ–ª—è–º: {e}")
        return 0
@app.route('/rating/search')
def rating_search():
    query = sanitize_input(request.args.get('q', ''), 100)
    category = request.args.get('category', '')
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not query:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞
        return jsonify({'users': []})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    valid_categories = ['1-2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
    if category and category not in valid_categories:
        return jsonify({'users': []})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
    show_full_rating = False
    if current_user.is_authenticated:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if hasattr(current_user, 'is_admin') and current_user.is_admin:
            # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–µ–∂–∏–º–∞
            mode = request.args.get('mode')
            show_full_rating = mode == 'full'
        elif hasattr(current_user, 'tournaments_count'):
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
            show_full_rating = current_user.tournaments_count > 0
        # –î–ª—è —É—á–∏—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10 (show_full_rating –æ—Å—Ç–∞–µ—Ç—Å—è False)
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_query = (
        db.session.query(
            User,
            func.count(SolvedTask.id).label('solved_tasks_count'),
            func.sum(case((SolvedTask.is_correct == True, 1), else_=0)).label('correct_tasks_count')
        )
        .outerjoin(SolvedTask, User.id == SolvedTask.user_id)
        .filter(User.is_admin == False)
        .filter(
            db.or_(
                User.username.ilike('%' + query + '%'),
                User.student_name.ilike('%' + query + '%')
            )
        )
    )
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if category:
        search_query = search_query.filter(User.category == category)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    search_query = search_query.group_by(User.id).order_by(User.balance.desc())
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if show_full_rating:
        search_results = search_query.limit(50).all()  # –ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
    else:
        search_results = search_query.limit(10).all()  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏–º–∏—Ç
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    users = []
    for user, solved_tasks_count, correct_tasks_count in search_results:
        user.solved_tasks_count = correct_tasks_count or 0
        user.success_rate = round((correct_tasks_count / solved_tasks_count * 100) if solved_tasks_count else 0, 1)
        user.is_current_user = False
        
        # –†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –≤ –ø–æ–ª–µ category_rank
        # user.category_rank —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—è –∏–∑ –º–æ–¥–µ–ª–∏ User –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤
        user.tournaments_count = user.tournaments_count or 0
        user.total_tournament_time = user.total_tournament_time or 0
        
        users.append({
            'id': user.id,
            'username': user.username,
            'student_name': user.student_name,
            'category': user.category,
            'balance': user.balance,
            'solved_tasks_count': user.solved_tasks_count,
            'success_rate': user.success_rate,
            'category_rank': user.category_rank,
            'tournaments_count': user.tournaments_count,
            'total_tournament_time': user.total_tournament_time,
            'is_current_user': user.id == current_user.id if current_user.is_authenticated else False
        })
    
    return jsonify({'users': users})

@app.context_processor
def inject_s3_utils():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ S3 –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤"""
    return {
        'get_s3_url': get_s3_url,
        'get_file_url': get_file_url,
        'isinstance': isinstance,
        'Teacher': Teacher
    }

@app.context_processor
def inject_csrf_token():
    """–î–æ–±–∞–≤–ª—è–µ—Ç CSRF —Ç–æ–∫–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤"""
    return dict(csrf_token=lambda: secrets.token_urlsafe(32))

def cleanup_other_servers_jobs():
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
        one_hour_ago = datetime.now() - timedelta(hours=1)
        other_servers_jobs = SchedulerJob.query.filter(
            SchedulerJob.server_id != SERVER_ID,
            SchedulerJob.created_at < one_hour_ago
        ).all()
        
        for job in other_servers_jobs:
            db.session.delete(job)
        
        if other_servers_jobs:
            db.session.commit()
            print(f"–£–¥–∞–ª–µ–Ω–æ {len(other_servers_jobs)} –∑–∞–¥–∞—á –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
            
    except Exception as e:
        db.session.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–¥–∞—á –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")

def check_expired_payments():
    with open ('d.txt', 'a', encoding='utf-8') as file:
        file.write('check_expired_payments\n')
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ÆKassa
        check_yukassa_expired_payments()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ Express-Pay
        check_express_pay_expired_payments()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {e}")

def create_database_backup():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from remote_backup_service import RemoteBackupService
        
        print("üîÑ –ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞ –ë–î...")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∫–∞–ø–æ–≤
        backup_service = RemoteBackupService()
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∫–∞–ø
        success = backup_service.create_backup()
        
        if success:
            print("‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–µ–∫–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞")
            
        return success
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–µ–∫–∞–ø–∞: {e}")
        return False

def check_yukassa_expired_payments():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ÆKassa"""
    try:
        from yukassa_service import yukassa_service
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending –ø–ª–∞—Ç–µ–∂–∏ –ÆKassa
        pending_purchases = TicketPurchase.query.filter_by(
            payment_status='pending',
            payment_system='yukassa'
        ).all()
        
        expired_count = 0
        for purchase in pending_purchases:
            if purchase.payment_id:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                    payment_info = yukassa_service.get_payment_info(purchase.payment_id)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ –ø–ª–∞—Ç–µ–∂
                    if yukassa_service.is_payment_expired(payment_info):
                        purchase.payment_status = 'expired'
                        expired_count += 1
                        print(f"–ü–ª–∞—Ç–µ–∂ –ÆKassa {purchase.payment_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–π")
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa {purchase.payment_id}: {e}")
                    continue
        
        if expired_count > 0:
            db.session.commit()
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {expired_count} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ÆKassa")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ÆKassa: {e}")
        db.session.rollback()

def check_express_pay_expired_payments():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π Express-Pay"""
    try:
        from express_pay_service import ExpressPayService
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending –ø–ª–∞—Ç–µ–∂–∏ Express-Pay
        pending_purchases = TicketPurchase.query.filter_by(
            payment_status='pending',
            payment_system='express_pay'
        ).all()
        
        if not pending_purchases:
            return
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ Express-Pay
        express_pay_service = ExpressPayService()
        
        expired_count = 0
        for purchase in pending_purchases:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ payment_id –Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            if not purchase.payment_id or purchase.payment_id == 'None' or purchase.payment_id == 'null':
                print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∫—É–ø–∫—É {purchase.id}: payment_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ä–∞–≤–µ–Ω None")
                continue
            try:
                old_status = purchase.payment_status
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint
                status_response = express_pay_service.get_payment_status(purchase.payment_id)
                status_code = status_response.get('Status')
                status = express_pay_service.parse_payment_status(status_code)
                purchase.payment_status = status

                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ 'succeeded', –Ω–∞—á–∏—Å–ª—è–µ–º –∂–µ—Ç–æ–Ω—ã
                if status == 'succeeded' and old_status != 'succeeded':
                    user = User.query.get(purchase.user_id)
                    if user:
                        user.tickets += purchase.quantity
                        purchase.payment_confirmed_at = datetime.now()
                        print(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∞—á–∏—Å–ª–µ–Ω–æ {purchase.quantity} –∂–µ—Ç–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")

                # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –∏—Å—Ç–µ–∫ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                if status in ['expired', 'canceled']:
                    expired_count += 1
                    print(f"–ü–ª–∞—Ç–µ–∂ Express-Pay {purchase.payment_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ {status}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ Express-Pay {purchase.payment_id}: {e}")
                continue
        
        if expired_count > 0:
            db.session.commit()
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {expired_count} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π Express-Pay")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π Express-Pay: {e}")
        db.session.rollback()

def initialize_scheduler_jobs():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        existing_job = SchedulerJob.query.filter_by(
            job_type='check_expired_payments',
            is_active=True
        ).first()

        if not existing_job:
            add_scheduler_job(
                check_expired_payments,
                datetime.now() + timedelta(hours=1),  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 1 —á–∞—Å
                None,
                'check_expired_payments',
                interval_hours=1  # –ü–æ–≤—Ç–æ—Ä—è—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å
            )
            print("–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
        else:
            print("–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–æ–Ω—É—Å–æ–≤ –∑–∞ –¥—Ä—É–∑–µ–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        existing_referral_job = SchedulerJob.query.filter_by(
            job_type='check_referral_bonuses',
            is_active=True
        ).first()

        if not existing_referral_job:
            add_scheduler_job(
                check_and_pay_referral_bonuses,
                datetime.now() + timedelta(hours=1),  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 1 —á–∞—Å
                None,
                'check_referral_bonuses',
                interval_hours=24  # –ü–æ–≤—Ç–æ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
            )
            print("–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –¥—Ä—É–∑–µ–π")
        else:
            print("–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –¥—Ä—É–∑–µ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–æ–Ω—É—Å–æ–≤ —É—á–∏—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        existing_teacher_referral_job = SchedulerJob.query.filter_by(
            job_type='check_teacher_referral_bonuses',
            is_active=True
        ).first()

        if not existing_teacher_referral_job:
            print(f"–°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É check_teacher_referral_bonuses —Å start_date={datetime.now() + timedelta(seconds=1)}")
            add_scheduler_job(
                check_and_pay_teacher_referral_bonuses,
                datetime.now() + timedelta(hours=1),  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 1 —á–∞—Å

                None,
                'check_teacher_referral_bonuses',
                interval_hours=24  # –ü–æ–≤—Ç–æ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
            )
            print("–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ–Ω—É—Å–æ–≤ —É—á–∏—Ç–µ–ª—è–º")
        else:
            print("–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ–Ω—É—Å–æ–≤ —É—á–∏—Ç–µ–ª—è–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Å–µ—Å—Å–∏–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        existing_cleanup_job = SchedulerJob.query.filter_by(
            job_type='cleanup_sessions',
            is_active=True
        ).first()

        if not existing_cleanup_job:
            add_scheduler_job(
                cleanup_old_sessions,
                datetime.now() + timedelta(hours=1),  # run_date –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è interval
                None,
                'cleanup_sessions',
                interval_hours=24  # –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
            )
            print("–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π")
        else:
            print("–ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–æ–≤ –ë–î (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        existing_backup_job = SchedulerJob.query.filter_by(
            job_type='database_backup',
            is_active=True
        ).first()

        if not existing_backup_job:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            backup_hour = int(os.environ.get('BACKUP_TIME_HOUR', '2'))
            backup_minute = int(os.environ.get('BACKUP_TIME_MINUTE', '0'))
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (—Å–µ–≥–æ–¥–Ω—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è)
            now = datetime.now()
            first_run = now.replace(hour=backup_hour, minute=backup_minute, second=0, microsecond=0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –Ω–µ–±–æ–ª—å—à–æ–≥–æ –æ–∫–Ω–∞ (1 –º–∏–Ω—É—Ç–∞)
            time_diff = abs((now - first_run).total_seconds())
            
            if time_diff < 60:  # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ 1 –º–∏–Ω—É—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è
                print(f"–í—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç (—Ä–∞–∑–Ω–∏—Ü–∞: {time_diff:.0f} —Å–µ–∫), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è")
            elif first_run <= now:
                first_run += timedelta(days=1)
                print(f"–í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
            else:
                print(f"–í—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è")
            
            add_scheduler_job(
                create_database_backup,
                first_run,
                None,  # tournament_id –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –±–µ–∫–∞–ø–æ–≤
                'database_backup',
                interval_hours=24  # –ü–æ–≤—Ç–æ—Ä—è—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
            )
            print(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–æ–≤ –ë–î. –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: {first_run}")
        else:
            print("–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–æ–≤ –ë–î —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

@app.route('/reset-tutorial', methods=['POST'])
@login_required
def reset_tutorial():
    """–°–±—Ä–æ—Å –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    response = make_response(jsonify({'success': True}))
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫—É–∫–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    response.delete_cookie('tutorial_completed')
    
    # –£–¥–∞–ª—è–µ–º –∫—É–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cookie_name = f'tutorial_completed_{current_user.id}'
    response.delete_cookie(cookie_name)
    
    return response

@app.route('/api/search-educational-institutions')
def search_educational_institutions():
    query = sanitize_input(request.args.get('q', ''), 200)
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not query:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞
        return jsonify({'institutions': []})
    results = EducationalInstitution.query.filter(EducationalInstitution.name.ilike('%' + query + '%')).limit(50).all()
    institutions = [{'id': inst.id, 'name': inst.name, 'address': inst.address} for inst in results]
    return jsonify({'institutions': institutions})

# –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∫–ª—É–±–∞ –¥—Ä—É–∑–µ–π
@app.route('/referral')
@login_required
def referral_dashboard():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–ª—É–±–∞ –¥—Ä—É–∑–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    referral_link = create_referral_link(current_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—Ä—É–∑–µ–π
    referrals = Referral.query.filter_by(referrer_id=current_user.id).all()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_referrals = len(referrals)
    paid_referrals = len([r for r in referrals if r.bonus_paid])
    pending_referrals = total_referrals - paid_referrals
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π
    page = request.args.get('page', 1, type=int)
    per_page = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    # –ü–æ–ª—É—á–∞–µ–º –¥—Ä—É–∑–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    referrals_paginated = Referral.query.filter_by(referrer_id=current_user.id)\
        .order_by(Referral.created_at.desc())\
        .paginate(page=page, per_page=per_page, error_out=False)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    referrals_info = []
    for referral in referrals_paginated.items:
        referred_user = User.query.get(referral.referred_id)
        if referred_user:
            referrals_info.append({
                'username': referred_user.username,
                'student_name': referred_user.student_name,
                'created_at': referral.created_at.strftime('%d.%m.%Y'),
                'tournaments_count': referred_user.tournaments_count,
                'bonus_paid': referral.bonus_paid,
                'bonus_paid_at': referral.bonus_paid_at.strftime('%d.%m.%Y %H:%M') if referral.bonus_paid_at else None
            })
    
    return render_template('referral.html', 
                         referral_link=referral_link,
                         referrals_info=referrals_info,
                         referrals_paginated=referrals_paginated,
                         total_referrals=total_referrals,
                         paid_referrals=paid_referrals,
                         pending_referrals=pending_referrals,
                         bonus_points=REFERRAL_BONUS_POINTS,
                         bonus_tickets=REFERRAL_BONUS_TICKETS)



@app.route('/referral/copy-link', methods=['POST'])
@login_required
def copy_referral_link():
    """–ö–æ–ø–∏—Ä—É–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
    referral_link = ReferralLink.query.filter_by(user_id=current_user.id, is_active=True).first()
    if not referral_link:
        return jsonify({'success': False, 'error': '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'})
    
    referral_url = url_for('register', ref=referral_link.referral_code, _external=True, _scheme='https')
    return jsonify({
        'success': True,
        'referral_url': referral_url,
        'message': '–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞'
    })



if __name__ == '__main__':
    #logging.basicConfig(filename='err.log', level=logging.DEBUG)
    logging.basicConfig(level=logging.DEBUG)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    start_memory_cleanup_once()

    app.run(host='0.0.0.0', port=8000, debug=DEBAG)